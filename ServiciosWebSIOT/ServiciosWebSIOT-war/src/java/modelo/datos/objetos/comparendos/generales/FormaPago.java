package modelo.datos.objetos.comparendos.generales;

import java.io.Serializable;

/**
  * FormaPago Value Object.
  * This class is value object representing database table FORMAPAGO
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class FormaPago implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID;
    private int IDTRANSITOSERVICIOBANCO;
    private int IDRECIBO;
    private double VALOR;
    private int IDORIGENDESCARGO;
    private int IDUSUARIO;
    private String NUMEROCHEQUE;
    private int ID_TIPOPAGO;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public FormaPago() {

    }

    public FormaPago(int IDIn) {

        this.ID = IDIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() {
        return this.ID;
    }

    public void setID(int IDIn) {
        this.ID = IDIn;
    }

    public int getIDTRANSITOSERVICIOBANCO() {
        return this.IDTRANSITOSERVICIOBANCO;
    }

    public void setIDTRANSITOSERVICIOBANCO(int IDTRANSITOSERVICIOBANCOIn) {
        this.IDTRANSITOSERVICIOBANCO = IDTRANSITOSERVICIOBANCOIn;
    }

    public int getIDRECIBO() {
        return this.IDRECIBO;
    }

    public void setIDRECIBO(int IDRECIBOIn) {
        this.IDRECIBO = IDRECIBOIn;
    }

    public double getVALOR() {
        return this.VALOR;
    }

    public void setVALOR(double VALORIn) {
        this.VALOR = VALORIn;
    }

    public int getIDORIGENDESCARGO() {
        return this.IDORIGENDESCARGO;
    }

    public void setIDORIGENDESCARGO(int IDORIGENDESCARGOIn) {
        this.IDORIGENDESCARGO = IDORIGENDESCARGOIn;
    }

    public int getIDUSUARIO() {
        return this.IDUSUARIO;
    }

    public void setIDUSUARIO(int IDUSUARIOIn) {
        this.IDUSUARIO = IDUSUARIOIn;
    }

    public String getNUMEROCHEQUE() {
        return this.NUMEROCHEQUE;
    }

    public void setNUMEROCHEQUE(String NUMEROCHEQUEIn) {
        this.NUMEROCHEQUE = NUMEROCHEQUEIn;
    }

    public int getID_TIPOPAGO() {
        return this.ID_TIPOPAGO;
    }

    public void setID_TIPOPAGO(int ID_TIPOPAGOIn) {
        this.ID_TIPOPAGO = ID_TIPOPAGOIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int IDIn, int IDTRANSITOSERVICIOBANCOIn, int IDRECIBOIn, double VALORIn, int IDORIGENDESCARGOIn,
                       int IDUSUARIOIn, String NUMEROCHEQUEIn, int ID_TIPOPAGOIn) {
        this.ID = IDIn;
        this.IDTRANSITOSERVICIOBANCO = IDTRANSITOSERVICIOBANCOIn;
        this.IDRECIBO = IDRECIBOIn;
        this.VALOR = VALORIn;
        this.IDORIGENDESCARGO = IDORIGENDESCARGOIn;
        this.IDUSUARIO = IDUSUARIOIn;
        this.NUMEROCHEQUE = NUMEROCHEQUEIn;
        this.ID_TIPOPAGO = ID_TIPOPAGOIn;
    }


    /**
     * hasEqualMapping-method will compare two FormaPago instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(FormaPago valueObject) {

        if (valueObject.getID() != this.ID) {
            return (false);
        }
        if (valueObject.getIDTRANSITOSERVICIOBANCO() != this.IDTRANSITOSERVICIOBANCO) {
            return (false);
        }
        if (valueObject.getIDRECIBO() != this.IDRECIBO) {
            return (false);
        }
        if (valueObject.getVALOR() != this.VALOR) {
            return (false);
        }
        if (valueObject.getIDORIGENDESCARGO() != this.IDORIGENDESCARGO) {
            return (false);
        }
        if (valueObject.getIDUSUARIO() != this.IDUSUARIO) {
            return (false);
        }
        if (this.NUMEROCHEQUE == null) {
            if (valueObject.getNUMEROCHEQUE() != null)
                return (false);
        } else if (!this.NUMEROCHEQUE.equals(valueObject.getNUMEROCHEQUE())) {
            return (false);
        }
        if (valueObject.getID_TIPOPAGO() != this.ID_TIPOPAGO) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass FormaPago, mapping to table FORMAPAGO\n");
        out.append("Persistent attributes: \n");
        out.append("ID = " + this.ID + "\n");
        out.append("IDTRANSITOSERVICIOBANCO = " + this.IDTRANSITOSERVICIOBANCO + "\n");
        out.append("IDRECIBO = " + this.IDRECIBO + "\n");
        out.append("VALOR = " + this.VALOR + "\n");
        out.append("IDORIGENDESCARGO = " + this.IDORIGENDESCARGO + "\n");
        out.append("IDUSUARIO = " + this.IDUSUARIO + "\n");
        out.append("NUMEROCHEQUE = " + this.NUMEROCHEQUE + "\n");
        out.append("ID_TIPOPAGO = " + this.ID_TIPOPAGO + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        FormaPago cloned = new FormaPago();

        cloned.setID(this.ID);
        cloned.setIDTRANSITOSERVICIOBANCO(this.IDTRANSITOSERVICIOBANCO);
        cloned.setIDRECIBO(this.IDRECIBO);
        cloned.setVALOR(this.VALOR);
        cloned.setIDORIGENDESCARGO(this.IDORIGENDESCARGO);
        cloned.setIDUSUARIO(this.IDUSUARIO);
        if (this.NUMEROCHEQUE != null)
            cloned.setNUMEROCHEQUE(new String(this.NUMEROCHEQUE));
        cloned.setID_TIPOPAGO(this.ID_TIPOPAGO);
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
