package modelo.datos.objetos.comparendos.generales;

import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * TestigoComp Value Object.
  * This class is value object representing database table TESTIGOCOMPARENDO
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class TestigoComp implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID_TESTIGO;
    private String ID_DOCTO;
    private String NROIDENTIFICACION;
    private String NOMBRES;
    private String APELLIDOS;
    private String DIRECCION;
    private String NROTELEFONO;
    private int ID_COMPARENDO;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public TestigoComp() {

    }

    public TestigoComp(int ID_TESTIGOIn) {

        this.ID_TESTIGO = ID_TESTIGOIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_TESTIGO() {
        return this.ID_TESTIGO;
    }

    public void setID_TESTIGO(int ID_TESTIGOIn) {
        this.ID_TESTIGO = ID_TESTIGOIn;
    }

    public String getID_DOCTO() {
        return this.ID_DOCTO;
    }

    public void setID_DOCTO(String ID_DOCTOIn) {
        this.ID_DOCTO = ID_DOCTOIn;
    }

    public String getNROIDENTIFICACION() {
        return this.NROIDENTIFICACION;
    }

    public void setNROIDENTIFICACION(String NROIDENTIFICACIONIn) {
        this.NROIDENTIFICACION = NROIDENTIFICACIONIn;
    }

    public String getNOMBRES() {
        return this.NOMBRES;
    }

    public void setNOMBRES(String NOMBRESIn) {
        this.NOMBRES = NOMBRESIn;
    }

    public String getAPELLIDOS() {
        return this.APELLIDOS;
    }

    public void setAPELLIDOS(String APELLIDOSIn) {
        this.APELLIDOS = APELLIDOSIn;
    }

    public String getDIRECCION() {
        return this.DIRECCION;
    }

    public void setDIRECCION(String DIRECCIONIn) {
        this.DIRECCION = DIRECCIONIn;
    }

    public String getNROTELEFONO() {
        return this.NROTELEFONO;
    }

    public void setNROTELEFONO(String NROTELEFONOIn) {
        this.NROTELEFONO = NROTELEFONOIn;
    }

    public int getID_COMPARENDO() {
        return this.ID_COMPARENDO;
    }

    public void setID_COMPARENDO(int ID_COMPARENDOIn) {
        this.ID_COMPARENDO = ID_COMPARENDOIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int ID_TESTIGOIn, String ID_DOCTOIn, String NROIDENTIFICACIONIn, String NOMBRESIn,
                       String APELLIDOSIn, String DIRECCIONIn, String NROTELEFONOIn, int ID_COMPARENDOIn) {
        this.ID_TESTIGO = ID_TESTIGOIn;
        this.ID_DOCTO = ID_DOCTOIn;
        this.NROIDENTIFICACION = NROIDENTIFICACIONIn;
        this.NOMBRES = NOMBRESIn;
        this.APELLIDOS = APELLIDOSIn;
        this.DIRECCION = DIRECCIONIn;
        this.NROTELEFONO = NROTELEFONOIn;
        this.ID_COMPARENDO = ID_COMPARENDOIn;
    }


    /**
     * hasEqualMapping-method will compare two TestigoComp instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(TestigoComp valueObject) {

        if (valueObject.getID_TESTIGO() != this.ID_TESTIGO) {
            return (false);
        }
        if (this.ID_DOCTO == null) {
            if (valueObject.getID_DOCTO() != null)
                return (false);
        } else if (!this.ID_DOCTO.equals(valueObject.getID_DOCTO())) {
            return (false);
        }
        if (this.NROIDENTIFICACION == null) {
            if (valueObject.getNROIDENTIFICACION() != null)
                return (false);
        } else if (!this.NROIDENTIFICACION.equals(valueObject.getNROIDENTIFICACION())) {
            return (false);
        }
        if (this.NOMBRES == null) {
            if (valueObject.getNOMBRES() != null)
                return (false);
        } else if (!this.NOMBRES.equals(valueObject.getNOMBRES())) {
            return (false);
        }
        if (this.APELLIDOS == null) {
            if (valueObject.getAPELLIDOS() != null)
                return (false);
        } else if (!this.APELLIDOS.equals(valueObject.getAPELLIDOS())) {
            return (false);
        }
        if (this.DIRECCION == null) {
            if (valueObject.getDIRECCION() != null)
                return (false);
        } else if (!this.DIRECCION.equals(valueObject.getDIRECCION())) {
            return (false);
        }
        if (this.NROTELEFONO == null) {
            if (valueObject.getNROTELEFONO() != null)
                return (false);
        } else if (!this.NROTELEFONO.equals(valueObject.getNROTELEFONO())) {
            return (false);
        }
        if (valueObject.getID_COMPARENDO() != this.ID_COMPARENDO) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass TestigoComp, mapping to table TESTIGOCOMPARENDO\n");
        out.append("Persistent attributes: \n");
        out.append("ID_TESTIGO = " + this.ID_TESTIGO + "\n");
        out.append("ID_DOCTO = " + this.ID_DOCTO + "\n");
        out.append("NROIDENTIFICACION = " + this.NROIDENTIFICACION + "\n");
        out.append("NOMBRES = " + this.NOMBRES + "\n");
        out.append("APELLIDOS = " + this.APELLIDOS + "\n");
        out.append("DIRECCION = " + this.DIRECCION + "\n");
        out.append("NROTELEFONO = " + this.NROTELEFONO + "\n");
        out.append("ID_COMPARENDO = " + this.ID_COMPARENDO + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        TestigoComp cloned = new TestigoComp();

        cloned.setID_TESTIGO(this.ID_TESTIGO);
        if (this.ID_DOCTO != null)
            cloned.setID_DOCTO(new String(this.ID_DOCTO));
        if (this.NROIDENTIFICACION != null)
            cloned.setNROIDENTIFICACION(new String(this.NROIDENTIFICACION));
        if (this.NOMBRES != null)
            cloned.setNOMBRES(new String(this.NOMBRES));
        if (this.APELLIDOS != null)
            cloned.setAPELLIDOS(new String(this.APELLIDOS));
        if (this.DIRECCION != null)
            cloned.setDIRECCION(new String(this.DIRECCION));
        if (this.NROTELEFONO != null)
            cloned.setNROTELEFONO(new String(this.NROTELEFONO));
        cloned.setID_COMPARENDO(this.ID_COMPARENDO);
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
