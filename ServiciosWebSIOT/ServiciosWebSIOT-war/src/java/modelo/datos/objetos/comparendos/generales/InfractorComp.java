package modelo.datos.objetos.comparendos.generales;

import java.io.Serializable;

import java.util.List;


/**
  * InfractorComp Value Object.
  * This class is value object representing database table INFRACTOR
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class InfractorComp implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID_INFRACTOR;
    private String NOMBRES;
    private String APELLIDOS;
    private String DIRECCION;
    private int ID_TRANSITO;
    private String TELEFONO;
    private int ID_CIUDAD;
    private String NROLICCONDUCCION;
    private String CATEGLICENCIA;
    private String FECHAVENCELICCONDUCCION;
    private String NROIDENTIFICACION;
    private int ID_DOCTO;
    private String EDAD;
    private String EMAIL;
    private int ID_SEXO;

    private List listaComparendo;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public InfractorComp() {

    }

    public InfractorComp(int ID_INFRACTORIn) {

        this.ID_INFRACTOR = ID_INFRACTORIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_INFRACTOR() {
        return this.ID_INFRACTOR;
    }

    public void setID_INFRACTOR(int ID_INFRACTORIn) {
        this.ID_INFRACTOR = ID_INFRACTORIn;
    }

    public String getNOMBRES() {
        return this.NOMBRES;
    }

    public void setNOMBRES(String NOMBRESIn) {
        this.NOMBRES = NOMBRESIn;
    }

    public String getAPELLIDOS() {
        return this.APELLIDOS;
    }

    public void setAPELLIDOS(String APELLIDOSIn) {
        this.APELLIDOS = APELLIDOSIn;
    }

    public String getDIRECCION() {
        return this.DIRECCION;
    }

    public void setDIRECCION(String DIRECCIONIn) {
        this.DIRECCION = DIRECCIONIn;
    }

    public int getID_TRANSITO() {
        return this.ID_TRANSITO;
    }

    public void setID_TRANSITO(int ID_TRANSITOIn) {
        this.ID_TRANSITO = ID_TRANSITOIn;
    }

    public String getTELEFONO() {
        return this.TELEFONO;
    }

    public void setTELEFONO(String TELEFONOIn) {
        this.TELEFONO = TELEFONOIn;
    }

    public int getID_CIUDAD() {
        return this.ID_CIUDAD;
    }

    public void setID_CIUDAD(int ID_CIUDADIn) {
        this.ID_CIUDAD = ID_CIUDADIn;
    }

    public String getNROLICCONDUCCION() {
        return this.NROLICCONDUCCION;
    }

    public void setNROLICCONDUCCION(String NROLICCONDUCCIONIn) {
        this.NROLICCONDUCCION = NROLICCONDUCCIONIn;
    }

    public String getCATEGLICENCIA() {
        return this.CATEGLICENCIA;
    }

    public void setCATEGLICENCIA(String CATEGLICENCIAIn) {
        this.CATEGLICENCIA = CATEGLICENCIAIn;
    }

    public String getFECHAVENCELICCONDUCCION() {
        return this.FECHAVENCELICCONDUCCION;
    }

    public void setFECHAVENCELICCONDUCCION(String FECHAVENCELICCONDUCCIONIn) {
        this.FECHAVENCELICCONDUCCION = FECHAVENCELICCONDUCCIONIn;
    }

    public String getNROIDENTIFICACION() {
        return this.NROIDENTIFICACION;
    }

    public void setNROIDENTIFICACION(String NROIDENTIFICACIONIn) {
        this.NROIDENTIFICACION = NROIDENTIFICACIONIn;
    }

    public int getID_DOCTO() {
        return this.ID_DOCTO;
    }

    public void setID_DOCTO(int ID_DOCTOIn) {
        this.ID_DOCTO = ID_DOCTOIn;
    }

    public String getEDAD() {
        return this.EDAD;
    }

    public void setEDAD(String EDADIn) {
        this.EDAD = EDADIn;
    }

    public String getEMAIL() {
        return this.EMAIL;
    }

    public void setEMAIL(String EMAILIn) {
        this.EMAIL = EMAILIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int ID_INFRACTORIn, String NOMBRESIn, String APELLIDOSIn, String DIRECCIONIn, int ID_TRANSITOIn,
                       String TELEFONOIn, int ID_CIUDADIn, String NROLICCONDUCCIONIn, String CATEGLICENCIAIn,
                       String FECHAVENCELICCONDUCCIONIn, String NROIDENTIFICACIONIn, int ID_DOCTOIn, String EDADIn,
                       String EMAILIn, int ID_SEXOIn) {
        this.ID_INFRACTOR = ID_INFRACTORIn;
        this.NOMBRES = NOMBRESIn;
        this.APELLIDOS = APELLIDOSIn;
        this.DIRECCION = DIRECCIONIn;
        this.ID_TRANSITO = ID_TRANSITOIn;
        this.TELEFONO = TELEFONOIn;
        this.ID_CIUDAD = ID_CIUDADIn;
        this.NROLICCONDUCCION = NROLICCONDUCCIONIn;
        this.CATEGLICENCIA = CATEGLICENCIAIn;
        this.FECHAVENCELICCONDUCCION = FECHAVENCELICCONDUCCIONIn;
        this.NROIDENTIFICACION = NROIDENTIFICACIONIn;
        this.ID_DOCTO = ID_DOCTOIn;
        this.EDAD = EDADIn;
        this.EMAIL = EMAILIn;
        this.ID_SEXO = ID_SEXOIn;
    }


    /**
     * hasEqualMapping-method will compare two InfractorComp instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(InfractorComp valueObject) {

        if (valueObject.getID_INFRACTOR() != this.ID_INFRACTOR) {
            return (false);
        }
        if (this.NOMBRES == null) {
            if (valueObject.getNOMBRES() != null)
                return (false);
        } else if (!this.NOMBRES.equals(valueObject.getNOMBRES())) {
            return (false);
        }
        if (this.APELLIDOS == null) {
            if (valueObject.getAPELLIDOS() != null)
                return (false);
        } else if (!this.APELLIDOS.equals(valueObject.getAPELLIDOS())) {
            return (false);
        }
        if (this.DIRECCION == null) {
            if (valueObject.getDIRECCION() != null)
                return (false);
        } else if (!this.DIRECCION.equals(valueObject.getDIRECCION())) {
            return (false);
        }
        if (valueObject.getID_TRANSITO() != this.ID_TRANSITO) {
            return (false);
        }
        if (this.TELEFONO == null) {
            if (valueObject.getTELEFONO() != null)
                return (false);
        } else if (!this.TELEFONO.equals(valueObject.getTELEFONO())) {
            return (false);
        }
        if (valueObject.getID_CIUDAD() != this.ID_CIUDAD) {
            return (false);
        }
        if (this.NROLICCONDUCCION == null) {
            if (valueObject.getNROLICCONDUCCION() != null)
                return (false);
        } else if (!this.NROLICCONDUCCION.equals(valueObject.getNROLICCONDUCCION())) {
            return (false);
        }
        if (this.CATEGLICENCIA == null) {
            if (valueObject.getCATEGLICENCIA() != null)
                return (false);
        } else if (!this.CATEGLICENCIA.equals(valueObject.getCATEGLICENCIA())) {
            return (false);
        }
        if (this.FECHAVENCELICCONDUCCION == null) {
            if (valueObject.getFECHAVENCELICCONDUCCION() != null)
                return (false);
        } else if (!this.FECHAVENCELICCONDUCCION.equals(valueObject.getFECHAVENCELICCONDUCCION())) {
            return (false);
        }
        if (this.NROIDENTIFICACION == null) {
            if (valueObject.getNROIDENTIFICACION() != null)
                return (false);
        } else if (!this.NROIDENTIFICACION.equals(valueObject.getNROIDENTIFICACION())) {
            return (false);
        }
        if (valueObject.getID_DOCTO() != this.ID_DOCTO) {
            return (false);
        }
        if (this.EDAD == null) {
            if (valueObject.getEDAD() != null)
                return (false);
        } else if (!this.EDAD.equals(valueObject.getEDAD())) {
            return (false);
        }
        if (this.EMAIL == null) {
            if (valueObject.getEMAIL() != null)
                return (false);
        } else if (!this.EMAIL.equals(valueObject.getEMAIL())) {
            return (false);
        }

        if (valueObject.getID_SEXO() != this.ID_SEXO) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass InfractorComp, mapping to table INFRACTOR\n");
        out.append("Persistent attributes: \n");
        out.append("ID_INFRACTOR = " + this.ID_INFRACTOR + "\n");
        out.append("NOMBRES = " + this.NOMBRES + "\n");
        out.append("APELLIDOS = " + this.APELLIDOS + "\n");
        out.append("DIRECCION = " + this.DIRECCION + "\n");
        out.append("ID_TRANSITO = " + this.ID_TRANSITO + "\n");
        out.append("TELEFONO = " + this.TELEFONO + "\n");
        out.append("ID_CIUDAD = " + this.ID_CIUDAD + "\n");
        out.append("NROLICCONDUCCION = " + this.NROLICCONDUCCION + "\n");
        out.append("CATEGLICENCIA = " + this.CATEGLICENCIA + "\n");
        out.append("FECHAVENCELICCONDUCCION = " + this.FECHAVENCELICCONDUCCION + "\n");
        out.append("NROIDENTIFICACION = " + this.NROIDENTIFICACION + "\n");
        out.append("ID_DOCTO = " + this.ID_DOCTO + "\n");
        out.append("EDAD = " + this.EDAD + "\n");
        out.append("EMAIL = " + this.EMAIL + "\n");
        out.append("ID_SEXO = " + this.ID_SEXO + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        InfractorComp cloned = new InfractorComp();

        cloned.setID_INFRACTOR(this.ID_INFRACTOR);
        if (this.NOMBRES != null)
            cloned.setNOMBRES(new String(this.NOMBRES));
        if (this.APELLIDOS != null)
            cloned.setAPELLIDOS(new String(this.APELLIDOS));
        if (this.DIRECCION != null)
            cloned.setDIRECCION(new String(this.DIRECCION));
        cloned.setID_TRANSITO(this.ID_TRANSITO);
        if (this.TELEFONO != null)
            cloned.setTELEFONO(new String(this.TELEFONO));
        cloned.setID_CIUDAD(this.ID_CIUDAD);
        if (this.NROLICCONDUCCION != null)
            cloned.setNROLICCONDUCCION(new String(this.NROLICCONDUCCION));
        if (this.CATEGLICENCIA != null)
            cloned.setCATEGLICENCIA(new String(this.CATEGLICENCIA));
        if (this.FECHAVENCELICCONDUCCION != null)
            cloned.setFECHAVENCELICCONDUCCION(new String(this.FECHAVENCELICCONDUCCION));
        if (this.NROIDENTIFICACION != null)
            cloned.setNROIDENTIFICACION(new String(this.NROIDENTIFICACION));
        cloned.setID_DOCTO(this.ID_DOCTO);
        if (this.EDAD != null)
            cloned.setEDAD(new String(this.EDAD));
        if (this.EMAIL != null)
            cloned.setEMAIL(new String(this.EMAIL));
        cloned.setID_SEXO(this.ID_SEXO);
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

    public int getID_SEXO() {
        return ID_SEXO;
    }

    public void setID_SEXO(int ID_SEXO) {
        this.ID_SEXO = ID_SEXO;
    }

    public List getListaComparendo() {
        return listaComparendo;
    }

    public void setListaComparendo(List listaComparendo) {
        this.listaComparendo = listaComparendo;
    }
}
