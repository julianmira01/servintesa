package modelo.datos.objetos.comparendos.documentos.digitales;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

/**
  * ElementoTipoDocumentoComp Value Object.
  * This class is value object representing database table ElementoTipoDocumentoComp
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ElementoTipoDocumentoComp implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_ELEMENTO_TIPODOCUMENTO;
    private int IDELEMENTO;
    private int IDTIPODOCUMENTO;
    private String VALORCAMPOCLAVE;
    private int ID_INDICESECUNDARIO;
    private String VALORINDICESECUNDARIO;
    private String PATHTIPODOCUMENTO;
    private String NOMBRETIPODOCUMENTO;
    private String FECHAREGISTRO;
    private String HORAREGISTRO;
    private int IDUSUARIO;
    private String OBSERVACION;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ElementoTipoDocumentoComp () {

    }

    public ElementoTipoDocumentoComp (int ID_ELEMENTO_TIPODOCUMENTOIn) {

          this.ID_ELEMENTO_TIPODOCUMENTO = ID_ELEMENTO_TIPODOCUMENTOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_ELEMENTO_TIPODOCUMENTO() {
          return this.ID_ELEMENTO_TIPODOCUMENTO;
    }
    public void setID_ELEMENTO_TIPODOCUMENTO(int ID_ELEMENTO_TIPODOCUMENTOIn) {
          this.ID_ELEMENTO_TIPODOCUMENTO = ID_ELEMENTO_TIPODOCUMENTOIn;
    }

    public int getIDELEMENTO() {
          return this.IDELEMENTO;
    }
    public void setIDELEMENTO(int IDELEMENTOIn) {
          this.IDELEMENTO = IDELEMENTOIn;
    }

    public int getIDTIPODOCUMENTO() {
          return this.IDTIPODOCUMENTO;
    }
    public void setIDTIPODOCUMENTO(int IDTIPODOCUMENTOIn) {
          this.IDTIPODOCUMENTO = IDTIPODOCUMENTOIn;
    }

    public String getVALORCAMPOCLAVE() {
          return this.VALORCAMPOCLAVE;
    }
    public void setVALORCAMPOCLAVE(String VALORCAMPOCLAVEIn) {
          this.VALORCAMPOCLAVE = VALORCAMPOCLAVEIn;
    }

    public int getID_INDICESECUNDARIO() {
          return this.ID_INDICESECUNDARIO;
    }
    public void setID_INDICESECUNDARIO(int ID_INDICESECUNDARIOIn) {
          this.ID_INDICESECUNDARIO = ID_INDICESECUNDARIOIn;
    }

    public String getVALORINDICESECUNDARIO() {
          return this.VALORINDICESECUNDARIO;
    }
    public void setVALORINDICESECUNDARIO(String VALORINDICESECUNDARIOIn) {
          this.VALORINDICESECUNDARIO = VALORINDICESECUNDARIOIn;
    }

    public String getPATHTIPODOCUMENTO() {
          return this.PATHTIPODOCUMENTO;
    }
    public void setPATHTIPODOCUMENTO(String PATHTIPODOCUMENTOIn) {
          this.PATHTIPODOCUMENTO = PATHTIPODOCUMENTOIn;
    }

    public String getNOMBRETIPODOCUMENTO() {
          return this.NOMBRETIPODOCUMENTO;
    }
    public void setNOMBRETIPODOCUMENTO(String NOMBRETIPODOCUMENTOIn) {
          this.NOMBRETIPODOCUMENTO = NOMBRETIPODOCUMENTOIn;
    }

    public String getFECHAREGISTRO() {
          return this.FECHAREGISTRO;
    }
    public void setFECHAREGISTRO(String FECHAREGISTROIn) {
          this.FECHAREGISTRO = FECHAREGISTROIn;
    }

    public String getHORAREGISTRO() {
          return this.HORAREGISTRO;
    }
    public void setHORAREGISTRO(String HORAREGISTROIn) {
          this.HORAREGISTRO = HORAREGISTROIn;
    }

    public int getIDUSUARIO() {
          return this.IDUSUARIO;
    }
    public void setIDUSUARIO(int IDUSUARIOIn) {
          this.IDUSUARIO = IDUSUARIOIn;
    }

    public String getOBSERVACION() {
          return this.OBSERVACION;
    }
    public void setOBSERVACION(String OBSERVACIONIn) {
          this.OBSERVACION = OBSERVACIONIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_ELEMENTO_TIPODOCUMENTOIn,
          int IDELEMENTOIn,
          int IDTIPODOCUMENTOIn,
          String VALORCAMPOCLAVEIn,
          int ID_INDICESECUNDARIOIn,
          String VALORINDICESECUNDARIOIn,
          String PATHTIPODOCUMENTOIn,
          String NOMBRETIPODOCUMENTOIn,
          String FECHAREGISTROIn,
          String HORAREGISTROIn,
          int IDUSUARIOIn,
          String OBSERVACIONIn) {
          this.ID_ELEMENTO_TIPODOCUMENTO = ID_ELEMENTO_TIPODOCUMENTOIn;
          this.IDELEMENTO = IDELEMENTOIn;
          this.IDTIPODOCUMENTO = IDTIPODOCUMENTOIn;
          this.VALORCAMPOCLAVE = VALORCAMPOCLAVEIn;
          this.ID_INDICESECUNDARIO = ID_INDICESECUNDARIOIn;
          this.VALORINDICESECUNDARIO = VALORINDICESECUNDARIOIn;
          this.PATHTIPODOCUMENTO = PATHTIPODOCUMENTOIn;
          this.NOMBRETIPODOCUMENTO = NOMBRETIPODOCUMENTOIn;
          this.FECHAREGISTRO = FECHAREGISTROIn;
          this.HORAREGISTRO = HORAREGISTROIn;
          this.IDUSUARIO = IDUSUARIOIn;
          this.OBSERVACION = OBSERVACIONIn;
    }


    /** 
     * hasEqualMapping-method will compare two ElementoTipoDocumentoComp instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ElementoTipoDocumentoComp valueObject) {

          if (valueObject.getID_ELEMENTO_TIPODOCUMENTO() != this.ID_ELEMENTO_TIPODOCUMENTO) {
                    return(false);
          }
          if (valueObject.getIDELEMENTO() != this.IDELEMENTO) {
                    return(false);
          }
          if (valueObject.getIDTIPODOCUMENTO() != this.IDTIPODOCUMENTO) {
                    return(false);
          }
          if (this.VALORCAMPOCLAVE == null) {
                    if (valueObject.getVALORCAMPOCLAVE() != null)
                           return(false);
          } else if (!this.VALORCAMPOCLAVE.equals(valueObject.getVALORCAMPOCLAVE())) {
                    return(false);
          }
          if (valueObject.getID_INDICESECUNDARIO() != this.ID_INDICESECUNDARIO) {
                    return(false);
          }
          if (this.VALORINDICESECUNDARIO == null) {
                    if (valueObject.getVALORINDICESECUNDARIO() != null)
                           return(false);
          } else if (!this.VALORINDICESECUNDARIO.equals(valueObject.getVALORINDICESECUNDARIO())) {
                    return(false);
          }
          if (this.PATHTIPODOCUMENTO == null) {
                    if (valueObject.getPATHTIPODOCUMENTO() != null)
                           return(false);
          } else if (!this.PATHTIPODOCUMENTO.equals(valueObject.getPATHTIPODOCUMENTO())) {
                    return(false);
          }
          if (this.NOMBRETIPODOCUMENTO == null) {
                    if (valueObject.getNOMBRETIPODOCUMENTO() != null)
                           return(false);
          } else if (!this.NOMBRETIPODOCUMENTO.equals(valueObject.getNOMBRETIPODOCUMENTO())) {
                    return(false);
          }
          if (this.FECHAREGISTRO == null) {
                    if (valueObject.getFECHAREGISTRO() != null)
                           return(false);
          } else if (!this.FECHAREGISTRO.equals(valueObject.getFECHAREGISTRO())) {
                    return(false);
          }
          if (this.HORAREGISTRO == null) {
                    if (valueObject.getHORAREGISTRO() != null)
                           return(false);
          } else if (!this.HORAREGISTRO.equals(valueObject.getHORAREGISTRO())) {
                    return(false);
          }
          if (valueObject.getIDUSUARIO() != this.IDUSUARIO) {
                    return(false);
          }
          if (this.OBSERVACION == null) {
                    if (valueObject.getOBSERVACION() != null)
                           return(false);
          } else if (!this.OBSERVACION.equals(valueObject.getOBSERVACION())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ElementoTipoDocumentoComp, mapping to table ElementoTipoDocumentoComp\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_ELEMENTO_TIPODOCUMENTO = " + this.ID_ELEMENTO_TIPODOCUMENTO + "\n"); 
        out.append("IDELEMENTO = " + this.IDELEMENTO + "\n"); 
        out.append("IDTIPODOCUMENTO = " + this.IDTIPODOCUMENTO + "\n"); 
        out.append("VALORCAMPOCLAVE = " + this.VALORCAMPOCLAVE + "\n"); 
        out.append("ID_INDICESECUNDARIO = " + this.ID_INDICESECUNDARIO + "\n"); 
        out.append("VALORINDICESECUNDARIO = " + this.VALORINDICESECUNDARIO + "\n"); 
        out.append("PATHTIPODOCUMENTO = " + this.PATHTIPODOCUMENTO + "\n"); 
        out.append("NOMBRETIPODOCUMENTO = " + this.NOMBRETIPODOCUMENTO + "\n"); 
        out.append("FECHAREGISTRO = " + this.FECHAREGISTRO + "\n"); 
        out.append("HORAREGISTRO = " + this.HORAREGISTRO + "\n"); 
        out.append("IDUSUARIO = " + this.IDUSUARIO + "\n"); 
        out.append("OBSERVACION = " + this.OBSERVACION + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ElementoTipoDocumentoComp cloned = new ElementoTipoDocumentoComp();

        cloned.setID_ELEMENTO_TIPODOCUMENTO(this.ID_ELEMENTO_TIPODOCUMENTO); 
        cloned.setIDELEMENTO(this.IDELEMENTO); 
        cloned.setIDTIPODOCUMENTO(this.IDTIPODOCUMENTO); 
        if (this.VALORCAMPOCLAVE != null)
             cloned.setVALORCAMPOCLAVE(new String(this.VALORCAMPOCLAVE)); 
        cloned.setID_INDICESECUNDARIO(this.ID_INDICESECUNDARIO); 
        if (this.VALORINDICESECUNDARIO != null)
             cloned.setVALORINDICESECUNDARIO(new String(this.VALORINDICESECUNDARIO)); 
        if (this.PATHTIPODOCUMENTO != null)
             cloned.setPATHTIPODOCUMENTO(new String(this.PATHTIPODOCUMENTO)); 
        if (this.NOMBRETIPODOCUMENTO != null)
             cloned.setNOMBRETIPODOCUMENTO(new String(this.NOMBRETIPODOCUMENTO)); 
        if (this.FECHAREGISTRO != null)
             cloned.setFECHAREGISTRO(new String(this.FECHAREGISTRO)); 
        if (this.HORAREGISTRO != null)
             cloned.setHORAREGISTRO(new String(this.HORAREGISTRO)); 
        cloned.setIDUSUARIO(this.IDUSUARIO); 
        if (this.OBSERVACION != null)
             cloned.setOBSERVACION(new String(this.OBSERVACION)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

