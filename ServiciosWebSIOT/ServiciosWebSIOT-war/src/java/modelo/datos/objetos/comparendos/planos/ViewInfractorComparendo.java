package modelo.datos.objetos.comparendos.planos;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * ViewInfractorComparendo Value Object.
  * This class is value object representing database table VIEW_INFRACTOR_COMPARENDO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewInfractorComparendo implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String NROIDENTIFICACION;
    private String IDREPORTECOMPARENDO;
    private String ID_INFRACTOR;
    private String NOMBRES;
    private String APELLIDOS;
    private String DIRECCION;
    private String EDAD;
    private String EMAIL;
    private String TELEFONO;
    private String CODCIUDAD;
    private String ID_DEPTO;
    private String NROLICCONDUCCION;
    private String COD_CATEGORIA;
    private String NIT;
    private String ID_TRANSITO;
    private String FECHAVENCELICCONDUCCION;
    private String CODTIPOINFRACTOR;
    private String NUEVA_CATEGORIA;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewInfractorComparendo () {

    }

    public ViewInfractorComparendo (String NROIDENTIFICACIONIn) {

          this.NROIDENTIFICACION = NROIDENTIFICACIONIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getNROIDENTIFICACION() {
          return this.NROIDENTIFICACION;
    }
    public void setNROIDENTIFICACION(String NROIDENTIFICACIONIn) {
          this.NROIDENTIFICACION = NROIDENTIFICACIONIn;
    }

    public String getIDREPORTECOMPARENDO() {
          return this.IDREPORTECOMPARENDO;
    }
    public void setIDREPORTECOMPARENDO(String IDREPORTECOMPARENDOIn) {
          this.IDREPORTECOMPARENDO = IDREPORTECOMPARENDOIn;
    }

    public String getID_INFRACTOR() {
          return this.ID_INFRACTOR;
    }
    public void setID_INFRACTOR(String ID_INFRACTORIn) {
          this.ID_INFRACTOR = ID_INFRACTORIn;
    }

    public String getNOMBRES() {
          return this.NOMBRES;
    }
    public void setNOMBRES(String NOMBRESIn) {
          this.NOMBRES = NOMBRESIn;
    }

    public String getAPELLIDOS() {
          return this.APELLIDOS;
    }
    public void setAPELLIDOS(String APELLIDOSIn) {
          this.APELLIDOS = APELLIDOSIn;
    }

    public String getDIRECCION() {
          return this.DIRECCION;
    }
    public void setDIRECCION(String DIRECCIONIn) {
          this.DIRECCION = DIRECCIONIn;
    }

    public String getEDAD() {
          return this.EDAD;
    }
    public void setEDAD(String EDADIn) {
          this.EDAD = EDADIn;
    }

    public String getEMAIL() {
          return this.EMAIL;
    }
    public void setEMAIL(String EMAILIn) {
          this.EMAIL = EMAILIn;
    }

    public String getTELEFONO() {
          return this.TELEFONO;
    }
    public void setTELEFONO(String TELEFONOIn) {
          this.TELEFONO = TELEFONOIn;
    }

    public String getCODCIUDAD() {
          return this.CODCIUDAD;
    }
    public void setCODCIUDAD(String CODCIUDADIn) {
          this.CODCIUDAD = CODCIUDADIn;
    }

    public String getID_DEPTO() {
          return this.ID_DEPTO;
    }
    public void setID_DEPTO(String ID_DEPTOIn) {
          this.ID_DEPTO = ID_DEPTOIn;
    }

    public String getNROLICCONDUCCION() {
          return this.NROLICCONDUCCION;
    }
    public void setNROLICCONDUCCION(String NROLICCONDUCCIONIn) {
          this.NROLICCONDUCCION = NROLICCONDUCCIONIn;
    }

    public String getCOD_CATEGORIA() {
          return this.COD_CATEGORIA;
    }
    public void setCOD_CATEGORIA(String COD_CATEGORIAIn) {
          this.COD_CATEGORIA = COD_CATEGORIAIn;
    }

    public String getNIT() {
          return this.NIT;
    }
    public void setNIT(String NITIn) {
          this.NIT = NITIn;
    }

    public String getID_TRANSITO() {
          return this.ID_TRANSITO;
    }
    public void setID_TRANSITO(String ID_TRANSITOIn) {
          this.ID_TRANSITO = ID_TRANSITOIn;
    }

    public String getFECHAVENCELICCONDUCCION() {
          return this.FECHAVENCELICCONDUCCION;
    }
    public void setFECHAVENCELICCONDUCCION(String FECHAVENCELICCONDUCCIONIn) {
          this.FECHAVENCELICCONDUCCION = FECHAVENCELICCONDUCCIONIn;
    }

    public String getCODTIPOINFRACTOR() {
          return this.CODTIPOINFRACTOR;
    }
    public void setCODTIPOINFRACTOR(String CODTIPOINFRACTORIn) {
          this.CODTIPOINFRACTOR = CODTIPOINFRACTORIn;
    }
    public String getNUEVA_CATEGORIA() {
        return NUEVA_CATEGORIA;
    }
    public void setNUEVA_CATEGORIA(String NUEVA_CATEGORIA) {
        this.NUEVA_CATEGORIA = NUEVA_CATEGORIA;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String NROIDENTIFICACIONIn,
          String IDREPORTECOMPARENDOIn,
          String ID_INFRACTORIn,
          String NOMBRESIn,
          String APELLIDOSIn,
          String DIRECCIONIn,
          String EDADIn,
          String EMAILIn,
          String TELEFONOIn,
          String CODCIUDADIn,
          String ID_DEPTOIn,
          String NROLICCONDUCCIONIn,
          String COD_CATEGORIAIn,
          String NITIn,
          String ID_TRANSITOIn,
          String FECHAVENCELICCONDUCCIONIn,
          String CODTIPOINFRACTORIn) {
          this.NROIDENTIFICACION = NROIDENTIFICACIONIn;
          this.IDREPORTECOMPARENDO = IDREPORTECOMPARENDOIn;
          this.ID_INFRACTOR = ID_INFRACTORIn;
          this.NOMBRES = NOMBRESIn;
          this.APELLIDOS = APELLIDOSIn;
          this.DIRECCION = DIRECCIONIn;
          this.EDAD = EDADIn;
          this.EMAIL = EMAILIn;
          this.TELEFONO = TELEFONOIn;
          this.CODCIUDAD = CODCIUDADIn;
          this.ID_DEPTO = ID_DEPTOIn;
          this.NROLICCONDUCCION = NROLICCONDUCCIONIn;
          this.COD_CATEGORIA = COD_CATEGORIAIn;
          this.NIT = NITIn;
          this.ID_TRANSITO = ID_TRANSITOIn;
          this.FECHAVENCELICCONDUCCION = FECHAVENCELICCONDUCCIONIn;
          this.CODTIPOINFRACTOR = CODTIPOINFRACTORIn;
    }


    /** 
     * hasEqualMapping-method will compare two ViewInfractorComparendo instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewInfractorComparendo valueObject) {

          if (this.NROIDENTIFICACION == null) {
                    if (valueObject.getNROIDENTIFICACION() != null)
                           return(false);
          } else if (!this.NROIDENTIFICACION.equals(valueObject.getNROIDENTIFICACION())) {
                    return(false);
          }
          if (this.IDREPORTECOMPARENDO == null) {
                    if (valueObject.getIDREPORTECOMPARENDO() != null)
                           return(false);
          } else if (!this.IDREPORTECOMPARENDO.equals(valueObject.getIDREPORTECOMPARENDO())) {
                    return(false);
          }
          if (this.ID_INFRACTOR == null) {
                    if (valueObject.getID_INFRACTOR() != null)
                           return(false);
          } else if (!this.ID_INFRACTOR.equals(valueObject.getID_INFRACTOR())) {
                    return(false);
          }
          if (this.NOMBRES == null) {
                    if (valueObject.getNOMBRES() != null)
                           return(false);
          } else if (!this.NOMBRES.equals(valueObject.getNOMBRES())) {
                    return(false);
          }
          if (this.APELLIDOS == null) {
                    if (valueObject.getAPELLIDOS() != null)
                           return(false);
          } else if (!this.APELLIDOS.equals(valueObject.getAPELLIDOS())) {
                    return(false);
          }
          if (this.DIRECCION == null) {
                    if (valueObject.getDIRECCION() != null)
                           return(false);
          } else if (!this.DIRECCION.equals(valueObject.getDIRECCION())) {
                    return(false);
          }
          if (this.EDAD == null) {
                    if (valueObject.getEDAD() != null)
                           return(false);
          } else if (!this.EDAD.equals(valueObject.getEDAD())) {
                    return(false);
          }
          if (this.EMAIL == null) {
                    if (valueObject.getEMAIL() != null)
                           return(false);
          } else if (!this.EMAIL.equals(valueObject.getEMAIL())) {
                    return(false);
          }
          if (this.TELEFONO == null) {
                    if (valueObject.getTELEFONO() != null)
                           return(false);
          } else if (!this.TELEFONO.equals(valueObject.getTELEFONO())) {
                    return(false);
          }
          if (this.CODCIUDAD == null) {
                    if (valueObject.getCODCIUDAD() != null)
                           return(false);
          } else if (!this.CODCIUDAD.equals(valueObject.getCODCIUDAD())) {
                    return(false);
          }
          if (this.ID_DEPTO == null) {
                    if (valueObject.getID_DEPTO() != null)
                           return(false);
          } else if (!this.ID_DEPTO.equals(valueObject.getID_DEPTO())) {
                    return(false);
          }
          if (this.NROLICCONDUCCION == null) {
                    if (valueObject.getNROLICCONDUCCION() != null)
                           return(false);
          } else if (!this.NROLICCONDUCCION.equals(valueObject.getNROLICCONDUCCION())) {
                    return(false);
          }
          if (this.COD_CATEGORIA == null) {
                    if (valueObject.getCOD_CATEGORIA() != null)
                           return(false);
          } else if (!this.COD_CATEGORIA.equals(valueObject.getCOD_CATEGORIA())) {
                    return(false);
          }
          if (this.NIT == null) {
                    if (valueObject.getNIT() != null)
                           return(false);
          } else if (!this.NIT.equals(valueObject.getNIT())) {
                    return(false);
          }
          if (this.ID_TRANSITO == null) {
                    if (valueObject.getID_TRANSITO() != null)
                           return(false);
          } else if (!this.ID_TRANSITO.equals(valueObject.getID_TRANSITO())) {
                    return(false);
          }
          if (this.FECHAVENCELICCONDUCCION == null) {
                    if (valueObject.getFECHAVENCELICCONDUCCION() != null)
                           return(false);
          } else if (!this.FECHAVENCELICCONDUCCION.equals(valueObject.getFECHAVENCELICCONDUCCION())) {
                    return(false);
          }
          if (this.CODTIPOINFRACTOR == null) {
                    if (valueObject.getCODTIPOINFRACTOR() != null)
                           return(false);
          } else if (!this.CODTIPOINFRACTOR.equals(valueObject.getCODTIPOINFRACTOR())) {
                    return(false);
          }
          if (this.NUEVA_CATEGORIA == null) {
                    if (valueObject.getNUEVA_CATEGORIA() != null)
                           return(false);
          } else if (!this.CODTIPOINFRACTOR.equals(valueObject.getNUEVA_CATEGORIA())) {
                  return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewInfractorComparendo, mapping to table VIEW_INFRACTOR_COMPARENDO\n");
        out.append("Persistent attributes: \n"); 
        out.append("NROIDENTIFICACION = " + this.NROIDENTIFICACION + "\n"); 
        out.append("IDREPORTECOMPARENDO = " + this.IDREPORTECOMPARENDO + "\n"); 
        out.append("ID_INFRACTOR = " + this.ID_INFRACTOR + "\n"); 
        out.append("NOMBRES = " + this.NOMBRES + "\n"); 
        out.append("APELLIDOS = " + this.APELLIDOS + "\n"); 
        out.append("DIRECCION = " + this.DIRECCION + "\n"); 
        out.append("EDAD = " + this.EDAD + "\n"); 
        out.append("EMAIL = " + this.EMAIL + "\n"); 
        out.append("TELEFONO = " + this.TELEFONO + "\n"); 
        out.append("CODCIUDAD = " + this.CODCIUDAD + "\n"); 
        out.append("ID_DEPTO = " + this.ID_DEPTO + "\n"); 
        out.append("NROLICCONDUCCION = " + this.NROLICCONDUCCION + "\n"); 
        out.append("COD_CATEGORIA = " + this.COD_CATEGORIA + "\n"); 
        out.append("NIT = " + this.NIT + "\n"); 
        out.append("ID_TRANSITO = " + this.ID_TRANSITO + "\n"); 
        out.append("FECHAVENCELICCONDUCCION = " + this.FECHAVENCELICCONDUCCION + "\n"); 
        out.append("CODTIPOINFRACTOR = " + this.CODTIPOINFRACTOR + "\n"); 
        out.append("NUEVA_CATEGORIA = " + this.NUEVA_CATEGORIA + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewInfractorComparendo cloned = new ViewInfractorComparendo();

        if (this.NROIDENTIFICACION != null)
             cloned.setNROIDENTIFICACION(new String(this.NROIDENTIFICACION)); 
        if (this.IDREPORTECOMPARENDO != null)
             cloned.setIDREPORTECOMPARENDO(new String(this.IDREPORTECOMPARENDO)); 
        if (this.ID_INFRACTOR != null)
             cloned.setID_INFRACTOR(new String(this.ID_INFRACTOR)); 
        if (this.NOMBRES != null)
             cloned.setNOMBRES(new String(this.NOMBRES)); 
        if (this.APELLIDOS != null)
             cloned.setAPELLIDOS(new String(this.APELLIDOS)); 
        if (this.DIRECCION != null)
             cloned.setDIRECCION(new String(this.DIRECCION)); 
        if (this.EDAD != null)
             cloned.setEDAD(new String(this.EDAD)); 
        if (this.EMAIL != null)
             cloned.setEMAIL(new String(this.EMAIL)); 
        if (this.TELEFONO != null)
             cloned.setTELEFONO(new String(this.TELEFONO)); 
        if (this.CODCIUDAD != null)
             cloned.setCODCIUDAD(new String(this.CODCIUDAD)); 
        if (this.ID_DEPTO != null)
             cloned.setID_DEPTO(new String(this.ID_DEPTO)); 
        if (this.NROLICCONDUCCION != null)
             cloned.setNROLICCONDUCCION(new String(this.NROLICCONDUCCION)); 
        if (this.COD_CATEGORIA != null)
             cloned.setCOD_CATEGORIA(new String(this.COD_CATEGORIA)); 
        if (this.NIT != null)
             cloned.setNIT(new String(this.NIT)); 
        if (this.ID_TRANSITO != null)
             cloned.setID_TRANSITO(new String(this.ID_TRANSITO)); 
        if (this.FECHAVENCELICCONDUCCION != null)
             cloned.setFECHAVENCELICCONDUCCION(new String(this.FECHAVENCELICCONDUCCION)); 
        if (this.CODTIPOINFRACTOR != null)
             cloned.setCODTIPOINFRACTOR(new String(this.CODTIPOINFRACTOR)); 
        if (this.NUEVA_CATEGORIA != null)
             cloned.setNUEVA_CATEGORIA(new String(this.NUEVA_CATEGORIA)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


}
