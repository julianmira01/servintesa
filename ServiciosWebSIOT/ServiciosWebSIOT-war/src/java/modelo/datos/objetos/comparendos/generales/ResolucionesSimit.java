package modelo.datos.objetos.comparendos.generales;

import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * ResolucionesSimit Value Object.
  * This class is value object representing database table RESOLUCIONESSIMIT
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class ResolucionesSimit implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private String NR;
    private String FR;
    private String NC;
    private String FC;
    private String IDENTIFICACION;
    private String NOMBRE;
    private int IDINFRACCION;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ResolucionesSimit() {

    }

    public ResolucionesSimit(String NRIn) {

        this.NR = NRIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getNR() {
        return this.NR;
    }

    public void setNR(String NRIn) {
        this.NR = NRIn;
    }

    public String getFR() {
        return this.FR;
    }

    public void setFR(String FRIn) {
        this.FR = FRIn;
    }

    public String getNC() {
        return this.NC;
    }

    public void setNC(String NCIn) {
        this.NC = NCIn;
    }

    public String getFC() {
        return this.FC;
    }

    public void setFC(String FCIn) {
        this.FC = FCIn;
    }

    public String getIDENTIFICACION() {
        return this.IDENTIFICACION;
    }

    public void setIDENTIFICACION(String IDENTIFICACIONIn) {
        this.IDENTIFICACION = IDENTIFICACIONIn;
    }

    public String getNOMBRE() {
        return this.NOMBRE;
    }

    public void setNOMBRE(String NOMBREIn) {
        this.NOMBRE = NOMBREIn;
    }

    public int getIDINFRACCION() {
        return this.IDINFRACCION;
    }

    public void setIDINFRACCION(int IDINFRACCIONIn) {
        this.IDINFRACCION = IDINFRACCIONIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(String NRIn, String FRIn, String NCIn, String FCIn, String IDENTIFICACIONIn, String NOMBREIn,
                       int IDINFRACCIONIn) {
        this.NR = NRIn;
        this.FR = FRIn;
        this.NC = NCIn;
        this.FC = FCIn;
        this.IDENTIFICACION = IDENTIFICACIONIn;
        this.NOMBRE = NOMBREIn;
        this.IDINFRACCION = IDINFRACCIONIn;
    }


    /**
     * hasEqualMapping-method will compare two ResolucionesSimit instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ResolucionesSimit valueObject) {

        if (this.NR == null) {
            if (valueObject.getNR() != null)
                return (false);
        } else if (!this.NR.equals(valueObject.getNR())) {
            return (false);
        }
        if (this.FR == null) {
            if (valueObject.getFR() != null)
                return (false);
        } else if (!this.FR.equals(valueObject.getFR())) {
            return (false);
        }
        if (this.NC == null) {
            if (valueObject.getNC() != null)
                return (false);
        } else if (!this.NC.equals(valueObject.getNC())) {
            return (false);
        }
        if (this.FC == null) {
            if (valueObject.getFC() != null)
                return (false);
        } else if (!this.FC.equals(valueObject.getFC())) {
            return (false);
        }
        if (this.IDENTIFICACION == null) {
            if (valueObject.getIDENTIFICACION() != null)
                return (false);
        } else if (!this.IDENTIFICACION.equals(valueObject.getIDENTIFICACION())) {
            return (false);
        }
        if (this.NOMBRE == null) {
            if (valueObject.getNOMBRE() != null)
                return (false);
        } else if (!this.NOMBRE.equals(valueObject.getNOMBRE())) {
            return (false);
        }
        if (valueObject.getIDINFRACCION() != this.IDINFRACCION) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ResolucionesSimit, mapping to table RESOLUCIONESSIMIT\n");
        out.append("Persistent attributes: \n");
        out.append("NR = " + this.NR + "\n");
        out.append("FR = " + this.FR + "\n");
        out.append("NC = " + this.NC + "\n");
        out.append("FC = " + this.FC + "\n");
        out.append("IDENTIFICACION = " + this.IDENTIFICACION + "\n");
        out.append("NOMBRE = " + this.NOMBRE + "\n");
        out.append("IDINFRACCION = " + this.IDINFRACCION + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ResolucionesSimit cloned = new ResolucionesSimit();

        if (this.NR != null)
            cloned.setNR(new String(this.NR));
        if (this.FR != null)
            cloned.setFR(new String(this.FR));
        if (this.NC != null)
            cloned.setNC(new String(this.NC));
        if (this.FC != null)
            cloned.setFC(new String(this.FC));
        if (this.IDENTIFICACION != null)
            cloned.setIDENTIFICACION(new String(this.IDENTIFICACION));
        if (this.NOMBRE != null)
            cloned.setNOMBRE(new String(this.NOMBRE));
        cloned.setIDINFRACCION(this.IDINFRACCION);
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
