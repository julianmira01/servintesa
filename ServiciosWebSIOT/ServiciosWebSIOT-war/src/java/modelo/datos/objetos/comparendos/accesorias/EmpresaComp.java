package modelo.datos.objetos.comparendos.accesorias;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * EmpresaComp Value Object.
  * This class is value object representing database table EMPRESA
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class EmpresaComp implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_EMPRESA;
    private String NIT;
    private String RAZONSOCIAL;
    private String SIGLA;
    private String LOGO;
    private int DIG_VERIF;
    private int ID_CLASEEMPRESA;
    private String FECHACONST;
    private String ID_DOCTO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public EmpresaComp () {

    }

    public EmpresaComp (int ID_EMPRESAIn) {

          this.ID_EMPRESA = ID_EMPRESAIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_EMPRESA() {
          return this.ID_EMPRESA;
    }
    public void setID_EMPRESA(int ID_EMPRESAIn) {
          this.ID_EMPRESA = ID_EMPRESAIn;
    }

    public String getNIT() {
          return this.NIT;
    }
    public void setNIT(String NITIn) {
          this.NIT = NITIn;
    }

    public String getRAZONSOCIAL() {
          return this.RAZONSOCIAL;
    }
    public void setRAZONSOCIAL(String RAZONSOCIALIn) {
          this.RAZONSOCIAL = RAZONSOCIALIn;
    }

    public String getSIGLA() {
          return this.SIGLA;
    }
    public void setSIGLA(String SIGLAIn) {
          this.SIGLA = SIGLAIn;
    }

    public String getLOGO() {
          return this.LOGO;
    }
    public void setLOGO(String LOGOIn) {
          this.LOGO = LOGOIn;
    }

    public int getDIG_VERIF() {
          return this.DIG_VERIF;
    }
    public void setDIG_VERIF(int DIG_VERIFIn) {
          this.DIG_VERIF = DIG_VERIFIn;
    }

    public int getID_CLASEEMPRESA() {
          return this.ID_CLASEEMPRESA;
    }
    public void setID_CLASEEMPRESA(int ID_CLASEEMPRESAIn) {
          this.ID_CLASEEMPRESA = ID_CLASEEMPRESAIn;
    }

    public String getFECHACONST() {
          return this.FECHACONST;
    }
    public void setFECHACONST(String FECHACONSTIn) {
          this.FECHACONST = FECHACONSTIn;
    }

    public String getID_DOCTO() {
          return this.ID_DOCTO;
    }
    public void setID_DOCTO(String ID_DOCTOIn) {
          this.ID_DOCTO = ID_DOCTOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_EMPRESAIn,
          String NITIn,
          String RAZONSOCIALIn,
          String SIGLAIn,
          String LOGOIn,
          int DIG_VERIFIn,
          int ID_CLASEEMPRESAIn,
          String FECHACONSTIn,
          String ID_DOCTOIn) {
          this.ID_EMPRESA = ID_EMPRESAIn;
          this.NIT = NITIn;
          this.RAZONSOCIAL = RAZONSOCIALIn;
          this.SIGLA = SIGLAIn;
          this.LOGO = LOGOIn;
          this.DIG_VERIF = DIG_VERIFIn;
          this.ID_CLASEEMPRESA = ID_CLASEEMPRESAIn;
          this.FECHACONST = FECHACONSTIn;
          this.ID_DOCTO = ID_DOCTOIn;
    }


    /** 
     * hasEqualMapping-method will compare two EmpresaComp instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(EmpresaComp valueObject) {

          if (valueObject.getID_EMPRESA() != this.ID_EMPRESA) {
                    return(false);
          }
          if (this.NIT == null) {
                    if (valueObject.getNIT() != null)
                           return(false);
          } else if (!this.NIT.equals(valueObject.getNIT())) {
                    return(false);
          }
          if (this.RAZONSOCIAL == null) {
                    if (valueObject.getRAZONSOCIAL() != null)
                           return(false);
          } else if (!this.RAZONSOCIAL.equals(valueObject.getRAZONSOCIAL())) {
                    return(false);
          }
          if (this.SIGLA == null) {
                    if (valueObject.getSIGLA() != null)
                           return(false);
          } else if (!this.SIGLA.equals(valueObject.getSIGLA())) {
                    return(false);
          }
          if (this.LOGO == null) {
                    if (valueObject.getLOGO() != null)
                           return(false);
          } else if (!this.LOGO.equals(valueObject.getLOGO())) {
                    return(false);
          }
          if (valueObject.getDIG_VERIF() != this.DIG_VERIF) {
                    return(false);
          }
          if (valueObject.getID_CLASEEMPRESA() != this.ID_CLASEEMPRESA) {
                    return(false);
          }
          if (this.FECHACONST == null) {
                    if (valueObject.getFECHACONST() != null)
                           return(false);
          } else if (!this.FECHACONST.equals(valueObject.getFECHACONST())) {
                    return(false);
          }
          if (this.ID_DOCTO == null) {
                    if (valueObject.getID_DOCTO() != null)
                           return(false);
          } else if (!this.ID_DOCTO.equals(valueObject.getID_DOCTO())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass EmpresaComp, mapping to table EMPRESA\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_EMPRESA = " + this.ID_EMPRESA + "\n"); 
        out.append("NIT = " + this.NIT + "\n"); 
        out.append("RAZONSOCIAL = " + this.RAZONSOCIAL + "\n"); 
        out.append("SIGLA = " + this.SIGLA + "\n"); 
        out.append("LOGO = " + this.LOGO + "\n"); 
        out.append("DIG_VERIF = " + this.DIG_VERIF + "\n"); 
        out.append("ID_CLASEEMPRESA = " + this.ID_CLASEEMPRESA + "\n"); 
        out.append("FECHACONST = " + this.FECHACONST + "\n"); 
        out.append("ID_DOCTO = " + this.ID_DOCTO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        EmpresaComp cloned = new EmpresaComp();

        cloned.setID_EMPRESA(this.ID_EMPRESA); 
        if (this.NIT != null)
             cloned.setNIT(new String(this.NIT)); 
        if (this.RAZONSOCIAL != null)
             cloned.setRAZONSOCIAL(new String(this.RAZONSOCIAL)); 
        if (this.SIGLA != null)
             cloned.setSIGLA(new String(this.SIGLA)); 
        if (this.LOGO != null)
             cloned.setLOGO(new String(this.LOGO)); 
        cloned.setDIG_VERIF(this.DIG_VERIF); 
        cloned.setID_CLASEEMPRESA(this.ID_CLASEEMPRESA); 
        if (this.FECHACONST != null)
             cloned.setFECHACONST(new String(this.FECHACONST)); 
        if (this.ID_DOCTO != null)
             cloned.setID_DOCTO(new String(this.ID_DOCTO)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
