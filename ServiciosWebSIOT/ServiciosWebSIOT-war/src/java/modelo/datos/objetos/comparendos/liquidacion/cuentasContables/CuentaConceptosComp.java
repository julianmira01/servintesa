package modelo.datos.objetos.comparendos.liquidacion.cuentasContables;




import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * CuentaConceptosComp Value Object.
  * This class is value object representing database table CuentaConceptosComp
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class CuentaConceptosComp implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDCUENTA_CONCEPTO;
    private int IDCUENTACONTABLE;
    private int IDTARIFA;
    private int IDCONCEPTO;
    private int VALOR;
    private String DECOMPARENDO;
    private String CONCEPTO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public CuentaConceptosComp () {

    }

    public CuentaConceptosComp (int IDCUENTA_CONCEPTOIn) {

          this.IDCUENTA_CONCEPTO = IDCUENTA_CONCEPTOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDCUENTA_CONCEPTO() {
          return this.IDCUENTA_CONCEPTO;
    }
    public void setIDCUENTA_CONCEPTO(int IDCUENTA_CONCEPTOIn) {
          this.IDCUENTA_CONCEPTO = IDCUENTA_CONCEPTOIn;
    }

    public int getIDCUENTACONTABLE() {
          return this.IDCUENTACONTABLE;
    }
    public void setIDCUENTACONTABLE(int IDCUENTACONTABLEIn) {
          this.IDCUENTACONTABLE = IDCUENTACONTABLEIn;
    }

    public int getIDTARIFA() {
          return this.IDTARIFA;
    }
    public void setIDTARIFA(int IDTARIFAIn) {
          this.IDTARIFA = IDTARIFAIn;
    }

    public int getIDCONCEPTO() {
          return this.IDCONCEPTO;
    }
    public void setIDCONCEPTO(int IDCONCEPTOIn) {
          this.IDCONCEPTO = IDCONCEPTOIn;
    }

    public int getVALOR() {
          return this.VALOR;
    }
    public void setVALOR(int VALORIn) {
          this.VALOR = VALORIn;
    }

    public String getDECOMPARENDO() {
          return this.DECOMPARENDO;
    }
    public void setDECOMPARENDO(String DECOMPARENDOIn) {
          this.DECOMPARENDO = DECOMPARENDOIn;
    }

    public String getCONCEPTO() {
          return this.CONCEPTO;
    }
    public void setCONCEPTO(String CONCEPTOIn) {
          this.CONCEPTO = CONCEPTOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDCUENTA_CONCEPTOIn,
          int IDCUENTACONTABLEIn,
          int IDTARIFAIn,
          int IDCONCEPTOIn,
          int VALORIn,
          String DECOMPARENDOIn,
          String CONCEPTOIn) {
          this.IDCUENTA_CONCEPTO = IDCUENTA_CONCEPTOIn;
          this.IDCUENTACONTABLE = IDCUENTACONTABLEIn;
          this.IDTARIFA = IDTARIFAIn;
          this.IDCONCEPTO = IDCONCEPTOIn;
          this.VALOR = VALORIn;
          this.DECOMPARENDO = DECOMPARENDOIn;
          this.CONCEPTO = CONCEPTOIn;
    }


    /** 
     * hasEqualMapping-method will compare two CuentaConceptosComp instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(CuentaConceptosComp valueObject) {

          if (valueObject.getIDCUENTA_CONCEPTO() != this.IDCUENTA_CONCEPTO) {
                    return(false);
          }
          if (valueObject.getIDCUENTACONTABLE() != this.IDCUENTACONTABLE) {
                    return(false);
          }
          if (valueObject.getIDTARIFA() != this.IDTARIFA) {
                    return(false);
          }
          if (valueObject.getIDCONCEPTO() != this.IDCONCEPTO) {
                    return(false);
          }
          if (valueObject.getVALOR() != this.VALOR) {
                    return(false);
          }
          if (this.DECOMPARENDO == null) {
                    if (valueObject.getDECOMPARENDO() != null)
                           return(false);
          } else if (!this.DECOMPARENDO.equals(valueObject.getDECOMPARENDO())) {
                    return(false);
          }
          if (this.CONCEPTO == null) {
                    if (valueObject.getCONCEPTO() != null)
                           return(false);
          } else if (!this.CONCEPTO.equals(valueObject.getCONCEPTO())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass CuentaConceptosComp, mapping to table CuentaConceptosComp\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDCUENTA_CONCEPTO = " + this.IDCUENTA_CONCEPTO + "\n"); 
        out.append("IDCUENTACONTABLE = " + this.IDCUENTACONTABLE + "\n"); 
        out.append("IDTARIFA = " + this.IDTARIFA + "\n"); 
        out.append("IDCONCEPTO = " + this.IDCONCEPTO + "\n"); 
        out.append("VALOR = " + this.VALOR + "\n"); 
        out.append("DECOMPARENDO = " + this.DECOMPARENDO + "\n"); 
        out.append("CONCEPTO = " + this.CONCEPTO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        CuentaConceptosComp cloned = new CuentaConceptosComp();

        cloned.setIDCUENTA_CONCEPTO(this.IDCUENTA_CONCEPTO); 
        cloned.setIDCUENTACONTABLE(this.IDCUENTACONTABLE); 
        cloned.setIDTARIFA(this.IDTARIFA); 
        cloned.setIDCONCEPTO(this.IDCONCEPTO); 
        cloned.setVALOR(this.VALOR); 
        if (this.DECOMPARENDO != null)
             cloned.setDECOMPARENDO(new String(this.DECOMPARENDO)); 
        if (this.CONCEPTO != null)
             cloned.setCONCEPTO(new String(this.CONCEPTO)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}