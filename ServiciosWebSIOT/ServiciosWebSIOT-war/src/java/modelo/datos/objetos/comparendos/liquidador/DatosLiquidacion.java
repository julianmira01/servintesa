package modelo.datos.objetos.comparendos.liquidador;

import java.io.Serializable;

/**
  * DatosLiquidacion Value Object.
  * This class is value object representing database table DATOSLIQUIDACION
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class DatosLiquidacion implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDITEM;
    private String VALOR;
    private String IDLIQUIDACION;
    private String ID;
    private String IDINFRACCION;
    private String OCURRIO;
    private String VIGENCIA;
    private String L_TARIFASDET;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public DatosLiquidacion () {

    }

    public DatosLiquidacion (int IDITEMIn) {

          this.IDITEM = IDITEMIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDITEM() {
          return this.IDITEM;
    }
    public void setIDITEM(int IDITEMIn) {
          this.IDITEM = IDITEMIn;
    }

    public String getVALOR() {
          return this.VALOR;
    }
    public void setVALOR(String VALORIn) {
          this.VALOR = VALORIn;
    }

    public String getIDLIQUIDACION() {
          return this.IDLIQUIDACION;
    }
    public void setIDLIQUIDACION(String IDLIQUIDACIONIn) {
          this.IDLIQUIDACION = IDLIQUIDACIONIn;
    }

    public String getID() {
          return this.ID;
    }
    public void setID(String IDIn) {
          this.ID = IDIn;
    }

    public String getIDINFRACCION() {
          return this.IDINFRACCION;
    }
    public void setIDINFRACCION(String IDINFRACCIONIn) {
          this.IDINFRACCION = IDINFRACCIONIn;
    }

    public String getOCURRIO() {
          return this.OCURRIO;
    }
    public void setOCURRIO(String OCURRIOIn) {
          this.OCURRIO = OCURRIOIn;
    }

    public String getVIGENCIA() {
          return this.VIGENCIA;
    }
    public void setVIGENCIA(String VIGENCIAIn) {
          this.VIGENCIA = VIGENCIAIn;
    }

    public String getL_TARIFASDET() {
          return this.L_TARIFASDET;
    }
    public void setL_TARIFASDET(String L_TARIFASDETIn) {
          this.L_TARIFASDET = L_TARIFASDETIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDITEMIn,
          String VALORIn,
          String IDLIQUIDACIONIn,
          String IDIn,
          String IDINFRACCIONIn,
          String OCURRIOIn,
          String VIGENCIAIn,
          String L_TARIFASDETIn) {
          this.IDITEM = IDITEMIn;
          this.VALOR = VALORIn;
          this.IDLIQUIDACION = IDLIQUIDACIONIn;
          this.ID = IDIn;
          this.IDINFRACCION = IDINFRACCIONIn;
          this.OCURRIO = OCURRIOIn;
          this.VIGENCIA = VIGENCIAIn;
          this.L_TARIFASDET = L_TARIFASDETIn;
    }


    /** 
     * hasEqualMapping-method will compare two DatosLiquidacion instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(DatosLiquidacion valueObject) {

          if (valueObject.getIDITEM() != this.IDITEM) {
                    return(false);
          }
          if (this.VALOR == null) {
                    if (valueObject.getVALOR() != null)
                           return(false);
          } else if (!this.VALOR.equals(valueObject.getVALOR())) {
                    return(false);
          }
          if (this.IDLIQUIDACION == null) {
                    if (valueObject.getIDLIQUIDACION() != null)
                           return(false);
          } else if (!this.IDLIQUIDACION.equals(valueObject.getIDLIQUIDACION())) {
                    return(false);
          }
          if (this.ID == null) {
                    if (valueObject.getID() != null)
                           return(false);
          } else if (!this.ID.equals(valueObject.getID())) {
                    return(false);
          }
          if (this.IDINFRACCION == null) {
                    if (valueObject.getIDINFRACCION() != null)
                           return(false);
          } else if (!this.IDINFRACCION.equals(valueObject.getIDINFRACCION())) {
                    return(false);
          }
          if (this.OCURRIO == null) {
                    if (valueObject.getOCURRIO() != null)
                           return(false);
          } else if (!this.OCURRIO.equals(valueObject.getOCURRIO())) {
                    return(false);
          }
          if (this.VIGENCIA == null) {
                    if (valueObject.getVIGENCIA() != null)
                           return(false);
          } else if (!this.VIGENCIA.equals(valueObject.getVIGENCIA())) {
                    return(false);
          }
          if (this.L_TARIFASDET == null) {
                    if (valueObject.getL_TARIFASDET() != null)
                           return(false);
          } else if (!this.L_TARIFASDET.equals(valueObject.getL_TARIFASDET())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass DatosLiquidacion, mapping to table DATOSLIQUIDACION\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDITEM = " + this.IDITEM + "\n"); 
        out.append("VALOR = " + this.VALOR + "\n"); 
        out.append("IDLIQUIDACION = " + this.IDLIQUIDACION + "\n"); 
        out.append("ID = " + this.ID + "\n"); 
        out.append("IDINFRACCION = " + this.IDINFRACCION + "\n"); 
        out.append("OCURRIO = " + this.OCURRIO + "\n"); 
        out.append("VIGENCIA = " + this.VIGENCIA + "\n"); 
        out.append("L_TARIFASDET = " + this.L_TARIFASDET + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        DatosLiquidacion cloned = new DatosLiquidacion();

        cloned.setIDITEM(this.IDITEM); 
        if (this.VALOR != null)
             cloned.setVALOR(new String(this.VALOR)); 
        if (this.IDLIQUIDACION != null)
             cloned.setIDLIQUIDACION(new String(this.IDLIQUIDACION)); 
        if (this.ID != null)
             cloned.setID(new String(this.ID)); 
        if (this.IDINFRACCION != null)
             cloned.setIDINFRACCION(new String(this.IDINFRACCION)); 
        if (this.OCURRIO != null)
             cloned.setOCURRIO(new String(this.OCURRIO)); 
        if (this.VIGENCIA != null)
             cloned.setVIGENCIA(new String(this.VIGENCIA)); 
        if (this.L_TARIFASDET != null)
             cloned.setL_TARIFASDET(new String(this.L_TARIFASDET)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}


