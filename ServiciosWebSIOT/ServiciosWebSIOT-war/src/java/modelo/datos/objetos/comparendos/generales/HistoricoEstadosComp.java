package modelo.datos.objetos.comparendos.generales;


import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * HistoricoEstadosCom Value Object.
  * This class is value object representing database table HISTORICOESTADOSCOM
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class HistoricoEstadosComp implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID;
    private int ID_INFRACCIONCOMPARENDO;
    private int ID_ESTADO;
    private String FECHA;
    private int IDUSUARIO;
    private int IDMOTIVO;
    private String DESCRIPCION;
    private String FECHAREGISTRO;
    private String HORAREGISTRO;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public HistoricoEstadosComp() {

    }

    public HistoricoEstadosComp(int IDIn) {

        this.ID = IDIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() {
        return this.ID;
    }

    public void setID(int IDIn) {
        this.ID = IDIn;
    }

    public int getID_INFRACCIONCOMPARENDO() {
        return this.ID_INFRACCIONCOMPARENDO;
    }

    public void setID_INFRACCIONCOMPARENDO(int ID_INFRACCIONCOMPARENDOIn) {
        this.ID_INFRACCIONCOMPARENDO = ID_INFRACCIONCOMPARENDOIn;
    }

    public int getID_ESTADO() {
        return this.ID_ESTADO;
    }

    public void setID_ESTADO(int ID_ESTADOIn) {
        this.ID_ESTADO = ID_ESTADOIn;
    }

    public String getFECHA() {
        return this.FECHA;
    }

    public void setFECHA(String FECHAIn) {
        this.FECHA = FECHAIn;
    }

    public int getIDUSUARIO() {
        return this.IDUSUARIO;
    }

    public void setIDUSUARIO(int IDUSUARIOIn) {
        this.IDUSUARIO = IDUSUARIOIn;
    }

    public int getIDMOTIVO() {
        return this.IDMOTIVO;
    }

    public void setIDMOTIVO(int IDMOTIVOIn) {
        this.IDMOTIVO = IDMOTIVOIn;
    }

    public String getDESCRIPCION() {
        return this.DESCRIPCION;
    }

    public void setDESCRIPCION(String DESCRIPCIONIn) {
        this.DESCRIPCION = DESCRIPCIONIn;
    }

    public String getFECHAREGISTRO() {
        return this.FECHAREGISTRO;
    }

    public void setFECHAREGISTRO(String FECHAREGISTROIn) {
        this.FECHAREGISTRO = FECHAREGISTROIn;
    }

    public String getHORAREGISTRO() {
        return this.HORAREGISTRO;
    }

    public void setHORAREGISTRO(String HORAREGISTROIn) {
        this.HORAREGISTRO = HORAREGISTROIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int IDIn, int ID_INFRACCIONCOMPARENDOIn, int ID_ESTADOIn, String FECHAIn, int IDUSUARIOIn,
                       int IDMOTIVOIn, String DESCRIPCIONIn, String FECHAREGISTROIn, String HORAREGISTROIn) {
        this.ID = IDIn;
        this.ID_INFRACCIONCOMPARENDO = ID_INFRACCIONCOMPARENDOIn;
        this.ID_ESTADO = ID_ESTADOIn;
        this.FECHA = FECHAIn;
        this.IDUSUARIO = IDUSUARIOIn;
        this.IDMOTIVO = IDMOTIVOIn;
        this.DESCRIPCION = DESCRIPCIONIn;
        this.FECHAREGISTRO = FECHAREGISTROIn;
        this.HORAREGISTRO = HORAREGISTROIn;
    }


    /**
     * hasEqualMapping-method will compare two HistoricoEstadosCom instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(HistoricoEstadosComp valueObject) {

        if (valueObject.getID() != this.ID) {
            return (false);
        }
        if (valueObject.getID_INFRACCIONCOMPARENDO() != this.ID_INFRACCIONCOMPARENDO) {
            return (false);
        }
        if (valueObject.getID_ESTADO() != this.ID_ESTADO) {
            return (false);
        }
        if (this.FECHA == null) {
            if (valueObject.getFECHA() != null)
                return (false);
        } else if (!this.FECHA.equals(valueObject.getFECHA())) {
            return (false);
        }
        if (valueObject.getIDUSUARIO() != this.IDUSUARIO) {
            return (false);
        }
        if (valueObject.getIDMOTIVO() != this.IDMOTIVO) {
            return (false);
        }
        if (this.DESCRIPCION == null) {
            if (valueObject.getDESCRIPCION() != null)
                return (false);
        } else if (!this.DESCRIPCION.equals(valueObject.getDESCRIPCION())) {
            return (false);
        }
        if (this.FECHAREGISTRO == null) {
            if (valueObject.getFECHAREGISTRO() != null)
                return (false);
        } else if (!this.FECHAREGISTRO.equals(valueObject.getFECHAREGISTRO())) {
            return (false);
        }
        if (this.HORAREGISTRO == null) {
            if (valueObject.getHORAREGISTRO() != null)
                return (false);
        } else if (!this.HORAREGISTRO.equals(valueObject.getHORAREGISTRO())) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass HistoricoEstadosCom, mapping to table HISTORICOESTADOSCOM\n");
        out.append("Persistent attributes: \n");
        out.append("ID = " + this.ID + "\n");
        out.append("ID_INFRACCIONCOMPARENDO = " + this.ID_INFRACCIONCOMPARENDO + "\n");
        out.append("ID_ESTADO = " + this.ID_ESTADO + "\n");
        out.append("FECHA = " + this.FECHA + "\n");
        out.append("IDUSUARIO = " + this.IDUSUARIO + "\n");
        out.append("IDMOTIVO = " + this.IDMOTIVO + "\n");
        out.append("DESCRIPCION = " + this.DESCRIPCION + "\n");
        out.append("FECHAREGISTRO = " + this.FECHAREGISTRO + "\n");
        out.append("HORAREGISTRO = " + this.HORAREGISTRO + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        HistoricoEstadosComp cloned = new HistoricoEstadosComp();

        cloned.setID(this.ID);
        cloned.setID_INFRACCIONCOMPARENDO(this.ID_INFRACCIONCOMPARENDO);
        cloned.setID_ESTADO(this.ID_ESTADO);
        if (this.FECHA != null)
            cloned.setFECHA(new String(this.FECHA));
        cloned.setIDUSUARIO(this.IDUSUARIO);
        cloned.setIDMOTIVO(this.IDMOTIVO);
        if (this.DESCRIPCION != null)
            cloned.setDESCRIPCION(new String(this.DESCRIPCION));
        if (this.FECHAREGISTRO != null)
            cloned.setFECHAREGISTRO(new String(this.FECHAREGISTRO));
        if (this.HORAREGISTRO != null)
            cloned.setHORAREGISTRO(new String(this.HORAREGISTRO));
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
