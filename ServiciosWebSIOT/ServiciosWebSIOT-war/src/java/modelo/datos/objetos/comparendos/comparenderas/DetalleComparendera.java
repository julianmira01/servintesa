package modelo.datos.objetos.comparendos.comparenderas;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * DetalleComparendera Value Object.
  * This class is value object representing database table DetalleComparendera
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class DetalleComparendera implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDDETCOMPARENDERA;
    private int ID_COMPARENDERA;
    private String PREFIJOCOMPARENDERA;
    private String NROCOMPARENDO;
    private int ID_USUARIOANULA;
    private String ESTADOCOMP;
    private String FECHAANULACION;
    private String HORAANULACION;
    private String MOTIVOANULACION;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public DetalleComparendera () {

    }

    public DetalleComparendera (int IDDETCOMPARENDERAIn) {

          this.IDDETCOMPARENDERA = IDDETCOMPARENDERAIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDDETCOMPARENDERA() {
          return this.IDDETCOMPARENDERA;
    }
    public void setIDDETCOMPARENDERA(int IDDETCOMPARENDERAIn) {
          this.IDDETCOMPARENDERA = IDDETCOMPARENDERAIn;
    }

    public int getID_COMPARENDERA() {
          return this.ID_COMPARENDERA;
    }
    public void setID_COMPARENDERA(int ID_COMPARENDERAIn) {
          this.ID_COMPARENDERA = ID_COMPARENDERAIn;
    }

    public String getPREFIJOCOMPARENDERA() {
          return this.PREFIJOCOMPARENDERA;
    }
    public void setPREFIJOCOMPARENDERA(String PREFIJOCOMPARENDERAIn) {
          this.PREFIJOCOMPARENDERA = PREFIJOCOMPARENDERAIn;
    }

    public String getNROCOMPARENDO() {
          return this.NROCOMPARENDO;
    }
    public void setNROCOMPARENDO(String NROCOMPARENDOIn) {
          this.NROCOMPARENDO = NROCOMPARENDOIn;
    }

    public int getID_USUARIOANULA() {
          return this.ID_USUARIOANULA;
    }
    public void setID_USUARIOANULA(int ID_USUARIOANULAIn) {
          this.ID_USUARIOANULA = ID_USUARIOANULAIn;
    }

    public String getESTADOCOMP() {
          return this.ESTADOCOMP;
    }
    public void setESTADOCOMP(String ESTADOCOMPIn) {
          this.ESTADOCOMP = ESTADOCOMPIn;
    }

    public String getFECHAANULACION() {
          return this.FECHAANULACION;
    }
    public void setFECHAANULACION(String FECHAANULACIONIn) {
          this.FECHAANULACION = FECHAANULACIONIn;
    }

    public String getHORAANULACION() {
          return this.HORAANULACION;
    }
    public void setHORAANULACION(String HORAANULACIONIn) {
          this.HORAANULACION = HORAANULACIONIn;
    }

    public String getMOTIVOANULACION() {
          return this.MOTIVOANULACION;
    }
    public void setMOTIVOANULACION(String MOTIVOANULACIONIn) {
          this.MOTIVOANULACION = MOTIVOANULACIONIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDDETCOMPARENDERAIn,
          int ID_COMPARENDERAIn,
          String PREFIJOCOMPARENDERAIn,
          String NROCOMPARENDOIn,
          int ID_USUARIOANULAIn,
          String ESTADOCOMPIn,
          String FECHAANULACIONIn,
          String HORAANULACIONIn,
          String MOTIVOANULACIONIn) {
          this.IDDETCOMPARENDERA = IDDETCOMPARENDERAIn;
          this.ID_COMPARENDERA = ID_COMPARENDERAIn;
          this.PREFIJOCOMPARENDERA = PREFIJOCOMPARENDERAIn;
          this.NROCOMPARENDO = NROCOMPARENDOIn;
          this.ID_USUARIOANULA = ID_USUARIOANULAIn;
          this.ESTADOCOMP = ESTADOCOMPIn;
          this.FECHAANULACION = FECHAANULACIONIn;
          this.HORAANULACION = HORAANULACIONIn;
          this.MOTIVOANULACION = MOTIVOANULACIONIn;
    }


    /** 
     * hasEqualMapping-method will compare two DetalleComparendera instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(DetalleComparendera valueObject) {

          if (valueObject.getIDDETCOMPARENDERA() != this.IDDETCOMPARENDERA) {
                    return(false);
          }
          if (valueObject.getID_COMPARENDERA() != this.ID_COMPARENDERA) {
                    return(false);
          }
          if (this.PREFIJOCOMPARENDERA == null) {
                    if (valueObject.getPREFIJOCOMPARENDERA() != null)
                           return(false);
          } else if (!this.PREFIJOCOMPARENDERA.equals(valueObject.getPREFIJOCOMPARENDERA())) {
                    return(false);
          }
          if (valueObject.getNROCOMPARENDO() != this.NROCOMPARENDO) {
                    return(false);
          }
          if (valueObject.getID_USUARIOANULA() != this.ID_USUARIOANULA) {
                    return(false);
          }
          if (this.ESTADOCOMP == null) {
                    if (valueObject.getESTADOCOMP() != null)
                           return(false);
          } else if (!this.ESTADOCOMP.equals(valueObject.getESTADOCOMP())) {
                    return(false);
          }
          if (this.FECHAANULACION == null) {
                    if (valueObject.getFECHAANULACION() != null)
                           return(false);
          } else if (!this.FECHAANULACION.equals(valueObject.getFECHAANULACION())) {
                    return(false);
          }
          if (this.HORAANULACION == null) {
                    if (valueObject.getHORAANULACION() != null)
                           return(false);
          } else if (!this.HORAANULACION.equals(valueObject.getHORAANULACION())) {
                    return(false);
          }
          if (this.MOTIVOANULACION == null) {
                    if (valueObject.getMOTIVOANULACION() != null)
                           return(false);
          } else if (!this.MOTIVOANULACION.equals(valueObject.getMOTIVOANULACION())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass DetalleComparendera, mapping to table DetalleComparendera\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDDETCOMPARENDERA = " + this.IDDETCOMPARENDERA + "\n"); 
        out.append("ID_COMPARENDERA = " + this.ID_COMPARENDERA + "\n"); 
        out.append("PREFIJOCOMPARENDERA = " + this.PREFIJOCOMPARENDERA + "\n"); 
        out.append("NROCOMPARENDO = " + this.NROCOMPARENDO + "\n"); 
        out.append("ID_USUARIOANULA = " + this.ID_USUARIOANULA + "\n"); 
        out.append("ESTADOCOMP = " + this.ESTADOCOMP + "\n"); 
        out.append("FECHAANULACION = " + this.FECHAANULACION + "\n"); 
        out.append("HORAANULACION = " + this.HORAANULACION + "\n"); 
        out.append("MOTIVOANULACION = " + this.MOTIVOANULACION + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        DetalleComparendera cloned = new DetalleComparendera();

        cloned.setIDDETCOMPARENDERA(this.IDDETCOMPARENDERA); 
        cloned.setID_COMPARENDERA(this.ID_COMPARENDERA); 
        if (this.PREFIJOCOMPARENDERA != null)
             cloned.setPREFIJOCOMPARENDERA(new String(this.PREFIJOCOMPARENDERA)); 
        if (this.NROCOMPARENDO != null)
             cloned.setNROCOMPARENDO(this.NROCOMPARENDO); 
        cloned.setID_USUARIOANULA(this.ID_USUARIOANULA); 
        if (this.ESTADOCOMP != null)
             cloned.setESTADOCOMP(new String(this.ESTADOCOMP)); 
        if (this.FECHAANULACION != null)
             cloned.setFECHAANULACION(new String(this.FECHAANULACION)); 
        if (this.HORAANULACION != null)
             cloned.setHORAANULACION(new String(this.HORAANULACION)); 
        if (this.MOTIVOANULACION != null)
             cloned.setMOTIVOANULACION(new String(this.MOTIVOANULACION)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
