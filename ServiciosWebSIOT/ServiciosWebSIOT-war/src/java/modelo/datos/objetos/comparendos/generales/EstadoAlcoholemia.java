package modelo.datos.objetos.comparendos.generales;

import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * EstadoAlcoholemia Value Object.
  * This class is value object representing database table ESTADOALCOHOLEMIA
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class EstadoAlcoholemia implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID;
    private double INFERIOR;
    private double SUPERIOR;
    private String GRADO;
    private String SUSPENCIONINFERIOR;
    private String SUSPENCIONSUPERIOR;
    private int TIEMPO;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public EstadoAlcoholemia() {

    }

    public EstadoAlcoholemia(int IDIn) {

        this.ID = IDIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() {
        return this.ID;
    }

    public void setID(int IDIn) {
        this.ID = IDIn;
    }

    public double getINFERIOR() {
        return this.INFERIOR;
    }

    public void setINFERIOR(double INFERIORIn) {
        this.INFERIOR = INFERIORIn;
    }

    public double getSUPERIOR() {
        return this.SUPERIOR;
    }

    public void setSUPERIOR(double SUPERIORIn) {
        this.SUPERIOR = SUPERIORIn;
    }

    public String getGRADO() {
        return this.GRADO;
    }

    public void setGRADO(String GRADOIn) {
        this.GRADO = GRADOIn;
    }

    public String getSUSPENCIONINFERIOR() {
        return this.SUSPENCIONINFERIOR;
    }

    public void setSUSPENCIONINFERIOR(String SUSPENCIONINFERIORIn) {
        this.SUSPENCIONINFERIOR = SUSPENCIONINFERIORIn;
    }

    public String getSUSPENCIONSUPERIOR() {
        return this.SUSPENCIONSUPERIOR;
    }

    public void setSUSPENCIONSUPERIOR(String SUSPENCIONSUPERIORIn) {
        this.SUSPENCIONSUPERIOR = SUSPENCIONSUPERIORIn;
    }

    public int getTIEMPO() {
        return this.TIEMPO;
    }

    public void setTIEMPO(int TIEMPOIn) {
        this.TIEMPO = TIEMPOIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int IDIn, double INFERIORIn, double SUPERIORIn, String GRADOIn, String SUSPENCIONINFERIORIn,
                       String SUSPENCIONSUPERIORIn, int TIEMPOIn) {
        this.ID = IDIn;
        this.INFERIOR = INFERIORIn;
        this.SUPERIOR = SUPERIORIn;
        this.GRADO = GRADOIn;
        this.SUSPENCIONINFERIOR = SUSPENCIONINFERIORIn;
        this.SUSPENCIONSUPERIOR = SUSPENCIONSUPERIORIn;
        this.TIEMPO = TIEMPOIn;
    }


    /**
     * hasEqualMapping-method will compare two EstadoAlcoholemia instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(EstadoAlcoholemia valueObject) {

        if (valueObject.getID() != this.ID) {
            return (false);
        }
        if (valueObject.getINFERIOR() != this.INFERIOR) {
            return (false);
        }
        if (valueObject.getSUPERIOR() != this.SUPERIOR) {
            return (false);
        }
        if (this.GRADO == null) {
            if (valueObject.getGRADO() != null)
                return (false);
        } else if (!this.GRADO.equals(valueObject.getGRADO())) {
            return (false);
        }
        if (this.SUSPENCIONINFERIOR == null) {
            if (valueObject.getSUSPENCIONINFERIOR() != null)
                return (false);
        } else if (!this.SUSPENCIONINFERIOR.equals(valueObject.getSUSPENCIONINFERIOR())) {
            return (false);
        }
        if (this.SUSPENCIONSUPERIOR == null) {
            if (valueObject.getSUSPENCIONSUPERIOR() != null)
                return (false);
        } else if (!this.SUSPENCIONSUPERIOR.equals(valueObject.getSUSPENCIONSUPERIOR())) {
            return (false);
        }
        if (valueObject.getTIEMPO() != this.TIEMPO) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass EstadoAlcoholemia, mapping to table ESTADOALCOHOLEMIA\n");
        out.append("Persistent attributes: \n");
        out.append("ID = " + this.ID + "\n");
        out.append("INFERIOR = " + this.INFERIOR + "\n");
        out.append("SUPERIOR = " + this.SUPERIOR + "\n");
        out.append("GRADO = " + this.GRADO + "\n");
        out.append("SUSPENCIONINFERIOR = " + this.SUSPENCIONINFERIOR + "\n");
        out.append("SUSPENCIONSUPERIOR = " + this.SUSPENCIONSUPERIOR + "\n");
        out.append("TIEMPO = " + this.TIEMPO + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        EstadoAlcoholemia cloned = new EstadoAlcoholemia();

        cloned.setID(this.ID);
        cloned.setINFERIOR(this.INFERIOR);
        cloned.setSUPERIOR(this.SUPERIOR);
        if (this.GRADO != null)
            cloned.setGRADO(new String(this.GRADO));
        if (this.SUSPENCIONINFERIOR != null)
            cloned.setSUSPENCIONINFERIOR(new String(this.SUSPENCIONINFERIOR));
        if (this.SUSPENCIONSUPERIOR != null)
            cloned.setSUSPENCIONSUPERIOR(new String(this.SUSPENCIONSUPERIOR));
        cloned.setTIEMPO(this.TIEMPO);
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
