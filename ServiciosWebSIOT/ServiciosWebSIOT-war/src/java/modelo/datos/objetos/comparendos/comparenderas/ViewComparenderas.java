package modelo.datos.objetos.comparendos.comparenderas;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * ViewComparenderas Value Object.
  * This class is value object representing database table ViewComparenderas
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewComparenderas implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDAGENTE;
    private String ANOMBRES;
    private String BAPELLIDO1;
    private String CAPELLIDO2;
    private int IDCOMPARENDERA;
    private int DESTADOCOMPARENDERA;
    private String ERANGOINICIAL;
    private String FRANGOFINAL;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewComparenderas () {

    }

    public ViewComparenderas (int IDAGENTEIn) {

          this.IDAGENTE = IDAGENTEIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDAGENTE() {
          return this.IDAGENTE;
    }
    public void setIDAGENTE(int IDAGENTEIn) {
          this.IDAGENTE = IDAGENTEIn;
    }

    public String getANOMBRES() {
          return this.ANOMBRES;
    }
    public void setANOMBRES(String ANOMBRESIn) {
          this.ANOMBRES = ANOMBRESIn;
    }

    public String getBAPELLIDO1() {
          return this.BAPELLIDO1;
    }
    public void setBAPELLIDO1(String BAPELLIDO1In) {
          this.BAPELLIDO1 = BAPELLIDO1In;
    }

    public String getCAPELLIDO2() {
          return this.CAPELLIDO2;
    }
    public void setCAPELLIDO2(String CAPELLIDO2In) {
          this.CAPELLIDO2 = CAPELLIDO2In;
    }

    public int getIDCOMPARENDERA() {
          return this.IDCOMPARENDERA;
    }
    public void setIDCOMPARENDERA(int IDCOMPARENDERAIn) {
          this.IDCOMPARENDERA = IDCOMPARENDERAIn;
    }

    public int getDESTADOCOMPARENDERA() {
          return this.DESTADOCOMPARENDERA;
    }
    public void setDESTADOCOMPARENDERA(int DESTADOCOMPARENDERAIn) {
          this.DESTADOCOMPARENDERA = DESTADOCOMPARENDERAIn;
    }

    public String getERANGOINICIAL() {
          return this.ERANGOINICIAL;
    }
    public void setERANGOINICIAL(String ERANGOINICIALIn) {
          this.ERANGOINICIAL = ERANGOINICIALIn;
    }

    public String getFRANGOFINAL() {
          return this.FRANGOFINAL;
    }
    public void setFRANGOFINAL(String FRANGOFINALIn) {
          this.FRANGOFINAL = FRANGOFINALIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDAGENTEIn,
          String ANOMBRESIn,
          String BAPELLIDO1In,
          String CAPELLIDO2In,
          int IDCOMPARENDERAIn,
          int DESTADOCOMPARENDERAIn,
          String ERANGOINICIALIn,
          String FRANGOFINALIn) {
          this.IDAGENTE = IDAGENTEIn;
          this.ANOMBRES = ANOMBRESIn;
          this.BAPELLIDO1 = BAPELLIDO1In;
          this.CAPELLIDO2 = CAPELLIDO2In;
          this.IDCOMPARENDERA = IDCOMPARENDERAIn;
          this.DESTADOCOMPARENDERA = DESTADOCOMPARENDERAIn;
          this.ERANGOINICIAL = ERANGOINICIALIn;
          this.FRANGOFINAL = FRANGOFINALIn;
    }


    /** 
     * hasEqualMapping-method will compare two ViewComparenderas instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewComparenderas valueObject) {

          if (valueObject.getIDAGENTE() != this.IDAGENTE) {
                    return(false);
          }
          if (this.ANOMBRES == null) {
                    if (valueObject.getANOMBRES() != null)
                           return(false);
          } else if (!this.ANOMBRES.equals(valueObject.getANOMBRES())) {
                    return(false);
          }
          if (this.BAPELLIDO1 == null) {
                    if (valueObject.getBAPELLIDO1() != null)
                           return(false);
          } else if (!this.BAPELLIDO1.equals(valueObject.getBAPELLIDO1())) {
                    return(false);
          }
          if (this.CAPELLIDO2 == null) {
                    if (valueObject.getCAPELLIDO2() != null)
                           return(false);
          } else if (!this.CAPELLIDO2.equals(valueObject.getCAPELLIDO2())) {
                    return(false);
          }
          if (valueObject.getIDCOMPARENDERA() != this.IDCOMPARENDERA) {
                    return(false);
          }
          if (valueObject.getDESTADOCOMPARENDERA() != this.DESTADOCOMPARENDERA) {
                    return(false);
          }
          if (this.ERANGOINICIAL == null) {
                    if (valueObject.getERANGOINICIAL() != null)
                           return(false);
          } else if (!this.ERANGOINICIAL.equals(valueObject.getERANGOINICIAL())) {
                    return(false);
          }
          if (this.FRANGOFINAL == null) {
                    if (valueObject.getFRANGOFINAL() != null)
                           return(false);
          } else if (!this.FRANGOFINAL.equals(valueObject.getFRANGOFINAL())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewComparenderas, mapping to table ViewComparenderas\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDAGENTE = " + this.IDAGENTE + "\n"); 
        out.append("ANOMBRES = " + this.ANOMBRES + "\n"); 
        out.append("BAPELLIDO1 = " + this.BAPELLIDO1 + "\n"); 
        out.append("CAPELLIDO2 = " + this.CAPELLIDO2 + "\n"); 
        out.append("IDCOMPARENDERA = " + this.IDCOMPARENDERA + "\n"); 
        out.append("DESTADOCOMPARENDERA = " + this.DESTADOCOMPARENDERA + "\n"); 
        out.append("ERANGOINICIAL = " + this.ERANGOINICIAL + "\n"); 
        out.append("FRANGOFINAL = " + this.FRANGOFINAL + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewComparenderas cloned = new ViewComparenderas();

        cloned.setIDAGENTE(this.IDAGENTE); 
        if (this.ANOMBRES != null)
             cloned.setANOMBRES(new String(this.ANOMBRES)); 
        if (this.BAPELLIDO1 != null)
             cloned.setBAPELLIDO1(new String(this.BAPELLIDO1)); 
        if (this.CAPELLIDO2 != null)
             cloned.setCAPELLIDO2(new String(this.CAPELLIDO2)); 
        cloned.setIDCOMPARENDERA(this.IDCOMPARENDERA); 
        cloned.setDESTADOCOMPARENDERA(this.DESTADOCOMPARENDERA); 
        if (this.ERANGOINICIAL != null)
             cloned.setERANGOINICIAL(new String(this.ERANGOINICIAL)); 
        if (this.FRANGOFINAL != null)
             cloned.setFRANGOFINAL(new String(this.FRANGOFINAL)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
