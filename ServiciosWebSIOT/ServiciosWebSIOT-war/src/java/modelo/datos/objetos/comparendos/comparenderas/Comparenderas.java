package modelo.datos.objetos.comparendos.comparenderas;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Comparenderas Value Object.
  * This class is value object representing database table Comparenderas
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Comparenderas implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID;
    private String FECHAREGISTRO;
    private int IDAGENTE;
    private int IDESTADO;
    private String RANGOINICIAL;
    private String RANGOFINAL;
    private int ID_RANGOCOMPARENDOS;
    private String TIPOCOMPARENDERA;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Comparenderas () {

    }

    public Comparenderas (int IDIn) {

          this.ID = IDIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() {
          return this.ID;
    }
    public void setID(int IDIn) {
          this.ID = IDIn;
    }

    public String getFECHAREGISTRO() {
          return this.FECHAREGISTRO;
    }
    public void setFECHAREGISTRO(String FECHAREGISTROIn) {
          this.FECHAREGISTRO = FECHAREGISTROIn;
    }

    public int getIDAGENTE() {
          return this.IDAGENTE;
    }
    public void setIDAGENTE(int IDAGENTEIn) {
          this.IDAGENTE = IDAGENTEIn;
    }

    public int getIDESTADO() {
          return this.IDESTADO;
    }
    public void setIDESTADO(int IDESTADOIn) {
          this.IDESTADO = IDESTADOIn;
    }

    public String getRANGOINICIAL() {
          return this.RANGOINICIAL;
    }
    public void setRANGOINICIAL(String RANGOINICIALIn) {
          this.RANGOINICIAL = RANGOINICIALIn;
    }

    public String getRANGOFINAL() {
          return this.RANGOFINAL;
    }
    public void setRANGOFINAL(String RANGOFINALIn) {
          this.RANGOFINAL = RANGOFINALIn;
    }

    public int getID_RANGOCOMPARENDOS() {
          return this.ID_RANGOCOMPARENDOS;
    }
    public void setID_RANGOCOMPARENDOS(int ID_RANGOCOMPARENDOSIn) {
          this.ID_RANGOCOMPARENDOS = ID_RANGOCOMPARENDOSIn;
    }

    public String getTIPOCOMPARENDERA() {
          return this.TIPOCOMPARENDERA;
    }
    public void setTIPOCOMPARENDERA(String TIPOCOMPARENDERAIn) {
          this.TIPOCOMPARENDERA = TIPOCOMPARENDERAIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDIn,
          String FECHAREGISTROIn,
          int IDAGENTEIn,
          int IDESTADOIn,
          String RANGOINICIALIn,
          String RANGOFINALIn,
          int ID_RANGOCOMPARENDOSIn,
          String TIPOCOMPARENDERAIn) {
          this.ID = IDIn;
          this.FECHAREGISTRO = FECHAREGISTROIn;
          this.IDAGENTE = IDAGENTEIn;
          this.IDESTADO = IDESTADOIn;
          this.RANGOINICIAL = RANGOINICIALIn;
          this.RANGOFINAL = RANGOFINALIn;
          this.ID_RANGOCOMPARENDOS = ID_RANGOCOMPARENDOSIn;
          this.TIPOCOMPARENDERA = TIPOCOMPARENDERAIn;
    }


    /** 
     * hasEqualMapping-method will compare two Comparenderas instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Comparenderas valueObject) {

          if (valueObject.getID() != this.ID) {
                    return(false);
          }
          if (this.FECHAREGISTRO == null) {
                    if (valueObject.getFECHAREGISTRO() != null)
                           return(false);
          } else if (!this.FECHAREGISTRO.equals(valueObject.getFECHAREGISTRO())) {
                    return(false);
          }
          if (valueObject.getIDAGENTE() != this.IDAGENTE) {
                    return(false);
          }
          if (valueObject.getIDESTADO() != this.IDESTADO) {
                    return(false);
          }
          if (this.RANGOINICIAL == null) {
                    if (valueObject.getRANGOINICIAL() != null)
                           return(false);
          } else if (!this.RANGOINICIAL.equals(valueObject.getRANGOINICIAL())) {
                    return(false);
          }
          if (this.RANGOFINAL == null) {
                    if (valueObject.getRANGOFINAL() != null)
                           return(false);
          } else if (!this.RANGOFINAL.equals(valueObject.getRANGOFINAL())) {
                    return(false);
          }
          if (valueObject.getID_RANGOCOMPARENDOS() != this.ID_RANGOCOMPARENDOS) {
                    return(false);
          }
          if (this.TIPOCOMPARENDERA == null) {
                    if (valueObject.getTIPOCOMPARENDERA() != null)
                           return(false);
          } else if (!this.TIPOCOMPARENDERA.equals(valueObject.getTIPOCOMPARENDERA())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Comparenderas, mapping to table Comparenderas\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID = " + this.ID + "\n"); 
        out.append("FECHAREGISTRO = " + this.FECHAREGISTRO + "\n"); 
        out.append("IDAGENTE = " + this.IDAGENTE + "\n"); 
        out.append("IDESTADO = " + this.IDESTADO + "\n"); 
        out.append("RANGOINICIAL = " + this.RANGOINICIAL + "\n"); 
        out.append("RANGOFINAL = " + this.RANGOFINAL + "\n"); 
        out.append("ID_RANGOCOMPARENDOS = " + this.ID_RANGOCOMPARENDOS + "\n"); 
        out.append("TIPOCOMPARENDERA = " + this.TIPOCOMPARENDERA + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Comparenderas cloned = new Comparenderas();

        cloned.setID(this.ID); 
        if (this.FECHAREGISTRO != null)
             cloned.setFECHAREGISTRO(new String(this.FECHAREGISTRO)); 
        cloned.setIDAGENTE(this.IDAGENTE); 
        cloned.setIDESTADO(this.IDESTADO); 
        if (this.RANGOINICIAL != null)
             cloned.setRANGOINICIAL(new String(this.RANGOINICIAL)); 
        if (this.RANGOFINAL != null)
             cloned.setRANGOFINAL(new String(this.RANGOFINAL)); 
        cloned.setID_RANGOCOMPARENDOS(this.ID_RANGOCOMPARENDOS); 
        if (this.TIPOCOMPARENDERA != null)
             cloned.setTIPOCOMPARENDERA(new String(this.TIPOCOMPARENDERA)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}