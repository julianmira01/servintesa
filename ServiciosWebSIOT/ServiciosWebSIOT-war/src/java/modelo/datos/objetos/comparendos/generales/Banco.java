package modelo.datos.objetos.comparendos.generales;

import java.io.Serializable;

/**
  * Banco Value Object.
  * This class is value object representing database table BANCO
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class Banco implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID_BANCO;
    private String DESCRIPCION;
    private String NIT;
    private String DIGVERIF;
    private String ID_DOCTO;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Banco() {

    }

    public Banco(int ID_BANCOIn) {

        this.ID_BANCO = ID_BANCOIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_BANCO() {
        return this.ID_BANCO;
    }

    public void setID_BANCO(int ID_BANCOIn) {
        this.ID_BANCO = ID_BANCOIn;
    }

    public String getDESCRIPCION() {
        return this.DESCRIPCION;
    }

    public void setDESCRIPCION(String DESCRIPCIONIn) {
        this.DESCRIPCION = DESCRIPCIONIn;
    }

    public String getNIT() {
        return this.NIT;
    }

    public void setNIT(String NITIn) {
        this.NIT = NITIn;
    }

    public String getDIGVERIF() {
        return this.DIGVERIF;
    }

    public void setDIGVERIF(String DIGVERIFIn) {
        this.DIGVERIF = DIGVERIFIn;
    }

    public String getID_DOCTO() {
        return this.ID_DOCTO;
    }

    public void setID_DOCTO(String ID_DOCTOIn) {
        this.ID_DOCTO = ID_DOCTOIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int ID_BANCOIn, String DESCRIPCIONIn, String NITIn, String DIGVERIFIn, String ID_DOCTOIn) {
        this.ID_BANCO = ID_BANCOIn;
        this.DESCRIPCION = DESCRIPCIONIn;
        this.NIT = NITIn;
        this.DIGVERIF = DIGVERIFIn;
        this.ID_DOCTO = ID_DOCTOIn;
    }


    /**
     * hasEqualMapping-method will compare two Banco instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Banco valueObject) {

        if (valueObject.getID_BANCO() != this.ID_BANCO) {
            return (false);
        }
        if (this.DESCRIPCION == null) {
            if (valueObject.getDESCRIPCION() != null)
                return (false);
        } else if (!this.DESCRIPCION.equals(valueObject.getDESCRIPCION())) {
            return (false);
        }
        if (this.NIT == null) {
            if (valueObject.getNIT() != null)
                return (false);
        } else if (!this.NIT.equals(valueObject.getNIT())) {
            return (false);
        }
        if (this.DIGVERIF == null) {
            if (valueObject.getDIGVERIF() != null)
                return (false);
        } else if (!this.DIGVERIF.equals(valueObject.getDIGVERIF())) {
            return (false);
        }
        if (this.ID_DOCTO == null) {
            if (valueObject.getID_DOCTO() != null)
                return (false);
        } else if (!this.ID_DOCTO.equals(valueObject.getID_DOCTO())) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Banco, mapping to table BANCO\n");
        out.append("Persistent attributes: \n");
        out.append("ID_BANCO = " + this.ID_BANCO + "\n");
        out.append("DESCRIPCION = " + this.DESCRIPCION + "\n");
        out.append("NIT = " + this.NIT + "\n");
        out.append("DIGVERIF = " + this.DIGVERIF + "\n");
        out.append("ID_DOCTO = " + this.ID_DOCTO + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Banco cloned = new Banco();

        cloned.setID_BANCO(this.ID_BANCO);
        if (this.DESCRIPCION != null)
            cloned.setDESCRIPCION(new String(this.DESCRIPCION));
        if (this.NIT != null)
            cloned.setNIT(new String(this.NIT));
        if (this.DIGVERIF != null)
            cloned.setDIGVERIF(new String(this.DIGVERIF));
        if (this.ID_DOCTO != null)
            cloned.setID_DOCTO(new String(this.ID_DOCTO));
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
