package modelo.datos.objetos.comparendos.generales;

import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * TipoInfraccionComp Value Object.
  * This class is value object representing database table TIPO_INFRACCION
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class TipoInfraccionComp implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID_TIPO_INFRACCION;
    private String COD_TIPO_INFRACCION;
    private String TIPO_INFRACCION;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public TipoInfraccionComp() {

    }

    public TipoInfraccionComp(int ID_TIPO_INFRACCIONIn) {

        this.ID_TIPO_INFRACCION = ID_TIPO_INFRACCIONIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_TIPO_INFRACCION() {
        return this.ID_TIPO_INFRACCION;
    }

    public void setID_TIPO_INFRACCION(int ID_TIPO_INFRACCIONIn) {
        this.ID_TIPO_INFRACCION = ID_TIPO_INFRACCIONIn;
    }

    public String getCOD_TIPO_INFRACCION() {
        return this.COD_TIPO_INFRACCION;
    }

    public void setCOD_TIPO_INFRACCION(String COD_TIPO_INFRACCIONIn) {
        this.COD_TIPO_INFRACCION = COD_TIPO_INFRACCIONIn;
    }

    public String getTIPO_INFRACCION() {
        return this.TIPO_INFRACCION;
    }

    public void setTIPO_INFRACCION(String TIPO_INFRACCIONIn) {
        this.TIPO_INFRACCION = TIPO_INFRACCIONIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int ID_TIPO_INFRACCIONIn, String COD_TIPO_INFRACCIONIn, String TIPO_INFRACCIONIn) {
        this.ID_TIPO_INFRACCION = ID_TIPO_INFRACCIONIn;
        this.COD_TIPO_INFRACCION = COD_TIPO_INFRACCIONIn;
        this.TIPO_INFRACCION = TIPO_INFRACCIONIn;
    }


    /**
     * hasEqualMapping-method will compare two TipoInfraccionComp instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(TipoInfraccionComp valueObject) {

        if (valueObject.getID_TIPO_INFRACCION() != this.ID_TIPO_INFRACCION) {
            return (false);
        }
        if (this.COD_TIPO_INFRACCION == null) {
            if (valueObject.getCOD_TIPO_INFRACCION() != null)
                return (false);
        } else if (!this.COD_TIPO_INFRACCION.equals(valueObject.getCOD_TIPO_INFRACCION())) {
            return (false);
        }
        if (this.TIPO_INFRACCION == null) {
            if (valueObject.getTIPO_INFRACCION() != null)
                return (false);
        } else if (!this.TIPO_INFRACCION.equals(valueObject.getTIPO_INFRACCION())) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass TipoInfraccionComp, mapping to table TIPO_INFRACCION\n");
        out.append("Persistent attributes: \n");
        out.append("ID_TIPO_INFRACCION = " + this.ID_TIPO_INFRACCION + "\n");
        out.append("COD_TIPO_INFRACCION = " + this.COD_TIPO_INFRACCION + "\n");
        out.append("TIPO_INFRACCION = " + this.TIPO_INFRACCION + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        TipoInfraccionComp cloned = new TipoInfraccionComp();

        cloned.setID_TIPO_INFRACCION(this.ID_TIPO_INFRACCION);
        if (this.COD_TIPO_INFRACCION != null)
            cloned.setCOD_TIPO_INFRACCION(new String(this.COD_TIPO_INFRACCION));
        if (this.TIPO_INFRACCION != null)
            cloned.setTIPO_INFRACCION(new String(this.TIPO_INFRACCION));
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
