package modelo.datos.objetos.comparendos.generales;


import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * ViewComparendosResolSancion Value Object.
  * This class is value object representing database table VIEW_COMPARENDOSRESOLSANCION
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class ViewComparendosResolSancionComp implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID_COMPARENDO;
    private int ID_INFRACTOR;
    private int ID_ESTADO;
    private String NUMEROCOMPARENDO;
    private String FECHACOMPARENDO;
    private String PLACA;
    private int ID;
    private int IDINFRACCION;
    private String DESCRIPCION;
    private String NUEVO_CODIGO;
    private String COD_INFRACCION;
    private String SALARIOS;
    private String ESTADO;
    private int ID_SERVICIO;
    private String VALORINFRACCION;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewComparendosResolSancionComp() {

    }

    public ViewComparendosResolSancionComp(int ID_COMPARENDOIn) {

        this.ID_COMPARENDO = ID_COMPARENDOIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_COMPARENDO() {
        return this.ID_COMPARENDO;
    }

    public void setID_COMPARENDO(int ID_COMPARENDOIn) {
        this.ID_COMPARENDO = ID_COMPARENDOIn;
    }

    public int getID_INFRACTOR() {
        return this.ID_INFRACTOR;
    }

    public void setID_INFRACTOR(int ID_INFRACTORIn) {
        this.ID_INFRACTOR = ID_INFRACTORIn;
    }

    public int getID_ESTADO() {
        return this.ID_ESTADO;
    }

    public void setID_ESTADO(int ID_ESTADOIn) {
        this.ID_ESTADO = ID_ESTADOIn;
    }

    public String getNUMEROCOMPARENDO() {
        return this.NUMEROCOMPARENDO;
    }

    public void setNUMEROCOMPARENDO(String NUMEROCOMPARENDOIn) {
        this.NUMEROCOMPARENDO = NUMEROCOMPARENDOIn;
    }

    public String getFECHACOMPARENDO() {
        return this.FECHACOMPARENDO;
    }

    public void setFECHACOMPARENDO(String FECHACOMPARENDOIn) {
        this.FECHACOMPARENDO = FECHACOMPARENDOIn;
    }

    public String getPLACA() {
        return this.PLACA;
    }

    public void setPLACA(String PLACAIn) {
        this.PLACA = PLACAIn;
    }

    public int getID() {
        return this.ID;
    }

    public void setID(int IDIn) {
        this.ID = IDIn;
    }

    public int getIDINFRACCION() {
        return this.IDINFRACCION;
    }

    public void setIDINFRACCION(int IDINFRACCIONIn) {
        this.IDINFRACCION = IDINFRACCIONIn;
    }

    public String getDESCRIPCION() {
        return this.DESCRIPCION;
    }

    public void setDESCRIPCION(String DESCRIPCIONIn) {
        this.DESCRIPCION = DESCRIPCIONIn;
    }

    public String getNUEVO_CODIGO() {
        return this.NUEVO_CODIGO;
    }

    public void setNUEVO_CODIGO(String NUEVO_CODIGOIn) {
        this.NUEVO_CODIGO = NUEVO_CODIGOIn;
    }

    public String getCOD_INFRACCION() {
        return this.COD_INFRACCION;
    }

    public void setCOD_INFRACCION(String COD_INFRACCIONIn) {
        this.COD_INFRACCION = COD_INFRACCIONIn;
    }
    
    public String getSALARIOS() {
        return this.SALARIOS;
    }

    public void setSALARIOS(String SALARIOSIn) {
        this.SALARIOS = SALARIOSIn;
    }

    public String getESTADO() {
        return this.ESTADO;
    }

    public void setESTADO(String ESTADOIn) {
        this.ESTADO = ESTADOIn;
    }

    public int getID_SERVICIO() {
        return this.ID_SERVICIO;
    }

    public void setID_SERVICIO(int ID_SERVICIOIn) {
        this.ID_SERVICIO = ID_SERVICIOIn;
    }
    
    public String getVALORINFRACCION() {
        return this.VALORINFRACCION;
    }
    
    public void setVALORINFRACCION(String VALORINFRACCIONIn) {
        this.VALORINFRACCION = VALORINFRACCIONIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int ID_COMPARENDOIn, int ID_INFRACTORIn, int ID_ESTADOIn, String NUMEROCOMPARENDOIn,
                       String FECHACOMPARENDOIn, String PLACAIn, int IDIn, int IDINFRACCIONIn, String DESCRIPCIONIn,
                       String NUEVO_CODIGOIn, String COD_INFRACCIONIn,String SALARIOSIn, String ESTADOIn, int ID_SERVICIOIn, String VALORINFRACCIONIn) {
        this.ID_COMPARENDO = ID_COMPARENDOIn;
        this.ID_INFRACTOR = ID_INFRACTORIn;
        this.ID_ESTADO = ID_ESTADOIn;
        this.NUMEROCOMPARENDO = NUMEROCOMPARENDOIn;
        this.FECHACOMPARENDO = FECHACOMPARENDOIn;
        this.PLACA = PLACAIn;
        this.ID = IDIn;
        this.IDINFRACCION = IDINFRACCIONIn;
        this.DESCRIPCION = DESCRIPCIONIn;
        this.NUEVO_CODIGO = NUEVO_CODIGOIn;
        this.COD_INFRACCION = COD_INFRACCIONIn;
        this.SALARIOS = SALARIOSIn;
        this.ESTADO = ESTADOIn;
        this.ID_SERVICIO = ID_SERVICIOIn;
        this.VALORINFRACCION = VALORINFRACCIONIn;
    }


    /**
     * hasEqualMapping-method will compare two ViewComparendosResolSancion instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewComparendosResolSancionComp valueObject) {

        if (valueObject.getID_COMPARENDO() != this.ID_COMPARENDO) {
            return (false);
        }
        if (valueObject.getID_INFRACTOR() != this.ID_INFRACTOR) {
            return (false);
        }
        if (valueObject.getID_ESTADO() != this.ID_ESTADO) {
            return (false);
        }
        if (this.NUMEROCOMPARENDO == null) {
            if (valueObject.getNUMEROCOMPARENDO() != null)
                return (false);
        } else if (!this.NUMEROCOMPARENDO.equals(valueObject.getNUMEROCOMPARENDO())) {
            return (false);
        }
        if (this.FECHACOMPARENDO == null) {
            if (valueObject.getFECHACOMPARENDO() != null)
                return (false);
        } else if (!this.FECHACOMPARENDO.equals(valueObject.getFECHACOMPARENDO())) {
            return (false);
        }
        if (this.PLACA == null) {
            if (valueObject.getPLACA() != null)
                return (false);
        } else if (!this.PLACA.equals(valueObject.getPLACA())) {
            return (false);
        }
        if (valueObject.getID() != this.ID) {
            return (false);
        }
        if (valueObject.getIDINFRACCION() != this.IDINFRACCION) {
            return (false);
        }
        if (this.DESCRIPCION == null) {
            if (valueObject.getDESCRIPCION() != null)
                return (false);
        } else if (!this.DESCRIPCION.equals(valueObject.getDESCRIPCION())) {
            return (false);
        }
        if (this.NUEVO_CODIGO == null) {
            if (valueObject.getNUEVO_CODIGO() != null)
                return (false);
        } else if (!this.NUEVO_CODIGO.equals(valueObject.getNUEVO_CODIGO())) {
            return (false);
        }
        if (this.COD_INFRACCION == null) {
            if (valueObject.getCOD_INFRACCION() != null)
                return (false);
        } else if (!this.COD_INFRACCION.equals(valueObject.getCOD_INFRACCION())) {
            return (false);
        }
        if (this.SALARIOS == null) {
            if (valueObject.getSALARIOS() != null)
                return (false);
        } else if (!this.SALARIOS.equals(valueObject.getSALARIOS())) {
            return (false);
        }
        if (this.ESTADO == null) {
            if (valueObject.getESTADO() != null)
                return (false);
        } else if (!this.ESTADO.equals(valueObject.getESTADO())) {
            return (false);
        }
        if (valueObject.getID_SERVICIO() != this.ID_SERVICIO) {
            return (false);
        }
        if (valueObject.getVALORINFRACCION() != this.VALORINFRACCION) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewComparendosResolSancion, mapping to table VIEW_COMPARENDOSRESOLSANCION\n");
        out.append("Persistent attributes: \n");
        out.append("ID_COMPARENDO = " + this.ID_COMPARENDO + "\n");
        out.append("ID_INFRACTOR = " + this.ID_INFRACTOR + "\n");
        out.append("ID_ESTADO = " + this.ID_ESTADO + "\n");
        out.append("NUMEROCOMPARENDO = " + this.NUMEROCOMPARENDO + "\n");
        out.append("FECHACOMPARENDO = " + this.FECHACOMPARENDO + "\n");
        out.append("PLACA = " + this.PLACA + "\n");
        out.append("ID = " + this.ID + "\n");
        out.append("IDINFRACCION = " + this.IDINFRACCION + "\n");
        out.append("DESCRIPCION = " + this.DESCRIPCION + "\n");
        out.append("NUEVO_CODIGO = " + this.NUEVO_CODIGO + "\n");
        out.append("COD_INFRACCION = " + this.COD_INFRACCION + "\n");
        out.append("SALARIOS = " + this.SALARIOS + "\n");
        out.append("ESTADO = " + this.ESTADO + "\n");
        out.append("ID_SERVICIO = " + this.ID_SERVICIO + "\n");
        out.append("VALORINFRACCION = " + this.VALORINFRACCION + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewComparendosResolSancionComp cloned = new ViewComparendosResolSancionComp();

        cloned.setID_COMPARENDO(this.ID_COMPARENDO);
        cloned.setID_INFRACTOR(this.ID_INFRACTOR);
        cloned.setID_ESTADO(this.ID_ESTADO);
        if (this.NUMEROCOMPARENDO != null)
            cloned.setNUMEROCOMPARENDO(new String(this.NUMEROCOMPARENDO));
        if (this.FECHACOMPARENDO != null)
            cloned.setFECHACOMPARENDO(new String(this.FECHACOMPARENDO));
        if (this.PLACA != null)
            cloned.setPLACA(new String(this.PLACA));
            cloned.setID(this.ID);
            cloned.setIDINFRACCION(this.IDINFRACCION);
        if (this.DESCRIPCION != null)
            cloned.setDESCRIPCION(new String(this.DESCRIPCION));
        if (this.NUEVO_CODIGO != null)
            cloned.setNUEVO_CODIGO(new String(this.NUEVO_CODIGO));
        if (this.COD_INFRACCION != null)
            cloned.setCOD_INFRACCION(new String(this.COD_INFRACCION));
        if (this.SALARIOS != null)
            cloned.setSALARIOS(new String(this.SALARIOS));
        if (this.ESTADO != null)
            cloned.setESTADO(new String(this.ESTADO));
        cloned.setID_SERVICIO(this.ID_SERVICIO);
        if (this.VALORINFRACCION != null)
            cloned.setVALORINFRACCION(new String(this.VALORINFRACCION));
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
