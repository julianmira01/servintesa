package modelo.datos.objetos.comparendos.generales;

import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * LicenciaComp Value Object.
  * This class is value object representing database table LICENCIACOM
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class LicenciaComp implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID;
    private int IDCOMPARENDO;
    private String NROLICENCIACONDUCCION;
    private String CATEGORIA;
    private String FECHAVEN;
    private int IDTRANSITO;


    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public LicenciaComp() {

    }

    public LicenciaComp(int IDIn) {

        this.ID = IDIn;

    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() {
        return this.ID;
    }

    public void setID(int IDIn) {
        this.ID = IDIn;
    }

    public int getIDCOMPARENDO() {
        return this.IDCOMPARENDO;
    }

    public void setIDCOMPARENDO(int IDCOMPARENDOIn) {
        this.IDCOMPARENDO = IDCOMPARENDOIn;
    }

    public String getNROLICENCIACONDUCCION() {
        return this.NROLICENCIACONDUCCION;
    }

    public void setNROLICENCIACONDUCCION(String NROLICENCIACONDUCCIONIn) {
        this.NROLICENCIACONDUCCION = NROLICENCIACONDUCCIONIn;
    }

    public String getCATEGORIA() {
        return this.CATEGORIA;
    }

    public void setCATEGORIA(String CATEGORIAIn) {
        this.CATEGORIA = CATEGORIAIn;
    }

    public String getFECHAVEN() {
        return this.FECHAVEN;
    }

    public void setFECHAVEN(String FECHAVENIn) {
        this.FECHAVEN = FECHAVENIn;
    }

    public int getIDTRANSITO() {
        return this.IDTRANSITO;
    }

    public void setIDTRANSITO(int IDTRANSITOIn) {
        this.IDTRANSITO = IDTRANSITOIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int IDIn, int IDCOMPARENDOIn, String NROLICENCIACONDUCCIONIn, String CATEGORIAIn,
                       String FECHAVENIn, int IDTRANSITOIn) {
        this.ID = IDIn;
        this.IDCOMPARENDO = IDCOMPARENDOIn;
        this.NROLICENCIACONDUCCION = NROLICENCIACONDUCCIONIn;
        this.CATEGORIA = CATEGORIAIn;
        this.FECHAVEN = FECHAVENIn;
        this.IDTRANSITO = IDTRANSITOIn;
    }


    /**
     * hasEqualMapping-method will compare two LicenciaComp instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(LicenciaComp valueObject) {

        if (valueObject.getID() != this.ID) {
            return (false);
        }
        if (valueObject.getIDCOMPARENDO() != this.IDCOMPARENDO) {
            return (false);
        }
        if (this.NROLICENCIACONDUCCION == null) {
            if (valueObject.getNROLICENCIACONDUCCION() != null)
                return (false);
        } else if (!this.NROLICENCIACONDUCCION.equals(valueObject.getNROLICENCIACONDUCCION())) {
            return (false);
        }
        if (this.CATEGORIA == null) {
            if (valueObject.getCATEGORIA() != null)
                return (false);
        } else if (!this.CATEGORIA.equals(valueObject.getCATEGORIA())) {
            return (false);
        }
        if (this.FECHAVEN == null) {
            if (valueObject.getFECHAVEN() != null)
                return (false);
        } else if (!this.FECHAVEN.equals(valueObject.getFECHAVEN())) {
            return (false);
        }
        if (valueObject.getIDTRANSITO() != this.IDTRANSITO) {
            return (false);
        }

        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass LicenciaComp, mapping to table LICENCIACOM\n");
        out.append("Persistent attributes: \n");
        out.append("ID = " + this.ID + "\n");
        out.append("IDCOMPARENDO = " + this.IDCOMPARENDO + "\n");
        out.append("NROLICENCIACONDUCCION = " + this.NROLICENCIACONDUCCION + "\n");
        out.append("CATEGORIA = " + this.CATEGORIA + "\n");
        out.append("FECHAVEN = " + this.FECHAVEN + "\n");
        out.append("IDTRANSITO = " + this.IDTRANSITO + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        LicenciaComp cloned = new LicenciaComp();

        cloned.setID(this.ID);
        cloned.setIDCOMPARENDO(this.IDCOMPARENDO);
        if (this.NROLICENCIACONDUCCION != null)
            cloned.setNROLICENCIACONDUCCION(new String(this.NROLICENCIACONDUCCION));
        if (this.CATEGORIA != null)
            cloned.setCATEGORIA(new String(this.CATEGORIA));
        if (this.FECHAVEN != null)
            cloned.setFECHAVEN(new String(this.FECHAVEN));
        cloned.setIDTRANSITO(this.IDTRANSITO);
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
