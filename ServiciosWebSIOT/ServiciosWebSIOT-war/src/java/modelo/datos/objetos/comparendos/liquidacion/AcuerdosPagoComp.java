package modelo.datos.objetos.comparendos.liquidacion;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * AcuerdosPagoComp Value Object.
  * This class is value object representing database table ACUERDOSPAGO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class AcuerdosPagoComp implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID;
    private String NUMERO;
    private String DESCRIPCION;
    private int IDLIQUIDACION;
    private String CONCEPTO;
    private String FECHA;
    private String FECHAREGISTRO;
    private String HORAREGISTRO;
    private String CODEUDOR;
    private String DOCUMENTOCODEUDOR;
    private String NOTA;
    private String CONTENIDO;
    private String TIENERESOLUCION;
    private int ID_USUARIO;
    private float INTERESFINANCIACION;
    private String NROCOMP;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public AcuerdosPagoComp () {

    }

    public AcuerdosPagoComp (int IDIn) {

          this.ID = IDIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() {
          return this.ID;
    }
    public void setID(int IDIn) {
          this.ID = IDIn;
    }

    public String getNUMERO() {
          return this.NUMERO;
    }
    public void setNUMERO(String NUMEROIn) {
          this.NUMERO = NUMEROIn;
    }

    public String getDESCRIPCION() {
          return this.DESCRIPCION;
    }
    public void setDESCRIPCION(String DESCRIPCIONIn) {
          this.DESCRIPCION = DESCRIPCIONIn;
    }

    public int getIDLIQUIDACION() {
          return this.IDLIQUIDACION;
    }
    public void setIDLIQUIDACION(int IDLIQUIDACIONIn) {
          this.IDLIQUIDACION = IDLIQUIDACIONIn;
    }

    public String getCONCEPTO() {
          return this.CONCEPTO;
    }
    public void setCONCEPTO(String CONCEPTOIn) {
          this.CONCEPTO = CONCEPTOIn;
    }

    public String getFECHA() {
          return this.FECHA;
    }
    public void setFECHA(String FECHAIn) {
          this.FECHA = FECHAIn;
    }

    public String getFECHAREGISTRO() {
          return this.FECHAREGISTRO;
    }
    public void setFECHAREGISTRO(String FECHAREGISTROIn) {
          this.FECHAREGISTRO = FECHAREGISTROIn;
    }

    public String getHORAREGISTRO() {
          return this.HORAREGISTRO;
    }
    public void setHORAREGISTRO(String HORAREGISTROIn) {
          this.HORAREGISTRO = HORAREGISTROIn;
    }

    public String getCODEUDOR() {
          return this.CODEUDOR;
    }
    public void setCODEUDOR(String CODEUDORIn) {
          this.CODEUDOR = CODEUDORIn;
    }

    public String getDOCUMENTOCODEUDOR() {
          return this.DOCUMENTOCODEUDOR;
    }
    public void setDOCUMENTOCODEUDOR(String DOCUMENTOCODEUDORIn) {
          this.DOCUMENTOCODEUDOR = DOCUMENTOCODEUDORIn;
    }

    public String getNOTA() {
          return this.NOTA;
    }
    public void setNOTA(String NOTAIn) {
          this.NOTA = NOTAIn;
    }

    public String getCONTENIDO() {
          return this.CONTENIDO;
    }
    public void setCONTENIDO(String CONTENIDOIn) {
          this.CONTENIDO = CONTENIDOIn;
    }

    public String getTIENERESOLUCION() {
          return this.TIENERESOLUCION;
    }
    public void setTIENERESOLUCION(String TIENERESOLUCIONIn) {
          this.TIENERESOLUCION = TIENERESOLUCIONIn;
    }

    public int getID_USUARIO() {
          return this.ID_USUARIO;
    }
    public void setID_USUARIO(int ID_USUARIOIn) {
          this.ID_USUARIO = ID_USUARIOIn;
    }

    public float getINTERESFINANCIACION() {
          return this.INTERESFINANCIACION;
    }
    public void setINTERESFINANCIACION(float INTERESFINANCIACIONIn) {
          this.INTERESFINANCIACION = INTERESFINANCIACIONIn;
    }

    public String getNROCOMP() {
          return this.NROCOMP;
    }
    public void setNROCOMP(String NROCOMPIn) {
          this.NROCOMP = NROCOMPIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDIn,
          String NUMEROIn,
          String DESCRIPCIONIn,
          int IDLIQUIDACIONIn,
          String CONCEPTOIn,
          String FECHAIn,
          String FECHAREGISTROIn,
          String HORAREGISTROIn,
          String CODEUDORIn,
          String DOCUMENTOCODEUDORIn,
          String NOTAIn,
          String CONTENIDOIn,
          String TIENERESOLUCIONIn,
          int ID_USUARIOIn,
          float INTERESFINANCIACIONIn,
          String NROCOMPIn) {
          this.ID = IDIn;
          this.NUMERO = NUMEROIn;
          this.DESCRIPCION = DESCRIPCIONIn;
          this.IDLIQUIDACION = IDLIQUIDACIONIn;
          this.CONCEPTO = CONCEPTOIn;
          this.FECHA = FECHAIn;
          this.FECHAREGISTRO = FECHAREGISTROIn;
          this.HORAREGISTRO = HORAREGISTROIn;
          this.CODEUDOR = CODEUDORIn;
          this.DOCUMENTOCODEUDOR = DOCUMENTOCODEUDORIn;
          this.NOTA = NOTAIn;
          this.CONTENIDO = CONTENIDOIn;
          this.TIENERESOLUCION = TIENERESOLUCIONIn;
          this.ID_USUARIO = ID_USUARIOIn;
          this.INTERESFINANCIACION = INTERESFINANCIACIONIn;
          this.NROCOMP = NROCOMPIn;
    }


    /** 
     * hasEqualMapping-method will compare two AcuerdosPagoComp instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(AcuerdosPagoComp valueObject) {

          if (valueObject.getID() != this.ID) {
                    return(false);
          }
          if (this.NUMERO == null) {
                    if (valueObject.getNUMERO() != null)
                           return(false);
          } else if (!this.NUMERO.equals(valueObject.getNUMERO())) {
                    return(false);
          }
          if (this.DESCRIPCION == null) {
                    if (valueObject.getDESCRIPCION() != null)
                           return(false);
          } else if (!this.DESCRIPCION.equals(valueObject.getDESCRIPCION())) {
                    return(false);
          }
          if (valueObject.getIDLIQUIDACION() != this.IDLIQUIDACION) {
                    return(false);
          }
          if (this.CONCEPTO == null) {
                    if (valueObject.getCONCEPTO() != null)
                           return(false);
          } else if (!this.CONCEPTO.equals(valueObject.getCONCEPTO())) {
                    return(false);
          }
          if (this.FECHA == null) {
                    if (valueObject.getFECHA() != null)
                           return(false);
          } else if (!this.FECHA.equals(valueObject.getFECHA())) {
                    return(false);
          }
          if (this.FECHAREGISTRO == null) {
                    if (valueObject.getFECHAREGISTRO() != null)
                           return(false);
          } else if (!this.FECHAREGISTRO.equals(valueObject.getFECHAREGISTRO())) {
                    return(false);
          }
          if (this.HORAREGISTRO == null) {
                    if (valueObject.getHORAREGISTRO() != null)
                           return(false);
          } else if (!this.HORAREGISTRO.equals(valueObject.getHORAREGISTRO())) {
                    return(false);
          }
          if (this.CODEUDOR == null) {
                    if (valueObject.getCODEUDOR() != null)
                           return(false);
          } else if (!this.CODEUDOR.equals(valueObject.getCODEUDOR())) {
                    return(false);
          }
          if (this.DOCUMENTOCODEUDOR == null) {
                    if (valueObject.getDOCUMENTOCODEUDOR() != null)
                           return(false);
          } else if (!this.DOCUMENTOCODEUDOR.equals(valueObject.getDOCUMENTOCODEUDOR())) {
                    return(false);
          }
          if (this.NOTA == null) {
                    if (valueObject.getNOTA() != null)
                           return(false);
          } else if (!this.NOTA.equals(valueObject.getNOTA())) {
                    return(false);
          }
          if (this.CONTENIDO == null) {
                    if (valueObject.getCONTENIDO() != null)
                           return(false);
          } else if (!this.CONTENIDO.equals(valueObject.getCONTENIDO())) {
                    return(false);
          }
          if (this.TIENERESOLUCION == null) {
                    if (valueObject.getTIENERESOLUCION() != null)
                           return(false);
          } else if (!this.TIENERESOLUCION.equals(valueObject.getTIENERESOLUCION())) {
                    return(false);
          }
          if (valueObject.getID_USUARIO() != this.ID_USUARIO) {
                    return(false);
          }
          if (valueObject.getINTERESFINANCIACION() != this.INTERESFINANCIACION) {
                    return(false);
          }
          if (this.NROCOMP == null) {
                    if (valueObject.getNROCOMP() != null)
                           return(false);
          } else if (!this.NROCOMP.equals(valueObject.getNROCOMP())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass AcuerdosPagoComp, mapping to table ACUERDOSPAGO\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID = " + this.ID + "\n"); 
        out.append("NUMERO = " + this.NUMERO + "\n"); 
        out.append("DESCRIPCION = " + this.DESCRIPCION + "\n"); 
        out.append("IDLIQUIDACION = " + this.IDLIQUIDACION + "\n"); 
        out.append("CONCEPTO = " + this.CONCEPTO + "\n"); 
        out.append("FECHA = " + this.FECHA + "\n"); 
        out.append("FECHAREGISTRO = " + this.FECHAREGISTRO + "\n"); 
        out.append("HORAREGISTRO = " + this.HORAREGISTRO + "\n"); 
        out.append("CODEUDOR = " + this.CODEUDOR + "\n"); 
        out.append("DOCUMENTOCODEUDOR = " + this.DOCUMENTOCODEUDOR + "\n"); 
        out.append("NOTA = " + this.NOTA + "\n"); 
        out.append("CONTENIDO = " + this.CONTENIDO + "\n"); 
        out.append("TIENERESOLUCION = " + this.TIENERESOLUCION + "\n"); 
        out.append("ID_USUARIO = " + this.ID_USUARIO + "\n"); 
        out.append("INTERESFINANCIACION = " + this.INTERESFINANCIACION + "\n"); 
        out.append("NROCOMP = " + this.NROCOMP + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        AcuerdosPagoComp cloned = new AcuerdosPagoComp();

        cloned.setID(this.ID); 
        if (this.NUMERO != null)
             cloned.setNUMERO(new String(this.NUMERO)); 
        if (this.DESCRIPCION != null)
             cloned.setDESCRIPCION(new String(this.DESCRIPCION)); 
        cloned.setIDLIQUIDACION(this.IDLIQUIDACION); 
        if (this.CONCEPTO != null)
             cloned.setCONCEPTO(new String(this.CONCEPTO)); 
        if (this.FECHA != null)
             cloned.setFECHA(new String(this.FECHA)); 
        if (this.FECHAREGISTRO != null)
             cloned.setFECHAREGISTRO(new String(this.FECHAREGISTRO)); 
        if (this.HORAREGISTRO != null)
             cloned.setHORAREGISTRO(new String(this.HORAREGISTRO)); 
        if (this.CODEUDOR != null)
             cloned.setCODEUDOR(new String(this.CODEUDOR)); 
        if (this.DOCUMENTOCODEUDOR != null)
             cloned.setDOCUMENTOCODEUDOR(new String(this.DOCUMENTOCODEUDOR)); 
        if (this.NOTA != null)
             cloned.setNOTA(new String(this.NOTA)); 
        if (this.CONTENIDO != null)
             cloned.setCONTENIDO(new String(this.CONTENIDO)); 
        if (this.TIENERESOLUCION != null)
             cloned.setTIENERESOLUCION(new String(this.TIENERESOLUCION)); 
        cloned.setID_USUARIO(this.ID_USUARIO); 
        cloned.setINTERESFINANCIACION(this.INTERESFINANCIACION); 
        if (this.NROCOMP != null)
             cloned.setNROCOMP(new String(this.NROCOMP)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
