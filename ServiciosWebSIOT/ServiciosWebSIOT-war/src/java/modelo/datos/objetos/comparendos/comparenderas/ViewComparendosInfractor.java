package modelo.datos.objetos.comparendos.comparenderas;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * ViewComparendosInfractor Value Object.
  * This class is value object representing database table ViewComparendosInfractor
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewComparendosInfractor implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDAGENTE;
    private String NOMBRESAGENTE;
    private String PAPELLIDOAGEN;
    private String SAPELLIDOAGEN;
    private int IDCOMPARENDERA;
    private int ESTADOCOMPARENDERA;
    private String RANGOINICIAL;
    private String RANGOFINAL;
    private int IDCOMPARENDO;
    private String ANUMEROCOMPARENDO;
    private String BFECHACOMPARENDO;
    private String CIDENTIFICACION;
    private String DNOMBRESINFRACTOR;
    private String EAPELLIDINFRACTOR;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewComparendosInfractor () {

    }

    public ViewComparendosInfractor (int IDAGENTEIn) {

          this.IDAGENTE = IDAGENTEIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDAGENTE() {
          return this.IDAGENTE;
    }
    public void setIDAGENTE(int IDAGENTEIn) {
          this.IDAGENTE = IDAGENTEIn;
    }

    public String getNOMBRESAGENTE() {
          return this.NOMBRESAGENTE;
    }
    public void setNOMBRESAGENTE(String NOMBRESAGENTEIn) {
          this.NOMBRESAGENTE = NOMBRESAGENTEIn;
    }

    public String getPAPELLIDOAGEN() {
          return this.PAPELLIDOAGEN;
    }
    public void setPAPELLIDOAGEN(String PAPELLIDOAGENIn) {
          this.PAPELLIDOAGEN = PAPELLIDOAGENIn;
    }

    public String getSAPELLIDOAGEN() {
          return this.SAPELLIDOAGEN;
    }
    public void setSAPELLIDOAGEN(String SAPELLIDOAGENIn) {
          this.SAPELLIDOAGEN = SAPELLIDOAGENIn;
    }

    public int getIDCOMPARENDERA() {
          return this.IDCOMPARENDERA;
    }
    public void setIDCOMPARENDERA(int IDCOMPARENDERAIn) {
          this.IDCOMPARENDERA = IDCOMPARENDERAIn;
    }

    public int getESTADOCOMPARENDERA() {
          return this.ESTADOCOMPARENDERA;
    }
    public void setESTADOCOMPARENDERA(int ESTADOCOMPARENDERAIn) {
          this.ESTADOCOMPARENDERA = ESTADOCOMPARENDERAIn;
    }

    public String getRANGOINICIAL() {
          return this.RANGOINICIAL;
    }
    public void setRANGOINICIAL(String RANGOINICIALIn) {
          this.RANGOINICIAL = RANGOINICIALIn;
    }

    public String getRANGOFINAL() {
          return this.RANGOFINAL;
    }
    public void setRANGOFINAL(String RANGOFINALIn) {
          this.RANGOFINAL = RANGOFINALIn;
    }

    public int getIDCOMPARENDO() {
          return this.IDCOMPARENDO;
    }
    public void setIDCOMPARENDO(int IDCOMPARENDOIn) {
          this.IDCOMPARENDO = IDCOMPARENDOIn;
    }

    public String getANUMEROCOMPARENDO() {
          return this.ANUMEROCOMPARENDO;
    }
    public void setANUMEROCOMPARENDO(String ANUMEROCOMPARENDOIn) {
          this.ANUMEROCOMPARENDO = ANUMEROCOMPARENDOIn;
    }

    public String getBFECHACOMPARENDO() {
          return this.BFECHACOMPARENDO;
    }
    public void setBFECHACOMPARENDO(String BFECHACOMPARENDOIn) {
          this.BFECHACOMPARENDO = BFECHACOMPARENDOIn;
    }

    public String getCIDENTIFICACION() {
          return this.CIDENTIFICACION;
    }
    public void setCIDENTIFICACION(String CIDENTIFICACIONIn) {
          this.CIDENTIFICACION = CIDENTIFICACIONIn;
    }

    public String getDNOMBRESINFRACTOR() {
          return this.DNOMBRESINFRACTOR;
    }
    public void setDNOMBRESINFRACTOR(String DNOMBRESINFRACTORIn) {
          this.DNOMBRESINFRACTOR = DNOMBRESINFRACTORIn;
    }

    public String getEAPELLIDINFRACTOR() {
          return this.EAPELLIDINFRACTOR;
    }
    public void setEAPELLIDINFRACTOR(String EAPELLIDINFRACTORIn) {
          this.EAPELLIDINFRACTOR = EAPELLIDINFRACTORIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDAGENTEIn,
          String NOMBRESAGENTEIn,
          String PAPELLIDOAGENIn,
          String SAPELLIDOAGENIn,
          int IDCOMPARENDERAIn,
          int ESTADOCOMPARENDERAIn,
          String RANGOINICIALIn,
          String RANGOFINALIn,
          int IDCOMPARENDOIn,
          String ANUMEROCOMPARENDOIn,
          String BFECHACOMPARENDOIn,
          String CIDENTIFICACIONIn,
          String DNOMBRESINFRACTORIn,
          String EAPELLIDINFRACTORIn) {
          this.IDAGENTE = IDAGENTEIn;
          this.NOMBRESAGENTE = NOMBRESAGENTEIn;
          this.PAPELLIDOAGEN = PAPELLIDOAGENIn;
          this.SAPELLIDOAGEN = SAPELLIDOAGENIn;
          this.IDCOMPARENDERA = IDCOMPARENDERAIn;
          this.ESTADOCOMPARENDERA = ESTADOCOMPARENDERAIn;
          this.RANGOINICIAL = RANGOINICIALIn;
          this.RANGOFINAL = RANGOFINALIn;
          this.IDCOMPARENDO = IDCOMPARENDOIn;
          this.ANUMEROCOMPARENDO = ANUMEROCOMPARENDOIn;
          this.BFECHACOMPARENDO = BFECHACOMPARENDOIn;
          this.CIDENTIFICACION = CIDENTIFICACIONIn;
          this.DNOMBRESINFRACTOR = DNOMBRESINFRACTORIn;
          this.EAPELLIDINFRACTOR = EAPELLIDINFRACTORIn;
    }


    /** 
     * hasEqualMapping-method will compare two ViewComparendosInfractor instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewComparendosInfractor valueObject) {

          if (valueObject.getIDAGENTE() != this.IDAGENTE) {
                    return(false);
          }
          if (this.NOMBRESAGENTE == null) {
                    if (valueObject.getNOMBRESAGENTE() != null)
                           return(false);
          } else if (!this.NOMBRESAGENTE.equals(valueObject.getNOMBRESAGENTE())) {
                    return(false);
          }
          if (this.PAPELLIDOAGEN == null) {
                    if (valueObject.getPAPELLIDOAGEN() != null)
                           return(false);
          } else if (!this.PAPELLIDOAGEN.equals(valueObject.getPAPELLIDOAGEN())) {
                    return(false);
          }
          if (this.SAPELLIDOAGEN == null) {
                    if (valueObject.getSAPELLIDOAGEN() != null)
                           return(false);
          } else if (!this.SAPELLIDOAGEN.equals(valueObject.getSAPELLIDOAGEN())) {
                    return(false);
          }
          if (valueObject.getIDCOMPARENDERA() != this.IDCOMPARENDERA) {
                    return(false);
          }
          if (valueObject.getESTADOCOMPARENDERA() != this.ESTADOCOMPARENDERA) {
                    return(false);
          }
          if (this.RANGOINICIAL == null) {
                    if (valueObject.getRANGOINICIAL() != null)
                           return(false);
          } else if (!this.RANGOINICIAL.equals(valueObject.getRANGOINICIAL())) {
                    return(false);
          }
          if (this.RANGOFINAL == null) {
                    if (valueObject.getRANGOFINAL() != null)
                           return(false);
          } else if (!this.RANGOFINAL.equals(valueObject.getRANGOFINAL())) {
                    return(false);
          }
          if (valueObject.getIDCOMPARENDO() != this.IDCOMPARENDO) {
                    return(false);
          }
          if (this.ANUMEROCOMPARENDO == null) {
                    if (valueObject.getANUMEROCOMPARENDO() != null)
                           return(false);
          } else if (!this.ANUMEROCOMPARENDO.equals(valueObject.getANUMEROCOMPARENDO())) {
                    return(false);
          }
          if (this.BFECHACOMPARENDO == null) {
                    if (valueObject.getBFECHACOMPARENDO() != null)
                           return(false);
          } else if (!this.BFECHACOMPARENDO.equals(valueObject.getBFECHACOMPARENDO())) {
                    return(false);
          }
          if (this.CIDENTIFICACION == null) {
                    if (valueObject.getCIDENTIFICACION() != null)
                           return(false);
          } else if (!this.CIDENTIFICACION.equals(valueObject.getCIDENTIFICACION())) {
                    return(false);
          }
          if (this.DNOMBRESINFRACTOR == null) {
                    if (valueObject.getDNOMBRESINFRACTOR() != null)
                           return(false);
          } else if (!this.DNOMBRESINFRACTOR.equals(valueObject.getDNOMBRESINFRACTOR())) {
                    return(false);
          }
          if (this.EAPELLIDINFRACTOR == null) {
                    if (valueObject.getEAPELLIDINFRACTOR() != null)
                           return(false);
          } else if (!this.EAPELLIDINFRACTOR.equals(valueObject.getEAPELLIDINFRACTOR())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewComparendosInfractor, mapping to table ViewComparendosInfractor\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDAGENTE = " + this.IDAGENTE + "\n"); 
        out.append("NOMBRESAGENTE = " + this.NOMBRESAGENTE + "\n"); 
        out.append("PAPELLIDOAGEN = " + this.PAPELLIDOAGEN + "\n"); 
        out.append("SAPELLIDOAGEN = " + this.SAPELLIDOAGEN + "\n"); 
        out.append("IDCOMPARENDERA = " + this.IDCOMPARENDERA + "\n"); 
        out.append("ESTADOCOMPARENDERA = " + this.ESTADOCOMPARENDERA + "\n"); 
        out.append("RANGOINICIAL = " + this.RANGOINICIAL + "\n"); 
        out.append("RANGOFINAL = " + this.RANGOFINAL + "\n"); 
        out.append("IDCOMPARENDO = " + this.IDCOMPARENDO + "\n"); 
        out.append("ANUMEROCOMPARENDO = " + this.ANUMEROCOMPARENDO + "\n"); 
        out.append("BFECHACOMPARENDO = " + this.BFECHACOMPARENDO + "\n"); 
        out.append("CIDENTIFICACION = " + this.CIDENTIFICACION + "\n"); 
        out.append("DNOMBRESINFRACTOR = " + this.DNOMBRESINFRACTOR + "\n"); 
        out.append("EAPELLIDINFRACTOR = " + this.EAPELLIDINFRACTOR + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewComparendosInfractor cloned = new ViewComparendosInfractor();

        cloned.setIDAGENTE(this.IDAGENTE); 
        if (this.NOMBRESAGENTE != null)
             cloned.setNOMBRESAGENTE(new String(this.NOMBRESAGENTE)); 
        if (this.PAPELLIDOAGEN != null)
             cloned.setPAPELLIDOAGEN(new String(this.PAPELLIDOAGEN)); 
        if (this.SAPELLIDOAGEN != null)
             cloned.setSAPELLIDOAGEN(new String(this.SAPELLIDOAGEN)); 
        cloned.setIDCOMPARENDERA(this.IDCOMPARENDERA); 
        cloned.setESTADOCOMPARENDERA(this.ESTADOCOMPARENDERA); 
        if (this.RANGOINICIAL != null)
             cloned.setRANGOINICIAL(new String(this.RANGOINICIAL)); 
        if (this.RANGOFINAL != null)
             cloned.setRANGOFINAL(new String(this.RANGOFINAL)); 
        cloned.setIDCOMPARENDO(this.IDCOMPARENDO); 
        if (this.ANUMEROCOMPARENDO != null)
             cloned.setANUMEROCOMPARENDO(new String(this.ANUMEROCOMPARENDO)); 
        if (this.BFECHACOMPARENDO != null)
             cloned.setBFECHACOMPARENDO(new String(this.BFECHACOMPARENDO)); 
        if (this.CIDENTIFICACION != null)
             cloned.setCIDENTIFICACION(new String(this.CIDENTIFICACION)); 
        if (this.DNOMBRESINFRACTOR != null)
             cloned.setDNOMBRESINFRACTOR(new String(this.DNOMBRESINFRACTOR)); 
        if (this.EAPELLIDINFRACTOR != null)
             cloned.setEAPELLIDINFRACTOR(new String(this.EAPELLIDINFRACTOR)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
