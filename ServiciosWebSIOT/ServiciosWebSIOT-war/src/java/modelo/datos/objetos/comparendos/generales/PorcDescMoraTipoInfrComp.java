package modelo.datos.objetos.comparendos.generales;

import java.io.*;

import java.sql.*;

import java.util.*;

import java.math.*;

/**
  * TipoInfraccionComp Value Object.
  * This class is value object representing database table TIPO_INFRACCION
  * This class is intented to be used together with associated Dao object.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class PorcDescMoraTipoInfrComp implements Cloneable, Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int ID_PORC_DESC_MORA_TIPO_INFR;
    private int DIAS_INICIO;
    private int DIAS_FIN;
    private int PORC_DESC_MORA;
    private int ID_TIPO_INFRACCION;
    private String DESCRIPCION;
    private String TIPO_DIAS;

    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public PorcDescMoraTipoInfrComp() {

    }

    public PorcDescMoraTipoInfrComp(int ID_TIPO_INFR_INFRACCIONIn) {
        this.ID_PORC_DESC_MORA_TIPO_INFR = ID_TIPO_INFR_INFRACCIONIn;
    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_PORC_DESC_MORA_TIPO_INFR() {
        return this.ID_PORC_DESC_MORA_TIPO_INFR;
    }

    public void setID_PORC_DESC_MORA_TIPO_INFR(int ID_TIPO_INFR_INFRACCIONIn) {
        this.ID_PORC_DESC_MORA_TIPO_INFR = ID_TIPO_INFR_INFRACCIONIn;
    }

    public int getDIAS_INICIO() {
        return this.DIAS_INICIO;
    }

    public void setDIAS_INICIO(int ID_TIPO_INFRACCIONIn) {
        this.DIAS_INICIO = ID_TIPO_INFRACCIONIn;
    }

    public int getDIAS_FIN() {
        return this.DIAS_FIN;
    }

    public void setDIAS_FIN(int COD_TIPO_INFRACCIONIn) {
        this.DIAS_FIN = COD_TIPO_INFRACCIONIn;
    }

    public int getPORC_DESC_MORA() {
        return this.PORC_DESC_MORA;
    }

    public void setPORC_DESC_MORA(int TIPO_INFRACCIONIn) {
        this.PORC_DESC_MORA = TIPO_INFRACCIONIn;
    }


    /**
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the
     * individual set-methods.
     */

    public void setAll(int ID_TIPO_INFRACCIONIn, int COD_TIPO_INFRACCIONIn, int TIPO_INFRACCIONIn,
                       String TIPO_DIASIn) {
        this.DIAS_INICIO = ID_TIPO_INFRACCIONIn;
        this.DIAS_FIN = COD_TIPO_INFRACCIONIn;
        this.PORC_DESC_MORA = TIPO_INFRACCIONIn;
        this.TIPO_DIAS = TIPO_DIASIn;
    }


    /**
     * hasEqualMapping-method will compare two TipoInfraccionComp instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(PorcDescMoraTipoInfrComp valueObject) {

        if (valueObject.getDIAS_INICIO() != this.DIAS_INICIO) {
            return (false);
        }
        if (this.DIAS_FIN == -1) {
            if (valueObject.getDIAS_FIN() > 0)
                return (false);
        } else if (this.DIAS_FIN != valueObject.getDIAS_FIN()) {
            return (false);
        }

        if (this.PORC_DESC_MORA == -1) {
            if (valueObject.getPORC_DESC_MORA() > 0)
                return (false);
        } else if (this.PORC_DESC_MORA != valueObject.getPORC_DESC_MORA()) {
            return (false);
        }

        if (!this.TIPO_DIAS.equals("")) {
            if (!valueObject.TIPO_DIAS.equals(""))
                return (false);
        } else if (!this.TIPO_DIAS.equals(valueObject.getPORC_DESC_MORA())) {
            return (false);
        }
        return true;
    }


    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass TipoInfraccionComp, mapping to table TIPO_INFRACCION\n");
        out.append("Persistent attributes: \n");
        out.append("ID_TIPO_INFRACCION = " + this.DIAS_INICIO + "\n");
        out.append("COD_TIPO_INFRACCION = " + this.DIAS_FIN + "\n");
        out.append("TIPO_INFRACCION = " + this.PORC_DESC_MORA + "\n");
        out.append("TIPO_DIAS = " + this.TIPO_DIAS + "\n");
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        PorcDescMoraTipoInfrComp cloned = new PorcDescMoraTipoInfrComp();

        cloned.setDIAS_INICIO(this.DIAS_INICIO);
        if (this.DIAS_FIN > 0)
            cloned.setDIAS_FIN(this.DIAS_FIN);
        if (this.PORC_DESC_MORA > 0)
            cloned.setPORC_DESC_MORA(this.PORC_DESC_MORA);
        if (!this.TIPO_DIAS.equals(""))
            cloned.setTIPO_DIAS(this.TIPO_DIAS);
        return cloned;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

    public int getID_TIPO_INFRACCION() {
        return ID_TIPO_INFRACCION;
    }

    public void setID_TIPO_INFRACCION(int ID_TIPO_INFRACCION) {
        this.ID_TIPO_INFRACCION = ID_TIPO_INFRACCION;
    }

    public String getDESCRIPCION() {
        return DESCRIPCION;
    }

    public void setDESCRIPCION(String DESCRIPCION) {
        this.DESCRIPCION = DESCRIPCION;
    }

    public String getTIPO_DIAS() {
        return TIPO_DIAS;
    }

    public void setTIPO_DIAS(String TIPO_DIAS) {
        this.TIPO_DIAS = TIPO_DIAS;
    }
}
