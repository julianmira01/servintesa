package modelo.datos.objetos.radicacion;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RadicadoDeConductores Value Object.
  * This class is value object representing database table RADICADO_CONDUCTORES
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RadicadoDeConductores implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_RCONDUCTOR;
    private String FECHA_EXP;
    private String FECHA_VEN;
    private String OBSERVACION;
    private String ESTADO;
    private int ID_TRAMITECOND;
    private int ID_CONDUCTOR;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RadicadoDeConductores () {

    }

    public RadicadoDeConductores (int ID_RCONDUCTORIn) {

          this.ID_RCONDUCTOR = ID_RCONDUCTORIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_RCONDUCTOR() {
          return this.ID_RCONDUCTOR;
    }
    public void setID_RCONDUCTOR(int ID_RCONDUCTORIn) {
          this.ID_RCONDUCTOR = ID_RCONDUCTORIn;
    }

    public String getFECHA_EXP() {
          return this.FECHA_EXP;
    }
    public void setFECHA_EXP(String FECHA_EXPIn) {
          this.FECHA_EXP = FECHA_EXPIn;
    }

    public String getFECHA_VEN() {
          return this.FECHA_VEN;
    }
    public void setFECHA_VEN(String FECHA_VENIn) {
          this.FECHA_VEN = FECHA_VENIn;
    }

    public String getOBSERVACION() {
          return this.OBSERVACION;
    }
    public void setOBSERVACION(String OBSERVACIONIn) {
          this.OBSERVACION = OBSERVACIONIn;
    }

    public String getESTADO() {
          return this.ESTADO;
    }
    public void setESTADO(String ESTADOIn) {
          this.ESTADO = ESTADOIn;
    }

    public int getID_TRAMITECOND() {
          return this.ID_TRAMITECOND;
    }
    public void setID_TRAMITECOND(int ID_TRAMITECONDIn) {
          this.ID_TRAMITECOND = ID_TRAMITECONDIn;
    }

    public int getID_CONDUCTOR() {
          return this.ID_CONDUCTOR;
    }
    public void setID_CONDUCTOR(int ID_CONDUCTORIn) {
          this.ID_CONDUCTOR = ID_CONDUCTORIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_RCONDUCTORIn,
          String FECHA_EXPIn,
          String FECHA_VENIn,
          String OBSERVACIONIn,
          String ESTADOIn,
          int ID_TRAMITECONDIn,
          int ID_CONDUCTORIn) {
          this.ID_RCONDUCTOR = ID_RCONDUCTORIn;
          this.FECHA_EXP = FECHA_EXPIn;
          this.FECHA_VEN = FECHA_VENIn;
          this.OBSERVACION = OBSERVACIONIn;
          this.ESTADO = ESTADOIn;
          this.ID_TRAMITECOND = ID_TRAMITECONDIn;
          this.ID_CONDUCTOR = ID_CONDUCTORIn;
    }


    /** 
     * hasEqualMapping-method will compare two RadicadoDeConductores instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RadicadoDeConductores valueObject) {

          if (valueObject.getID_RCONDUCTOR() != this.ID_RCONDUCTOR) {
                    return(false);
          }
          if (this.FECHA_EXP == null) {
                    if (valueObject.getFECHA_EXP() != null)
                           return(false);
          } else if (!this.FECHA_EXP.equals(valueObject.getFECHA_EXP())) {
                    return(false);
          }
          if (this.FECHA_VEN == null) {
                    if (valueObject.getFECHA_VEN() != null)
                           return(false);
          } else if (!this.FECHA_VEN.equals(valueObject.getFECHA_VEN())) {
                    return(false);
          }
          if (this.OBSERVACION == null) {
                    if (valueObject.getOBSERVACION() != null)
                           return(false);
          } else if (!this.OBSERVACION.equals(valueObject.getOBSERVACION())) {
                    return(false);
          }
          if (this.ESTADO == null) {
                    if (valueObject.getESTADO() != null)
                           return(false);
          } else if (!this.ESTADO.equals(valueObject.getESTADO())) {
                    return(false);
          }
          if (valueObject.getID_TRAMITECOND() != this.ID_TRAMITECOND) {
                    return(false);
          }
          if (valueObject.getID_CONDUCTOR() != this.ID_CONDUCTOR) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RadicadoDeConductores, mapping to table RADICADO_CONDUCTORES\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_RCONDUCTOR = " + this.ID_RCONDUCTOR + "\n"); 
        out.append("FECHA_EXP = " + this.FECHA_EXP + "\n"); 
        out.append("FECHA_VEN = " + this.FECHA_VEN + "\n"); 
        out.append("OBSERVACION = " + this.OBSERVACION + "\n"); 
        out.append("ESTADO = " + this.ESTADO + "\n"); 
        out.append("ID_TRAMITECOND = " + this.ID_TRAMITECOND + "\n"); 
        out.append("ID_CONDUCTOR = " + this.ID_CONDUCTOR + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RadicadoDeConductores cloned = new RadicadoDeConductores();

        cloned.setID_RCONDUCTOR(this.ID_RCONDUCTOR); 
        if (this.FECHA_EXP != null)
             cloned.setFECHA_EXP(new String(this.FECHA_EXP)); 
        if (this.FECHA_VEN != null)
             cloned.setFECHA_VEN(new String(this.FECHA_VEN)); 
        if (this.OBSERVACION != null)
             cloned.setOBSERVACION(new String(this.OBSERVACION)); 
        if (this.ESTADO != null)
             cloned.setESTADO(new String(this.ESTADO)); 
        cloned.setID_TRAMITECOND(this.ID_TRAMITECOND); 
        cloned.setID_CONDUCTOR(this.ID_CONDUCTOR); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

