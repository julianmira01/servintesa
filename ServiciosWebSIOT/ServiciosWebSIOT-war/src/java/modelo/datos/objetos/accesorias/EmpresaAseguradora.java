package modelo.datos.objetos.accesorias;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * EmpresaAseguradora Value Object.
  * This class is value object representing database table EMPRESAASEGURADORA
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class EmpresaAseguradora implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDEMP_ASEGURADORA;
    private String COD_ASEGURADORA;
    private String EMPRESA_ASEGURADORA;
    private String NIT;
    private String DIGVERIFICACION;
    private String ID_DOCTO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public EmpresaAseguradora () {

    }

    public EmpresaAseguradora (int IDEMP_ASEGURADORAIn) {

          this.IDEMP_ASEGURADORA = IDEMP_ASEGURADORAIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDEMP_ASEGURADORA() {
          return this.IDEMP_ASEGURADORA;
    }
    public void setIDEMP_ASEGURADORA(int IDEMP_ASEGURADORAIn) {
          this.IDEMP_ASEGURADORA = IDEMP_ASEGURADORAIn;
    }

    public String getCOD_ASEGURADORA() {
          return this.COD_ASEGURADORA;
    }
    public void setCOD_ASEGURADORA(String COD_ASEGURADORAIn) {
          this.COD_ASEGURADORA = COD_ASEGURADORAIn;
    }

    public String getEMPRESA_ASEGURADORA() {
          return this.EMPRESA_ASEGURADORA;
    }
    public void setEMPRESA_ASEGURADORA(String EMPRESA_ASEGURADORAIn) {
          this.EMPRESA_ASEGURADORA = EMPRESA_ASEGURADORAIn;
    }

    public String getNIT() {
          return this.NIT;
    }
    public void setNIT(String NITIn) {
          this.NIT = NITIn;
    }

    public String getDIGVERIFICACION() {
          return this.DIGVERIFICACION;
    }
    public void setDIGVERIFICACION(String DIGVERIFICACIONIn) {
          this.DIGVERIFICACION = DIGVERIFICACIONIn;
    }

    public String getID_DOCTO() {
          return this.ID_DOCTO;
    }
    public void setID_DOCTO(String ID_DOCTOIn) {
          this.ID_DOCTO = ID_DOCTOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDEMP_ASEGURADORAIn,
          String COD_ASEGURADORAIn,
          String EMPRESA_ASEGURADORAIn,
          String NITIn,
          String DIGVERIFICACIONIn,
          String ID_DOCTOIn) {
          this.IDEMP_ASEGURADORA = IDEMP_ASEGURADORAIn;
          this.COD_ASEGURADORA = COD_ASEGURADORAIn;
          this.EMPRESA_ASEGURADORA = EMPRESA_ASEGURADORAIn;
          this.NIT = NITIn;
          this.DIGVERIFICACION = DIGVERIFICACIONIn;
          this.ID_DOCTO = ID_DOCTOIn;
    }


    /** 
     * hasEqualMapping-method will compare two EmpresaAseguradora instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(EmpresaAseguradora valueObject) {

          if (valueObject.getIDEMP_ASEGURADORA() != this.IDEMP_ASEGURADORA) {
                    return(false);
          }
          if (this.COD_ASEGURADORA == null) {
                    if (valueObject.getCOD_ASEGURADORA() != null)
                           return(false);
          } else if (!this.COD_ASEGURADORA.equals(valueObject.getCOD_ASEGURADORA())) {
                    return(false);
          }
          if (this.EMPRESA_ASEGURADORA == null) {
                    if (valueObject.getEMPRESA_ASEGURADORA() != null)
                           return(false);
          } else if (!this.EMPRESA_ASEGURADORA.equals(valueObject.getEMPRESA_ASEGURADORA())) {
                    return(false);
          }
          if (this.NIT == null) {
                    if (valueObject.getNIT() != null)
                           return(false);
          } else if (!this.NIT.equals(valueObject.getNIT())) {
                    return(false);
          }
          if (this.DIGVERIFICACION == null) {
                    if (valueObject.getDIGVERIFICACION() != null)
                           return(false);
          } else if (!this.DIGVERIFICACION.equals(valueObject.getDIGVERIFICACION())) {
                    return(false);
          }
          if (this.ID_DOCTO == null) {
                    if (valueObject.getID_DOCTO() != null)
                           return(false);
          } else if (!this.ID_DOCTO.equals(valueObject.getID_DOCTO())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass EmpresaAseguradora, mapping to table EMPRESAASEGURADORA\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDEMP_ASEGURADORA = " + this.IDEMP_ASEGURADORA + "\n"); 
        out.append("COD_ASEGURADORA = " + this.COD_ASEGURADORA + "\n"); 
        out.append("EMPRESA_ASEGURADORA = " + this.EMPRESA_ASEGURADORA + "\n"); 
        out.append("NIT = " + this.NIT + "\n"); 
        out.append("DIGVERIFICACION = " + this.DIGVERIFICACION + "\n"); 
        out.append("ID_DOCTO = " + this.ID_DOCTO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        EmpresaAseguradora cloned = new EmpresaAseguradora();

        cloned.setIDEMP_ASEGURADORA(this.IDEMP_ASEGURADORA); 
        if (this.COD_ASEGURADORA != null)
             cloned.setCOD_ASEGURADORA(new String(this.COD_ASEGURADORA)); 
        if (this.EMPRESA_ASEGURADORA != null)
             cloned.setEMPRESA_ASEGURADORA(new String(this.EMPRESA_ASEGURADORA)); 
        if (this.NIT != null)
             cloned.setNIT(new String(this.NIT)); 
        if (this.DIGVERIFICACION != null)
             cloned.setDIGVERIFICACION(new String(this.DIGVERIFICACION)); 
        if (this.ID_DOCTO != null)
             cloned.setID_DOCTO(new String(this.ID_DOCTO)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}