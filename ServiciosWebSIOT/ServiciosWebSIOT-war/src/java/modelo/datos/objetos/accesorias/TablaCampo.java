package modelo.datos.objetos.accesorias;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * TablaCampo Value Object.
  * This class is value object representing database table TABLACAMPO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class TablaCampo implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_TABLACAMPO;
    private int ID_TABLA;
    private int ID_CAMPO;
    private int VISIBLE;
    private String LABEL;
    private String TIPODATO;
    private int ID_TABLAFORANEA;
    private int ID_KEYPF;
    private int ESPK;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public TablaCampo () {

    }

    public TablaCampo (int ID_TABLACAMPOIn) {

          this.ID_TABLACAMPO = ID_TABLACAMPOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_TABLACAMPO() {
          return this.ID_TABLACAMPO;
    }
    public void setID_TABLACAMPO(int ID_TABLACAMPOIn) {
          this.ID_TABLACAMPO = ID_TABLACAMPOIn;
    }

    public int getID_TABLA() {
          return this.ID_TABLA;
    }
    public void setID_TABLA(int ID_TABLAIn) {
          this.ID_TABLA = ID_TABLAIn;
    }

    public int getID_CAMPO() {
          return this.ID_CAMPO;
    }
    public void setID_CAMPO(int ID_CAMPOIn) {
          this.ID_CAMPO = ID_CAMPOIn;
    }

    public int getVISIBLE() {
          return this.VISIBLE;
    }
    public void setVISIBLE(int VISIBLEIn) {
          this.VISIBLE = VISIBLEIn;
    }

    public String getLABEL() {
          return this.LABEL;
    }
    public void setLABEL(String LABELIn) {
          this.LABEL = LABELIn;
    }

    public String getTIPODATO() {
          return this.TIPODATO;
    }
    public void setTIPODATO(String TIPODATOIn) {
          this.TIPODATO = TIPODATOIn;
    }

    public int getID_TABLAFORANEA() {
          return this.ID_TABLAFORANEA;
    }
    public void setID_TABLAFORANEA(int ID_TABLAFORANEAIn) {
          this.ID_TABLAFORANEA = ID_TABLAFORANEAIn;
    }

    public int getID_KEYPF() {
          return this.ID_KEYPF;
    }
    public void setID_KEYPF(int ID_KEYPFIn) {
          this.ID_KEYPF = ID_KEYPFIn;
    }
    public int getESPK() {
        return ESPK;
    }
    public void setESPK(int ESPK) {
        this.ESPK = ESPK;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_TABLACAMPOIn,
          int ID_TABLAIn,
          int ID_CAMPOIn,
          int VISIBLEIn,
          String LABELIn,
          String TIPODATOIn,
          int ID_TABLAFORANEAIn,
          int ID_KEYPFIn,
          int ESPKIn) {
          this.ID_TABLACAMPO = ID_TABLACAMPOIn;
          this.ID_TABLA = ID_TABLAIn;
          this.ID_CAMPO = ID_CAMPOIn;
          this.VISIBLE = VISIBLEIn;
          this.LABEL = LABELIn;
          this.TIPODATO = TIPODATOIn;
          this.ID_TABLAFORANEA = ID_TABLAFORANEAIn;
          this.ID_KEYPF = ID_KEYPFIn;
          this.ESPK = ESPKIn;
    }


    /** 
     * hasEqualMapping-method will compare two TablaCampo instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(TablaCampo valueObject) {

          if (valueObject.getID_TABLACAMPO() != this.ID_TABLACAMPO) {
                    return(false);
          }
          if (valueObject.getID_TABLA() != this.ID_TABLA) {
                    return(false);
          }
          if (valueObject.getID_CAMPO() != this.ID_CAMPO) {
                    return(false);
          }
          if (valueObject.getVISIBLE() != this.VISIBLE) {
                    return(false);
          }
          if (this.LABEL == null) {
                    if (valueObject.getLABEL() != null)
                           return(false);
          } else if (!this.LABEL.equals(valueObject.getLABEL())) {
                    return(false);
          }
          if (this.TIPODATO == null) {
                    if (valueObject.getTIPODATO() != null)
                           return(false);
          } else if (!this.TIPODATO.equals(valueObject.getTIPODATO())) {
                    return(false);
          }
          if (valueObject.getID_TABLAFORANEA() != this.ID_TABLAFORANEA) {
                    return(false);
          }
          if (valueObject.getID_KEYPF() != this.ID_KEYPF) {
                    return(false);
          }
          if (valueObject.getESPK() != this.ESPK) {
                    return(false);
          }
          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass TablaCampo, mapping to table TABLACAMPO\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_TABLACAMPO = " + this.ID_TABLACAMPO + "\n"); 
        out.append("ID_TABLA = " + this.ID_TABLA + "\n"); 
        out.append("ID_CAMPO = " + this.ID_CAMPO + "\n"); 
        out.append("VISIBLE = " + this.VISIBLE + "\n"); 
        out.append("LABEL = " + this.LABEL + "\n"); 
        out.append("TIPODATO = " + this.TIPODATO + "\n"); 
        out.append("ID_TABLAFORANEA = " + this.ID_TABLAFORANEA + "\n"); 
        out.append("ID_KEYPF = " + this.ID_KEYPF + "\n"); 
        out.append("ESPK = " + this.ESPK + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        TablaCampo cloned = new TablaCampo();

        cloned.setID_TABLACAMPO(this.ID_TABLACAMPO); 
        cloned.setID_TABLA(this.ID_TABLA); 
        cloned.setID_CAMPO(this.ID_CAMPO); 
        cloned.setVISIBLE(this.VISIBLE); 
        if (this.LABEL != null)
             cloned.setLABEL(new String(this.LABEL)); 
        if (this.TIPODATO != null)
             cloned.setTIPODATO(new String(this.TIPODATO)); 
        cloned.setID_TABLAFORANEA(this.ID_TABLAFORANEA); 
        cloned.setID_KEYPF(this.ID_KEYPF); 
        cloned.setESPK(this.ESPK); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }
}
