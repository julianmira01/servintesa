package modelo.datos.objetos.accesorias;


import java.io.Serializable;

/**
  * EscuelasConduccion Value Object.
  * This class is value object representing database table ESCUELAS_CONDUCCION
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class EscuelasConduccion implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int CODESCUELA;
    private String DESCRIPCION;
    private String SIGLA;
    private String DIRECCION;
    private int TELEFONO;
    private int ID_CIUDAD;
    private String ID_DOCTO;
    private double ID_ESCUELA;
    private double CERTIFICADO;
    private int DIGVERIF;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public EscuelasConduccion () {

    }

    public EscuelasConduccion (int CODESCUELAIn) {

          this.CODESCUELA = CODESCUELAIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getCODESCUELA() {
          return this.CODESCUELA;
    }
    public void setCODESCUELA(int CODESCUELAIn) {
          this.CODESCUELA = CODESCUELAIn;
    }

    public String getDESCRIPCION() {
          return this.DESCRIPCION;
    }
    public void setDESCRIPCION(String DESCRIPCIONIn) {
          this.DESCRIPCION = DESCRIPCIONIn;
    }

    public String getSIGLA() {
          return this.SIGLA;
    }
    public void setSIGLA(String SIGLAIn) {
          this.SIGLA = SIGLAIn;
    }

    public String getDIRECCION() {
          return this.DIRECCION;
    }
    public void setDIRECCION(String DIRECCIONIn) {
          this.DIRECCION = DIRECCIONIn;
    }

    public int getTELEFONO() {
          return this.TELEFONO;
    }
    public void setTELEFONO(int TELEFONOIn) {
          this.TELEFONO = TELEFONOIn;
    }

    public int getID_CIUDAD() {
          return this.ID_CIUDAD;
    }
    public void setID_CIUDAD(int ID_CIUDADIn) {
          this.ID_CIUDAD = ID_CIUDADIn;
    }

    public String getID_DOCTO() {
          return this.ID_DOCTO;
    }
    public void setID_DOCTO(String ID_DOCTOIn) {
          this.ID_DOCTO = ID_DOCTOIn;
    }

    public double getID_ESCUELA() {
          return this.ID_ESCUELA;
    }
    public void setID_ESCUELA(double ID_ESCUELAIn) {
          this.ID_ESCUELA = ID_ESCUELAIn;
    }

    public double getCERTIFICADO() {
          return this.CERTIFICADO;
    }
    public void setCERTIFICADO(double CERTIFICADOIn) {
          this.CERTIFICADO = CERTIFICADOIn;
    }

    public int getDIGVERIF() {
          return this.DIGVERIF;
    }
    public void setDIGVERIF(int DIGVERIFIn) {
          this.DIGVERIF = DIGVERIFIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int CODESCUELAIn,
          String DESCRIPCIONIn,
          String SIGLAIn,
          String DIRECCIONIn,
          int TELEFONOIn,
          int ID_CIUDADIn,
          String ID_DOCTOIn,
          double ID_ESCUELAIn,
          double CERTIFICADOIn,
          int DIGVERIFIn) {
          this.CODESCUELA = CODESCUELAIn;
          this.DESCRIPCION = DESCRIPCIONIn;
          this.SIGLA = SIGLAIn;
          this.DIRECCION = DIRECCIONIn;
          this.TELEFONO = TELEFONOIn;
          this.ID_CIUDAD = ID_CIUDADIn;
          this.ID_DOCTO = ID_DOCTOIn;
          this.ID_ESCUELA = ID_ESCUELAIn;
          this.CERTIFICADO = CERTIFICADOIn;
          this.DIGVERIF = DIGVERIFIn;
    }


    /** 
     * hasEqualMapping-method will compare two EscuelasConduccion instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(EscuelasConduccion valueObject) {

          if (valueObject.getCODESCUELA() != this.CODESCUELA) {
                    return(false);
          }
          if (this.DESCRIPCION == null) {
                    if (valueObject.getDESCRIPCION() != null)
                           return(false);
          } else if (!this.DESCRIPCION.equals(valueObject.getDESCRIPCION())) {
                    return(false);
          }
          if (this.SIGLA == null) {
                    if (valueObject.getSIGLA() != null)
                           return(false);
          } else if (!this.SIGLA.equals(valueObject.getSIGLA())) {
                    return(false);
          }
          if (this.DIRECCION == null) {
                    if (valueObject.getDIRECCION() != null)
                           return(false);
          } else if (!this.DIRECCION.equals(valueObject.getDIRECCION())) {
                    return(false);
          }
          if (valueObject.getTELEFONO() != this.TELEFONO) {
                    return(false);
          }
          if (valueObject.getID_CIUDAD() != this.ID_CIUDAD) {
                    return(false);
          }
          if (this.ID_DOCTO == null) {
                    if (valueObject.getID_DOCTO() != null)
                           return(false);
          } else if (!this.ID_DOCTO.equals(valueObject.getID_DOCTO())) {
                    return(false);
          }
          if (valueObject.getID_ESCUELA() != this.ID_ESCUELA) {
                    return(false);
          }
          if (valueObject.getCERTIFICADO() != this.CERTIFICADO) {
                    return(false);
          }
          if (valueObject.getDIGVERIF() != this.DIGVERIF) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass EscuelasConduccion, mapping to table ESCUELAS_CONDUCCION\n");
        out.append("Persistent attributes: \n"); 
        out.append("CODESCUELA = " + this.CODESCUELA + "\n"); 
        out.append("DESCRIPCION = " + this.DESCRIPCION + "\n"); 
        out.append("SIGLA = " + this.SIGLA + "\n"); 
        out.append("DIRECCION = " + this.DIRECCION + "\n"); 
        out.append("TELEFONO = " + this.TELEFONO + "\n"); 
        out.append("ID_CIUDAD = " + this.ID_CIUDAD + "\n"); 
        out.append("ID_DOCTO = " + this.ID_DOCTO + "\n"); 
        out.append("ID_ESCUELA = " + this.ID_ESCUELA + "\n"); 
        out.append("CERTIFICADO = " + this.CERTIFICADO + "\n"); 
        out.append("DIGVERIF = " + this.DIGVERIF + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        EscuelasConduccion cloned = new EscuelasConduccion();

        cloned.setCODESCUELA(this.CODESCUELA); 
        if (this.DESCRIPCION != null)
             cloned.setDESCRIPCION(new String(this.DESCRIPCION)); 
        if (this.SIGLA != null)
             cloned.setSIGLA(new String(this.SIGLA)); 
        if (this.DIRECCION != null)
             cloned.setDIRECCION(new String(this.DIRECCION)); 
        cloned.setTELEFONO(this.TELEFONO); 
        cloned.setID_CIUDAD(this.ID_CIUDAD); 
        if (this.ID_DOCTO != null)
             cloned.setID_DOCTO(new String(this.ID_DOCTO)); 
        cloned.setID_ESCUELA(this.ID_ESCUELA); 
        cloned.setCERTIFICADO(this.CERTIFICADO); 
        cloned.setDIGVERIF(this.DIGVERIF); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
