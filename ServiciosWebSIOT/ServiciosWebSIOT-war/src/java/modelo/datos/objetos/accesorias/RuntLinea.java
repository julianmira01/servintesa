package modelo.datos.objetos.accesorias;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RuntLinea Value Object.
  * This class is value object representing database table LINEA
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RuntLinea implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_LINEA;
    private String ID_MARCA;
    private String DESCRIPCION;
    private String REVISADA;
    private String IDMARCANUM;
    private String ID_LINEAPPAL;
    private String CHEQUEADO;
    private String ID_MARCAPPAL;
    private String ID_LINEARUNT;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RuntLinea () {

    }

    public RuntLinea (int ID_LINEAIn) {

          this.ID_LINEA = ID_LINEAIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_LINEA() {
          return this.ID_LINEA;
    }
    public void setID_LINEA(int ID_LINEAIn) {
          this.ID_LINEA = ID_LINEAIn;
    }

    public String getID_MARCA() {
          return this.ID_MARCA;
    }
    public void setID_MARCA(String ID_MARCAIn) {
          this.ID_MARCA = ID_MARCAIn;
    }

    public String getDESCRIPCION() {
          return this.DESCRIPCION;
    }
    public void setDESCRIPCION(String DESCRIPCIONIn) {
          this.DESCRIPCION = DESCRIPCIONIn;
    }

    public String getREVISADA() {
          return this.REVISADA;
    }
    public void setREVISADA(String REVISADAIn) {
          this.REVISADA = REVISADAIn;
    }

    public String getIDMARCANUM() {
          return this.IDMARCANUM;
    }
    public void setIDMARCANUM(String IDMARCANUMIn) {
          this.IDMARCANUM = IDMARCANUMIn;
    }

    public String getID_LINEAPPAL() {
          return this.ID_LINEAPPAL;
    }
    public void setID_LINEAPPAL(String ID_LINEAPPALIn) {
          this.ID_LINEAPPAL = ID_LINEAPPALIn;
    }

    public String getCHEQUEADO() {
          return this.CHEQUEADO;
    }
    public void setCHEQUEADO(String CHEQUEADOIn) {
          this.CHEQUEADO = CHEQUEADOIn;
    }

    public String getID_MARCAPPAL() {
          return this.ID_MARCAPPAL;
    }
    public void setID_MARCAPPAL(String ID_MARCAPPALIn) {
          this.ID_MARCAPPAL = ID_MARCAPPALIn;
    }

    public String getID_LINEARUNT() {
          return this.ID_LINEARUNT;
    }
    public void setID_LINEARUNT(String ID_LINEARUNTIn) {
          this.ID_LINEARUNT = ID_LINEARUNTIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_LINEAIn,
          String ID_MARCAIn,
          String DESCRIPCIONIn,
          String REVISADAIn,
          String IDMARCANUMIn,
          String ID_LINEAPPALIn,
          String CHEQUEADOIn,
          String ID_MARCAPPALIn,
          String ID_LINEARUNTIn) {
          this.ID_LINEA = ID_LINEAIn;
          this.ID_MARCA = ID_MARCAIn;
          this.DESCRIPCION = DESCRIPCIONIn;
          this.REVISADA = REVISADAIn;
          this.IDMARCANUM = IDMARCANUMIn;
          this.ID_LINEAPPAL = ID_LINEAPPALIn;
          this.CHEQUEADO = CHEQUEADOIn;
          this.ID_MARCAPPAL = ID_MARCAPPALIn;
          this.ID_LINEARUNT = ID_LINEARUNTIn;
    }


    /** 
     * hasEqualMapping-method will compare two RuntLinea instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RuntLinea valueObject) {

          if (valueObject.getID_LINEA() != this.ID_LINEA) {
                    return(false);
          }
          if (this.ID_MARCA == null) {
                    if (valueObject.getID_MARCA() != null)
                           return(false);
          } else if (!this.ID_MARCA.equals(valueObject.getID_MARCA())) {
                    return(false);
          }
          if (this.DESCRIPCION == null) {
                    if (valueObject.getDESCRIPCION() != null)
                           return(false);
          } else if (!this.DESCRIPCION.equals(valueObject.getDESCRIPCION())) {
                    return(false);
          }
          if (this.REVISADA == null) {
                    if (valueObject.getREVISADA() != null)
                           return(false);
          } else if (!this.REVISADA.equals(valueObject.getREVISADA())) {
                    return(false);
          }
          if (this.IDMARCANUM == null) {
                    if (valueObject.getIDMARCANUM() != null)
                           return(false);
          } else if (!this.IDMARCANUM.equals(valueObject.getIDMARCANUM())) {
                    return(false);
          }
          if (this.ID_LINEAPPAL == null) {
                    if (valueObject.getID_LINEAPPAL() != null)
                           return(false);
          } else if (!this.ID_LINEAPPAL.equals(valueObject.getID_LINEAPPAL())) {
                    return(false);
          }
          if (this.CHEQUEADO == null) {
                    if (valueObject.getCHEQUEADO() != null)
                           return(false);
          } else if (!this.CHEQUEADO.equals(valueObject.getCHEQUEADO())) {
                    return(false);
          }
          if (this.ID_MARCAPPAL == null) {
                    if (valueObject.getID_MARCAPPAL() != null)
                           return(false);
          } else if (!this.ID_MARCAPPAL.equals(valueObject.getID_MARCAPPAL())) {
                    return(false);
          }
          if (this.ID_LINEARUNT == null) {
                    if (valueObject.getID_LINEARUNT() != null)
                           return(false);
          } else if (!this.ID_LINEARUNT.equals(valueObject.getID_LINEARUNT())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RuntLinea, mapping to table LINEA\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_LINEA = " + this.ID_LINEA + "\n"); 
        out.append("ID_MARCA = " + this.ID_MARCA + "\n"); 
        out.append("DESCRIPCION = " + this.DESCRIPCION + "\n"); 
        out.append("REVISADA = " + this.REVISADA + "\n"); 
        out.append("IDMARCANUM = " + this.IDMARCANUM + "\n"); 
        out.append("ID_LINEAPPAL = " + this.ID_LINEAPPAL + "\n"); 
        out.append("CHEQUEADO = " + this.CHEQUEADO + "\n"); 
        out.append("ID_MARCAPPAL = " + this.ID_MARCAPPAL + "\n"); 
        out.append("ID_LINEARUNT = " + this.ID_LINEARUNT + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RuntLinea cloned = new RuntLinea();

        cloned.setID_LINEA(this.ID_LINEA); 
        if (this.ID_MARCA != null)
             cloned.setID_MARCA(new String(this.ID_MARCA)); 
        if (this.DESCRIPCION != null)
             cloned.setDESCRIPCION(new String(this.DESCRIPCION)); 
        if (this.REVISADA != null)
             cloned.setREVISADA(new String(this.REVISADA)); 
        if (this.IDMARCANUM != null)
             cloned.setIDMARCANUM(new String(this.IDMARCANUM)); 
        if (this.ID_LINEAPPAL != null)
             cloned.setID_LINEAPPAL(new String(this.ID_LINEAPPAL)); 
        if (this.CHEQUEADO != null)
             cloned.setCHEQUEADO(new String(this.CHEQUEADO)); 
        if (this.ID_MARCAPPAL != null)
             cloned.setID_MARCAPPAL(new String(this.ID_MARCAPPAL)); 
        if (this.ID_LINEARUNT != null)
             cloned.setID_LINEARUNT(new String(this.ID_LINEARUNT)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}