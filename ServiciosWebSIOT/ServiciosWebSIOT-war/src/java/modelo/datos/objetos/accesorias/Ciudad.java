package modelo.datos.objetos.accesorias;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Ciudad Value Object.
  * This class is value object representing database table CIUDAD
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Ciudad implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_CIUDAD;
    private String ID_DEPTO;
    private String CODCIUDAD;
    private String NOMBRE;
    private String ID_CIUDADRUNT;
    private String DIVIPO;
    private String REGIMENESPECIAL;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Ciudad () {

    }

    public Ciudad (int ID_CIUDADIn) {

          this.ID_CIUDAD = ID_CIUDADIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_CIUDAD() {
          return this.ID_CIUDAD;
    }
    public void setID_CIUDAD(int ID_CIUDADIn) {
          this.ID_CIUDAD = ID_CIUDADIn;
    }

    public String getID_DEPTO() {
          return this.ID_DEPTO;
    }
    public void setID_DEPTO(String ID_DEPTOIn) {
          this.ID_DEPTO = ID_DEPTOIn;
    }

    public String getCODCIUDAD() {
          return this.CODCIUDAD;
    }
    public void setCODCIUDAD(String CODCIUDADIn) {
          this.CODCIUDAD = CODCIUDADIn;
    }

    public String getNOMBRE() {
          return this.NOMBRE;
    }
    public void setNOMBRE(String NOMBREIn) {
          this.NOMBRE = NOMBREIn;
    }

    public String getID_CIUDADRUNT() {
          return this.ID_CIUDADRUNT;
    }
    public void setID_CIUDADRUNT(String ID_CIUDADRUNTIn) {
          this.ID_CIUDADRUNT = ID_CIUDADRUNTIn;
    }

    public String getDIVIPO() {
          return this.DIVIPO;
    }
    public void setDIVIPO(String DIVIPOIn) {
          this.DIVIPO = DIVIPOIn;
    }

    public String getREGIMENESPECIAL() {
          return this.REGIMENESPECIAL;
    }
    public void setREGIMENESPECIAL(String REGIMENESPECIALIn) {
          this.REGIMENESPECIAL = REGIMENESPECIALIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_CIUDADIn,
          String ID_DEPTOIn,
          String CODCIUDADIn,
          String NOMBREIn,
          String ID_CIUDADRUNTIn,
          String DIVIPOIn,
          String REGIMENESPECIALIn) {
          this.ID_CIUDAD = ID_CIUDADIn;
          this.ID_DEPTO = ID_DEPTOIn;
          this.CODCIUDAD = CODCIUDADIn;
          this.NOMBRE = NOMBREIn;
          this.ID_CIUDADRUNT = ID_CIUDADRUNTIn;
          this.DIVIPO = DIVIPOIn;
          this.REGIMENESPECIAL = REGIMENESPECIALIn;
    }


    /** 
     * hasEqualMapping-method will compare two Ciudad instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Ciudad valueObject) {

          if (valueObject.getID_CIUDAD() != this.ID_CIUDAD) {
                    return(false);
          }
          if (this.ID_DEPTO == null) {
                    if (valueObject.getID_DEPTO() != null)
                           return(false);
          } else if (!this.ID_DEPTO.equals(valueObject.getID_DEPTO())) {
                    return(false);
          }
          if (this.CODCIUDAD == null) {
                    if (valueObject.getCODCIUDAD() != null)
                           return(false);
          } else if (!this.CODCIUDAD.equals(valueObject.getCODCIUDAD())) {
                    return(false);
          }
          if (this.NOMBRE == null) {
                    if (valueObject.getNOMBRE() != null)
                           return(false);
          } else if (!this.NOMBRE.equals(valueObject.getNOMBRE())) {
                    return(false);
          }
          if (this.ID_CIUDADRUNT == null) {
                    if (valueObject.getID_CIUDADRUNT() != null)
                           return(false);
          } else if (!this.ID_CIUDADRUNT.equals(valueObject.getID_CIUDADRUNT())) {
                    return(false);
          }
          if (this.DIVIPO == null) {
                    if (valueObject.getDIVIPO() != null)
                           return(false);
          } else if (!this.DIVIPO.equals(valueObject.getDIVIPO())) {
                    return(false);
          }
          if (this.REGIMENESPECIAL == null) {
                    if (valueObject.getREGIMENESPECIAL() != null)
                           return(false);
          } else if (!this.REGIMENESPECIAL.equals(valueObject.getREGIMENESPECIAL())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Ciudad, mapping to table CIUDAD\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_CIUDAD = " + this.ID_CIUDAD + "\n"); 
        out.append("ID_DEPTO = " + this.ID_DEPTO + "\n"); 
        out.append("CODCIUDAD = " + this.CODCIUDAD + "\n"); 
        out.append("NOMBRE = " + this.NOMBRE + "\n"); 
        out.append("ID_CIUDADRUNT = " + this.ID_CIUDADRUNT + "\n"); 
        out.append("DIVIPO = " + this.DIVIPO + "\n"); 
        out.append("REGIMENESPECIAL = " + this.REGIMENESPECIAL + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Ciudad cloned = new Ciudad();

        cloned.setID_CIUDAD(this.ID_CIUDAD); 
        if (this.ID_DEPTO != null)
             cloned.setID_DEPTO(new String(this.ID_DEPTO)); 
        if (this.CODCIUDAD != null)
             cloned.setCODCIUDAD(new String(this.CODCIUDAD)); 
        if (this.NOMBRE != null)
             cloned.setNOMBRE(new String(this.NOMBRE)); 
        if (this.ID_CIUDADRUNT != null)
             cloned.setID_CIUDADRUNT(new String(this.ID_CIUDADRUNT)); 
        if (this.DIVIPO != null)
             cloned.setDIVIPO(new String(this.DIVIPO)); 
        if (this.REGIMENESPECIAL != null)
             cloned.setREGIMENESPECIAL(new String(this.REGIMENESPECIAL)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}


