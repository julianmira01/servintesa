package modelo.datos.objetos.documentos.digitales;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * ViewElementoIndices Value Object.
  * This class is value object representing database table ViewElementoIndices
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewElementoIndices implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDELEMENTODIGITAL;
    private String CODIGOELEMENTO;
    private String NOMBREELEMENTO;
    private String NOMBREIDELEMENTO;
    private int IDINDICE;
    private String COD_INDICE;
    private String DESC_INDICE;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewElementoIndices () {

    }

    public ViewElementoIndices (int IDELEMENTODIGITALIn) {

          this.IDELEMENTODIGITAL = IDELEMENTODIGITALIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDELEMENTODIGITAL() {
          return this.IDELEMENTODIGITAL;
    }
    public void setIDELEMENTODIGITAL(int IDELEMENTODIGITALIn) {
          this.IDELEMENTODIGITAL = IDELEMENTODIGITALIn;
    }

    public String getCODIGOELEMENTO() {
          return this.CODIGOELEMENTO;
    }
    public void setCODIGOELEMENTO(String CODIGOELEMENTOIn) {
          this.CODIGOELEMENTO = CODIGOELEMENTOIn;
    }

    public String getNOMBREELEMENTO() {
          return this.NOMBREELEMENTO;
    }
    public void setNOMBREELEMENTO(String NOMBREELEMENTOIn) {
          this.NOMBREELEMENTO = NOMBREELEMENTOIn;
    }

    public String getNOMBREIDELEMENTO() {
          return this.NOMBREIDELEMENTO;
    }
    public void setNOMBREIDELEMENTO(String NOMBREIDELEMENTOIn) {
          this.NOMBREIDELEMENTO = NOMBREIDELEMENTOIn;
    }

    public int getIDINDICE() {
          return this.IDINDICE;
    }
    public void setIDINDICE(int IDINDICEIn) {
          this.IDINDICE = IDINDICEIn;
    }

    public String getCOD_INDICE() {
          return this.COD_INDICE;
    }
    public void setCOD_INDICE(String COD_INDICEIn) {
          this.COD_INDICE = COD_INDICEIn;
    }

    public String getDESC_INDICE() {
          return this.DESC_INDICE;
    }
    public void setDESC_INDICE(String DESC_INDICEIn) {
          this.DESC_INDICE = DESC_INDICEIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDELEMENTODIGITALIn,
          String CODIGOELEMENTOIn,
          String NOMBREELEMENTOIn,
          String NOMBREIDELEMENTOIn,
          int IDINDICEIn,
          String COD_INDICEIn,
          String DESC_INDICEIn) {
          this.IDELEMENTODIGITAL = IDELEMENTODIGITALIn;
          this.CODIGOELEMENTO = CODIGOELEMENTOIn;
          this.NOMBREELEMENTO = NOMBREELEMENTOIn;
          this.NOMBREIDELEMENTO = NOMBREIDELEMENTOIn;
          this.IDINDICE = IDINDICEIn;
          this.COD_INDICE = COD_INDICEIn;
          this.DESC_INDICE = DESC_INDICEIn;
    }


    /** 
     * hasEqualMapping-method will compare two ViewElementoIndices instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewElementoIndices valueObject) {

          if (valueObject.getIDELEMENTODIGITAL() != this.IDELEMENTODIGITAL) {
                    return(false);
          }
          if (this.CODIGOELEMENTO == null) {
                    if (valueObject.getCODIGOELEMENTO() != null)
                           return(false);
          } else if (!this.CODIGOELEMENTO.equals(valueObject.getCODIGOELEMENTO())) {
                    return(false);
          }
          if (this.NOMBREELEMENTO == null) {
                    if (valueObject.getNOMBREELEMENTO() != null)
                           return(false);
          } else if (!this.NOMBREELEMENTO.equals(valueObject.getNOMBREELEMENTO())) {
                    return(false);
          }
          if (this.NOMBREIDELEMENTO == null) {
                    if (valueObject.getNOMBREIDELEMENTO() != null)
                           return(false);
          } else if (!this.NOMBREIDELEMENTO.equals(valueObject.getNOMBREIDELEMENTO())) {
                    return(false);
          }
          if (valueObject.getIDINDICE() != this.IDINDICE) {
                    return(false);
          }
          if (this.COD_INDICE == null) {
                    if (valueObject.getCOD_INDICE() != null)
                           return(false);
          } else if (!this.COD_INDICE.equals(valueObject.getCOD_INDICE())) {
                    return(false);
          }
          if (this.DESC_INDICE == null) {
                    if (valueObject.getDESC_INDICE() != null)
                           return(false);
          } else if (!this.DESC_INDICE.equals(valueObject.getDESC_INDICE())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewElementoIndices, mapping to table ViewElementoIndices\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDELEMENTODIGITAL = " + this.IDELEMENTODIGITAL + "\n"); 
        out.append("CODIGOELEMENTO = " + this.CODIGOELEMENTO + "\n"); 
        out.append("NOMBREELEMENTO = " + this.NOMBREELEMENTO + "\n"); 
        out.append("NOMBREIDELEMENTO = " + this.NOMBREIDELEMENTO + "\n"); 
        out.append("IDINDICE = " + this.IDINDICE + "\n"); 
        out.append("COD_INDICE = " + this.COD_INDICE + "\n"); 
        out.append("DESC_INDICE = " + this.DESC_INDICE + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewElementoIndices cloned = new ViewElementoIndices();

        cloned.setIDELEMENTODIGITAL(this.IDELEMENTODIGITAL); 
        if (this.CODIGOELEMENTO != null)
             cloned.setCODIGOELEMENTO(new String(this.CODIGOELEMENTO)); 
        if (this.NOMBREELEMENTO != null)
             cloned.setNOMBREELEMENTO(new String(this.NOMBREELEMENTO)); 
        if (this.NOMBREIDELEMENTO != null)
             cloned.setNOMBREIDELEMENTO(new String(this.NOMBREIDELEMENTO)); 
        cloned.setIDINDICE(this.IDINDICE); 
        if (this.COD_INDICE != null)
             cloned.setCOD_INDICE(new String(this.COD_INDICE)); 
        if (this.DESC_INDICE != null)
             cloned.setDESC_INDICE(new String(this.DESC_INDICE)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
