package modelo.datos.objetos.liquidador;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Liquidacion Value Object.
  * This class is value object representing database table LIQUIDACION
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



  import java.io.*;
  import java.sql.*;
  import java.util.*;
  import java.math.*;

   /**
    * Liquidacion Value Object.
    * This class is value object representing database table LIQUIDACION
    * This class is intented to be used together with associated Dao object.
    */

   /**
    * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
    * The usage of generated code is restricted to OpenSource software projects
    * only. DaoGen is available in http://titaniclinux.net/daogen/
    * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
    *
    * DaoGen license: The following DaoGen generated source code is licensed
    * under the terms of GNU GPL license. The full text for license is available
    * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
    *
    * If you wish to use the DaoGen generator to produce code for closed-source
    * commercial applications, you must pay the lisence fee. The price is
    * 5 USD or 5 Eur for each database table, you are generating code for.
    * (That includes unlimited amount of iterations with all supported languages
    * for each database table you are paying for.) Send mail to
    * "Tuomo.Lukka@iki.fi" for more information. Thank you!
    */



  public class Liquidacion implements Cloneable, Serializable {

      /** 
       * Persistent Instance variables. This data is directly 
       * mapped to the columns of database table.
       */
      private int IDLIQUIDACION;
      private String TOTAL;
      private String FECHA;
      private String SALDO;
      private String FECHAREGISTRO;
      private String HORAREGISTRO;
      private String IDUSUARIO;
      private String ESTADOLIQ;
      private String NROCOMP;



      /** 
       * Constructors. DaoGen generates two constructors by default.
       * The first one takes no arguments and provides the most simple
       * way to create object instance. The another one takes one
       * argument, which is the primary key of the corresponding table.
       */

      public Liquidacion () {

      }

      public Liquidacion (int IDLIQUIDACIONIn) {

            this.IDLIQUIDACION = IDLIQUIDACIONIn;

      }


      /** 
       * Get- and Set-methods for persistent variables. The default
       * behaviour does not make any checks against malformed data,
       * so these might require some manual additions.
       */

      public int getIDLIQUIDACION() {
            return this.IDLIQUIDACION;
      }
      public void setIDLIQUIDACION(int IDLIQUIDACIONIn) {
            this.IDLIQUIDACION = IDLIQUIDACIONIn;
      }

      public String getTOTAL() {
            return this.TOTAL;
      }
      public void setTOTAL(String TOTALIn) {
            this.TOTAL = TOTALIn;
      }

      public String getFECHA() {
            return this.FECHA;
      }
      public void setFECHA(String FECHAIn) {
            this.FECHA = FECHAIn;
      }

      public String getSALDO() {
            return this.SALDO;
      }
      public void setSALDO(String SALDOIn) {
            this.SALDO = SALDOIn;
      }

      public String getFECHAREGISTRO() {
            return this.FECHAREGISTRO;
      }
      public void setFECHAREGISTRO(String FECHAREGISTROIn) {
            this.FECHAREGISTRO = FECHAREGISTROIn;
      }

      public String getHORAREGISTRO() {
            return this.HORAREGISTRO;
      }
      public void setHORAREGISTRO(String HORAREGISTROIn) {
            this.HORAREGISTRO = HORAREGISTROIn;
      }

      public String getIDUSUARIO() {
            return this.IDUSUARIO;
      }
      public void setIDUSUARIO(String IDUSUARIOIn) {
            this.IDUSUARIO = IDUSUARIOIn;
      }

      public String getESTADOLIQ() {
            return this.ESTADOLIQ;
      }
      public void setESTADOLIQ(String ESTADOLIQIn) {
            this.ESTADOLIQ = ESTADOLIQIn;
      }

      public String getNROCOMP() {
            return this.NROCOMP;
      }
      public void setNROCOMP(String NROCOMPIn) {
            this.NROCOMP = NROCOMPIn;
      }



      /** 
       * setAll allows to set all persistent variables in one method call.
       * This is useful, when all data is available and it is needed to 
       * set the initial state of this object. Note that this method will
       * directly modify instance variales, without going trough the 
       * individual set-methods.
       */

      public void setAll(int IDLIQUIDACIONIn,
            String TOTALIn,
            String FECHAIn,
            String SALDOIn,
            String FECHAREGISTROIn,
            String HORAREGISTROIn,
            String IDUSUARIOIn,
            String ESTADOLIQIn,
            String NROCOMPIn) {
            this.IDLIQUIDACION = IDLIQUIDACIONIn;
            this.TOTAL = TOTALIn;
            this.FECHA = FECHAIn;
            this.SALDO = SALDOIn;
            this.FECHAREGISTRO = FECHAREGISTROIn;
            this.HORAREGISTRO = HORAREGISTROIn;
            this.IDUSUARIO = IDUSUARIOIn;
            this.ESTADOLIQ = ESTADOLIQIn;
            this.NROCOMP = NROCOMPIn;
      }


      /** 
       * hasEqualMapping-method will compare two Liquidacion instances
       * and return true if they contain same values in all persistent instance 
       * variables. If hasEqualMapping returns true, it does not mean the objects
       * are the same instance. However it does mean that in that moment, they 
       * are mapped to the same row in database.
       */
      public boolean hasEqualMapping(Liquidacion valueObject) {

            if (valueObject.getIDLIQUIDACION() != this.IDLIQUIDACION) {
                      return(false);
            }
            if (this.TOTAL == null) {
                      if (valueObject.getTOTAL() != null)
                             return(false);
            } else if (!this.TOTAL.equals(valueObject.getTOTAL())) {
                      return(false);
            }
            if (this.FECHA == null) {
                      if (valueObject.getFECHA() != null)
                             return(false);
            } else if (!this.FECHA.equals(valueObject.getFECHA())) {
                      return(false);
            }
            if (this.SALDO == null) {
                      if (valueObject.getSALDO() != null)
                             return(false);
            } else if (!this.SALDO.equals(valueObject.getSALDO())) {
                      return(false);
            }
            if (this.FECHAREGISTRO == null) {
                      if (valueObject.getFECHAREGISTRO() != null)
                             return(false);
            } else if (!this.FECHAREGISTRO.equals(valueObject.getFECHAREGISTRO())) {
                      return(false);
            }
            if (this.HORAREGISTRO == null) {
                      if (valueObject.getHORAREGISTRO() != null)
                             return(false);
            } else if (!this.HORAREGISTRO.equals(valueObject.getHORAREGISTRO())) {
                      return(false);
            }
            if (this.IDUSUARIO == null) {
                      if (valueObject.getIDUSUARIO() != null)
                             return(false);
            } else if (!this.IDUSUARIO.equals(valueObject.getIDUSUARIO())) {
                      return(false);
            }
            if (this.ESTADOLIQ == null) {
                      if (valueObject.getESTADOLIQ() != null)
                             return(false);
            } else if (!this.ESTADOLIQ.equals(valueObject.getESTADOLIQ())) {
                      return(false);
            }
            if (this.NROCOMP == null) {
                      if (valueObject.getNROCOMP() != null)
                             return(false);
            } else if (!this.NROCOMP.equals(valueObject.getNROCOMP())) {
                      return(false);
            }

            return true;
      }



      /**
       * toString will return String object representing the state of this 
       * valueObject. This is useful during application development, and 
       * possibly when application is writing object states in textlog.
       */
      public String toString() {
          StringBuffer out = new StringBuffer(this.getDaogenVersion());
          out.append("\nclass Liquidacion, mapping to table LIQUIDACION\n");
          out.append("Persistent attributes: \n"); 
          out.append("IDLIQUIDACION = " + this.IDLIQUIDACION + "\n"); 
          out.append("TOTAL = " + this.TOTAL + "\n"); 
          out.append("FECHA = " + this.FECHA + "\n"); 
          out.append("SALDO = " + this.SALDO + "\n"); 
          out.append("FECHAREGISTRO = " + this.FECHAREGISTRO + "\n"); 
          out.append("HORAREGISTRO = " + this.HORAREGISTRO + "\n"); 
          out.append("IDUSUARIO = " + this.IDUSUARIO + "\n"); 
          out.append("ESTADOLIQ = " + this.ESTADOLIQ + "\n"); 
          out.append("NROCOMP = " + this.NROCOMP + "\n"); 
          return out.toString();
      }


      /**
       * Clone will return identical deep copy of this valueObject.
       * Note, that this method is different than the clone() which
       * is defined in java.lang.Object. Here, the retuned cloned object
       * will also have all its attributes cloned.
       */
      public Object clone() {
          Liquidacion cloned = new Liquidacion();

          cloned.setIDLIQUIDACION(this.IDLIQUIDACION); 
          if (this.TOTAL != null)
               cloned.setTOTAL(new String(this.TOTAL)); 
          if (this.FECHA != null)
               cloned.setFECHA(new String(this.FECHA)); 
          if (this.SALDO != null)
               cloned.setSALDO(new String(this.SALDO)); 
          if (this.FECHAREGISTRO != null)
               cloned.setFECHAREGISTRO(new String(this.FECHAREGISTRO)); 
          if (this.HORAREGISTRO != null)
               cloned.setHORAREGISTRO(new String(this.HORAREGISTRO)); 
          if (this.IDUSUARIO != null)
               cloned.setIDUSUARIO(new String(this.IDUSUARIO)); 
          if (this.ESTADOLIQ != null)
               cloned.setESTADOLIQ(new String(this.ESTADOLIQ)); 
          if (this.NROCOMP != null)
               cloned.setNROCOMP(new String(this.NROCOMP)); 
          return cloned;
      }



      /** 
       * getDaogenVersion will return information about
       * generator which created these sources.
       */
      public String getDaogenVersion() {
          return "DaoGen version 2.4.1";
      }

  }


