package modelo.datos.objetos.medidasCautelares;


import java.io.Serializable;

/**
  * JPendienteViewCT Value Object.
  * This class is value object representing database table J_PENDIENTE_VIEW
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class JPendienteViewCT implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int JP_ID;
    private String JTP_NOMBRE;
    private String DES_TPROCESO;
    private String JE_NOMBRE;
    private String NOMBRE;
    private String JP_FECHA;
    private String ID_VEHICULO;
    private String JP_DEMANDANTE;
    private String JP_ESTADO;


    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public JPendienteViewCT () {

    }

    public JPendienteViewCT (int JP_IDIn) {

          this.JP_ID = JP_IDIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getJP_ID() {
          return this.JP_ID;
    }
    public void setJP_ID(int JP_IDIn) {
          this.JP_ID = JP_IDIn;
    }

    public String getJTP_NOMBRE() {
          return this.JTP_NOMBRE;
    }
    public void setJTP_NOMBRE(String JTP_NOMBREIn) {
          this.JTP_NOMBRE = JTP_NOMBREIn;
    }

    public String getDES_TPROCESO() {
          return this.DES_TPROCESO;
    }
    public void setDES_TPROCESO(String DES_TPROCESOIn) {
          this.DES_TPROCESO = DES_TPROCESOIn;
    }

    public String getJE_NOMBRE() {
          return this.JE_NOMBRE;
    }
    public void setJE_NOMBRE(String JE_NOMBREIn) {
          this.JE_NOMBRE = JE_NOMBREIn;
    }

    public String getNOMBRE() {
          return this.NOMBRE;
    }
    public void setNOMBRE(String NOMBREIn) {
          this.NOMBRE = NOMBREIn;
    }

    public String getJP_FECHA() {
          return this.JP_FECHA;
    }
    public void setJP_FECHA(String JP_FECHAIn) {
          this.JP_FECHA = JP_FECHAIn;
    }

    public String getID_VEHICULO() {
          return this.ID_VEHICULO;
    }
    public void setID_VEHICULO(String ID_VEHICULOIn) {
          this.ID_VEHICULO = ID_VEHICULOIn;
    }
    public String getJP_DEMANDANTE() {
        return JP_DEMANDANTE;
    }

    public void setJP_DEMANDANTE(String JP_DEMANDANTE) {
        this.JP_DEMANDANTE = JP_DEMANDANTE;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int JP_IDIn,
          String JTP_NOMBREIn,
          String DES_TPROCESOIn,
          String JE_NOMBREIn,
          String NOMBREIn,
          String JP_FECHAIn,
          String ID_VEHICULOIn,
          String JP_DEMANDANTEIn) {
          this.JP_ID = JP_IDIn;
          this.JTP_NOMBRE = JTP_NOMBREIn;
          this.DES_TPROCESO = DES_TPROCESOIn;
          this.JE_NOMBRE = JE_NOMBREIn;
          this.NOMBRE = NOMBREIn;
          this.JP_FECHA = JP_FECHAIn;
          this.ID_VEHICULO = ID_VEHICULOIn;
          this.JP_DEMANDANTE = JP_DEMANDANTEIn;
    }


    /** 
     * hasEqualMapping-method will compare two JPendienteViewCT instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(JPendienteViewCT valueObject) {

          if (valueObject.getJP_ID() != this.JP_ID) {
                    return(false);
          }
          if (this.JTP_NOMBRE == null) {
                    if (valueObject.getJTP_NOMBRE() != null)
                           return(false);
          } else if (!this.JTP_NOMBRE.equals(valueObject.getJTP_NOMBRE())) {
                    return(false);
          }
          if (this.DES_TPROCESO == null) {
                    if (valueObject.getDES_TPROCESO() != null)
                           return(false);
          } else if (!this.DES_TPROCESO.equals(valueObject.getDES_TPROCESO())) {
                    return(false);
          }
          if (this.JE_NOMBRE == null) {
                    if (valueObject.getJE_NOMBRE() != null)
                           return(false);
          } else if (!this.JE_NOMBRE.equals(valueObject.getJE_NOMBRE())) {
                    return(false);
          }
          if (this.NOMBRE == null) {
                    if (valueObject.getNOMBRE() != null)
                           return(false);
          } else if (!this.NOMBRE.equals(valueObject.getNOMBRE())) {
                    return(false);
          }
          if (this.JP_FECHA == null) {
                    if (valueObject.getJP_FECHA() != null)
                           return(false);
          } else if (!this.JP_FECHA.equals(valueObject.getJP_FECHA())) {
                    return(false);
          }
          if (this.ID_VEHICULO == null) {
                    if (valueObject.getID_VEHICULO() != null)
                           return(false);
          } else if (!this.ID_VEHICULO.equals(valueObject.getID_VEHICULO())) {
                    return(false);
          }
          if (this.JP_DEMANDANTE == null) {
                    if (valueObject.getJP_DEMANDANTE() != null)
                           return(false);
          } else if (!this.JP_DEMANDANTE.equals(valueObject.getJP_DEMANDANTE())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass JPendienteViewCT, mapping to table J_PENDIENTE_VIEW\n");
        out.append("Persistent attributes: \n"); 
        out.append("JP_ID = " + this.JP_ID + "\n"); 
        out.append("JTP_NOMBRE = " + this.JTP_NOMBRE + "\n"); 
        out.append("DES_TPROCESO = " + this.DES_TPROCESO + "\n"); 
        out.append("JE_NOMBRE = " + this.JE_NOMBRE + "\n"); 
        out.append("NOMBRE = " + this.NOMBRE + "\n"); 
        out.append("JP_FECHA = " + this.JP_FECHA + "\n"); 
        out.append("ID_VEHICULO = " + this.ID_VEHICULO + "\n"); 
        out.append("JP_DEMANDANTE = " + this.JP_DEMANDANTE + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        JPendienteViewCT cloned = new JPendienteViewCT();

        cloned.setJP_ID(this.JP_ID); 
        if (this.JTP_NOMBRE != null)
             cloned.setJTP_NOMBRE(new String(this.JTP_NOMBRE)); 
        if (this.DES_TPROCESO != null)
             cloned.setDES_TPROCESO(new String(this.DES_TPROCESO)); 
        if (this.JE_NOMBRE != null)
             cloned.setJE_NOMBRE(new String(this.JE_NOMBRE)); 
        if (this.NOMBRE != null)
             cloned.setNOMBRE(new String(this.NOMBRE)); 
        if (this.JP_FECHA != null)
             cloned.setJP_FECHA(new String(this.JP_FECHA)); 
        if (this.ID_VEHICULO != null)
             cloned.setID_VEHICULO(new String(this.ID_VEHICULO)); 
        if (this.JP_DEMANDANTE != null)
             cloned.setJP_DEMANDANTE(new String(this.JP_DEMANDANTE)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

    public String getJP_ESTADO() {
        return JP_ESTADO;
    }

    public void setJP_ESTADO(String JP_ESTADO) {
        this.JP_ESTADO = JP_ESTADO;
    }
}

