package modelo.datos.objetos.transportepublico.cupos;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * ViewPropietariosCupoTrans Value Object.
  * This class is value object representing database table ViewPropietariosCupoTrans
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewPropietariosCupoTrans implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String BIDENTIFICACION;
    private String CNOMBRE;
    private String DFECHAREGISTRO;
    private int IDCUPO;
    private int ANUMCUPO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewPropietariosCupoTrans () {

    }

    public ViewPropietariosCupoTrans (String BIDENTIFICACIONIn) {

          this.BIDENTIFICACION = BIDENTIFICACIONIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getBIDENTIFICACION() {
          return this.BIDENTIFICACION;
    }
    public void setBIDENTIFICACION(String BIDENTIFICACIONIn) {
          this.BIDENTIFICACION = BIDENTIFICACIONIn;
    }

    public String getCNOMBRE() {
          return this.CNOMBRE;
    }
    public void setCNOMBRE(String CNOMBREIn) {
          this.CNOMBRE = CNOMBREIn;
    }

    public String getDFECHAREGISTRO() {
          return this.DFECHAREGISTRO;
    }
    public void setDFECHAREGISTRO(String DFECHAREGISTROIn) {
          this.DFECHAREGISTRO = DFECHAREGISTROIn;
    }

    public int getIDCUPO() {
          return this.IDCUPO;
    }
    public void setIDCUPO(int IDCUPOIn) {
          this.IDCUPO = IDCUPOIn;
    }

    public int getANUMCUPO() {
          return this.ANUMCUPO;
    }
    public void setANUMCUPO(int ANUMCUPOIn) {
          this.ANUMCUPO = ANUMCUPOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String BIDENTIFICACIONIn,
          String CNOMBREIn,
          String DFECHAREGISTROIn,
          int IDCUPOIn,
          int ANUMCUPOIn) {
          this.BIDENTIFICACION = BIDENTIFICACIONIn;
          this.CNOMBRE = CNOMBREIn;
          this.DFECHAREGISTRO = DFECHAREGISTROIn;
          this.IDCUPO = IDCUPOIn;
          this.ANUMCUPO = ANUMCUPOIn;
    }


    /** 
     * hasEqualMapping-method will compare two ViewPropietariosCupoTrans instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewPropietariosCupoTrans valueObject) {

          if (this.BIDENTIFICACION == null) {
                    if (valueObject.getBIDENTIFICACION() != null)
                           return(false);
          } else if (!this.BIDENTIFICACION.equals(valueObject.getBIDENTIFICACION())) {
                    return(false);
          }
          if (this.CNOMBRE == null) {
                    if (valueObject.getCNOMBRE() != null)
                           return(false);
          } else if (!this.CNOMBRE.equals(valueObject.getCNOMBRE())) {
                    return(false);
          }
          if (this.DFECHAREGISTRO == null) {
                    if (valueObject.getDFECHAREGISTRO() != null)
                           return(false);
          } else if (!this.DFECHAREGISTRO.equals(valueObject.getDFECHAREGISTRO())) {
                    return(false);
          }
          if (valueObject.getIDCUPO() != this.IDCUPO) {
                    return(false);
          }
          if (valueObject.getANUMCUPO() != this.ANUMCUPO) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewPropietariosCupoTrans, mapping to table ViewPropietariosCupoTrans\n");
        out.append("Persistent attributes: \n"); 
        out.append("BIDENTIFICACION = " + this.BIDENTIFICACION + "\n"); 
        out.append("CNOMBRE = " + this.CNOMBRE + "\n"); 
        out.append("DFECHAREGISTRO = " + this.DFECHAREGISTRO + "\n"); 
        out.append("IDCUPO = " + this.IDCUPO + "\n"); 
        out.append("ANUMCUPO = " + this.ANUMCUPO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewPropietariosCupoTrans cloned = new ViewPropietariosCupoTrans();

        if (this.BIDENTIFICACION != null)
             cloned.setBIDENTIFICACION(new String(this.BIDENTIFICACION)); 
        if (this.CNOMBRE != null)
             cloned.setCNOMBRE(new String(this.CNOMBRE)); 
        if (this.DFECHAREGISTRO != null)
             cloned.setDFECHAREGISTRO(new String(this.DFECHAREGISTRO)); 
        cloned.setIDCUPO(this.IDCUPO); 
        cloned.setANUMCUPO(this.ANUMCUPO); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}