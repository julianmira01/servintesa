package modelo.datos.objetos.transportepublico.tramites;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * TarjetaOperacion Value Object.
  * This class is value object representing database table TT_TARJETAOPERACION
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class TarjetaOperacion implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID;
    private int IDHISTORICOCUPO;
    private String FECHAVENCIMIENTO;
    private String ESTADO;
    private String NUMERO;
    private int IDCUPO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public TarjetaOperacion () {

    }

    public TarjetaOperacion (int IDIn) {

          this.ID = IDIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() {
          return this.ID;
    }
    public void setID(int IDIn) {
          this.ID = IDIn;
    }

    public int getIDHISTORICOCUPO() {
          return this.IDHISTORICOCUPO;
    }
    public void setIDHISTORICOCUPO(int IDHISTORICOCUPOIn) {
          this.IDHISTORICOCUPO = IDHISTORICOCUPOIn;
    }

    public String getFECHAVENCIMIENTO() {
          return this.FECHAVENCIMIENTO;
    }
    public void setFECHAVENCIMIENTO(String FECHAVENCIMIENTOIn) {
          this.FECHAVENCIMIENTO = FECHAVENCIMIENTOIn;
    }

    public String getESTADO() {
          return this.ESTADO;
    }
    public void setESTADO(String ESTADOIn) {
          this.ESTADO = ESTADOIn;
    }

    public String getNUMERO() {
          return this.NUMERO;
    }
    public void setNUMERO(String NUMEROIn) {
          this.NUMERO = NUMEROIn;
    }

    public int getIDCUPO() {
          return this.IDCUPO;
    }
    public void setIDCUPO(int IDCUPOIn) {
          this.IDCUPO = IDCUPOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDIn,
          int IDHISTORICOCUPOIn,
          String FECHAVENCIMIENTOIn,
          String ESTADOIn,
          String NUMEROIn,
          int IDCUPOIn) {
          this.ID = IDIn;
          this.IDHISTORICOCUPO = IDHISTORICOCUPOIn;
          this.FECHAVENCIMIENTO = FECHAVENCIMIENTOIn;
          this.ESTADO = ESTADOIn;
          this.NUMERO = NUMEROIn;
          this.IDCUPO = IDCUPOIn;
    }


    /** 
     * hasEqualMapping-method will compare two TarjetaOperacion instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(TarjetaOperacion valueObject) {

          if (valueObject.getID() != this.ID) {
                    return(false);
          }
          if (valueObject.getIDHISTORICOCUPO() != this.IDHISTORICOCUPO) {
                    return(false);
          }
          if (this.FECHAVENCIMIENTO == null) {
                    if (valueObject.getFECHAVENCIMIENTO() != null)
                           return(false);
          } else if (!this.FECHAVENCIMIENTO.equals(valueObject.getFECHAVENCIMIENTO())) {
                    return(false);
          }
          if (this.ESTADO == null) {
                    if (valueObject.getESTADO() != null)
                           return(false);
          } else if (!this.ESTADO.equals(valueObject.getESTADO())) {
                    return(false);
          }
          if (this.NUMERO == null) {
                    if (valueObject.getNUMERO() != null)
                           return(false);
          } else if (!this.NUMERO.equals(valueObject.getNUMERO())) {
                    return(false);
          }
          if (valueObject.getIDCUPO() != this.IDCUPO) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass TarjetaOperacion, mapping to table TT_TARJETAOPERACION\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID = " + this.ID + "\n"); 
        out.append("IDHISTORICOCUPO = " + this.IDHISTORICOCUPO + "\n"); 
        out.append("FECHAVENCIMIENTO = " + this.FECHAVENCIMIENTO + "\n"); 
        out.append("ESTADO = " + this.ESTADO + "\n"); 
        out.append("NUMERO = " + this.NUMERO + "\n"); 
        out.append("IDCUPO = " + this.IDCUPO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        TarjetaOperacion cloned = new TarjetaOperacion();

        cloned.setID(this.ID); 
        cloned.setIDHISTORICOCUPO(this.IDHISTORICOCUPO); 
        if (this.FECHAVENCIMIENTO != null)
             cloned.setFECHAVENCIMIENTO(new String(this.FECHAVENCIMIENTO)); 
        if (this.ESTADO != null)
             cloned.setESTADO(new String(this.ESTADO)); 
        if (this.NUMERO != null)
             cloned.setNUMERO(new String(this.NUMERO)); 
        cloned.setIDCUPO(this.IDCUPO); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
