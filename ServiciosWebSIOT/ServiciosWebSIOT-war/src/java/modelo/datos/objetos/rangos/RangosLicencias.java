package modelo.datos.objetos.rangos;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RangosLicencias Value Object.
  * This class is value object representing database table RANGOS_LICENCIAS
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RangosLicencias implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_RANGO;
    private int R_INICIAL;
    private int R_FINAL;
    private String FECHARESOLUCION;
    private String NUM_RESOLUCION;
    private int ID_ESPECIEVENAL;
    private int ULT_ASIGNADA;
    private int DISPONIBLES;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RangosLicencias () {

    }

    public RangosLicencias (int ID_RANGOIn) {

          this.ID_RANGO = ID_RANGOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_RANGO() {
          return this.ID_RANGO;
    }
    public void setID_RANGO(int ID_RANGOIn) {
          this.ID_RANGO = ID_RANGOIn;
    }

    public int getR_INICIAL() {
          return this.R_INICIAL;
    }
    public void setR_INICIAL(int R_INICIALIn) {
          this.R_INICIAL = R_INICIALIn;
    }

    public int getR_FINAL() {
          return this.R_FINAL;
    }
    public void setR_FINAL(int R_FINALIn) {
          this.R_FINAL = R_FINALIn;
    }

    public String getFECHARESOLUCION() {
          return this.FECHARESOLUCION;
    }
    public void setFECHARESOLUCION(String FECHARESOLUCIONIn) {
          this.FECHARESOLUCION = FECHARESOLUCIONIn;
    }

    public String getNUM_RESOLUCION() {
          return this.NUM_RESOLUCION;
    }
    public void setNUM_RESOLUCION(String NUM_RESOLUCIONIn) {
          this.NUM_RESOLUCION = NUM_RESOLUCIONIn;
    }

    public int getID_ESPECIEVENAL() {
          return this.ID_ESPECIEVENAL;
    }
    public void setID_ESPECIEVENAL(int ID_ESPECIEVENALIn) {
          this.ID_ESPECIEVENAL = ID_ESPECIEVENALIn;
    }

    public int getULT_ASIGNADA() {
          return this.ULT_ASIGNADA;
    }
    public void setULT_ASIGNADA(int ULT_ASIGNADAIn) {
          this.ULT_ASIGNADA = ULT_ASIGNADAIn;
    }

    public int getDISPONIBLES() {
          return this.DISPONIBLES;
    }
    public void setDISPONIBLES(int DISPONIBLESIn) {
          this.DISPONIBLES = DISPONIBLESIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_RANGOIn,
          int R_INICIALIn,
          int R_FINALIn,
          String FECHARESOLUCIONIn,
          String NUM_RESOLUCIONIn,
          int ID_ESPECIEVENALIn,
          int ULT_ASIGNADAIn,
          int DISPONIBLESIn) {
          this.ID_RANGO = ID_RANGOIn;
          this.R_INICIAL = R_INICIALIn;
          this.R_FINAL = R_FINALIn;
          this.FECHARESOLUCION = FECHARESOLUCIONIn;
          this.NUM_RESOLUCION = NUM_RESOLUCIONIn;
          this.ID_ESPECIEVENAL = ID_ESPECIEVENALIn;
          this.ULT_ASIGNADA = ULT_ASIGNADAIn;
          this.DISPONIBLES = DISPONIBLESIn;
    }


    /** 
     * hasEqualMapping-method will compare two RangosLicencias instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RangosLicencias valueObject) {

          if (valueObject.getID_RANGO() != this.ID_RANGO) {
                    return(false);
          }
          if (valueObject.getR_INICIAL() != this.R_INICIAL) {
                    return(false);
          }
          if (valueObject.getR_FINAL() != this.R_FINAL) {
                    return(false);
          }
          if (this.FECHARESOLUCION == null) {
                    if (valueObject.getFECHARESOLUCION() != null)
                           return(false);
          } else if (!this.FECHARESOLUCION.equals(valueObject.getFECHARESOLUCION())) {
                    return(false);
          }
          if (this.NUM_RESOLUCION == null) {
                    if (valueObject.getNUM_RESOLUCION() != null)
                           return(false);
          } else if (!this.NUM_RESOLUCION.equals(valueObject.getNUM_RESOLUCION())) {
                    return(false);
          }
          if (valueObject.getID_ESPECIEVENAL() != this.ID_ESPECIEVENAL) {
                    return(false);
          }
          if (valueObject.getULT_ASIGNADA() != this.ULT_ASIGNADA) {
                    return(false);
          }
          if (valueObject.getDISPONIBLES() != this.DISPONIBLES) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RangosLicencias, mapping to table RANGOS_LICENCIAS\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_RANGO = " + this.ID_RANGO + "\n"); 
        out.append("R_INICIAL = " + this.R_INICIAL + "\n"); 
        out.append("R_FINAL = " + this.R_FINAL + "\n"); 
        out.append("FECHARESOLUCION = " + this.FECHARESOLUCION + "\n"); 
        out.append("NUM_RESOLUCION = " + this.NUM_RESOLUCION + "\n"); 
        out.append("ID_ESPECIEVENAL = " + this.ID_ESPECIEVENAL + "\n"); 
        out.append("ULT_ASIGNADA = " + this.ULT_ASIGNADA + "\n"); 
        out.append("DISPONIBLES = " + this.DISPONIBLES + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RangosLicencias cloned = new RangosLicencias();

        cloned.setID_RANGO(this.ID_RANGO); 
        cloned.setR_INICIAL(this.R_INICIAL); 
        cloned.setR_FINAL(this.R_FINAL); 
        if (this.FECHARESOLUCION != null)
             cloned.setFECHARESOLUCION(new String(this.FECHARESOLUCION)); 
        if (this.NUM_RESOLUCION != null)
             cloned.setNUM_RESOLUCION(new String(this.NUM_RESOLUCION)); 
        cloned.setID_ESPECIEVENAL(this.ID_ESPECIEVENAL); 
        cloned.setULT_ASIGNADA(this.ULT_ASIGNADA); 
        cloned.setDISPONIBLES(this.DISPONIBLES); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
