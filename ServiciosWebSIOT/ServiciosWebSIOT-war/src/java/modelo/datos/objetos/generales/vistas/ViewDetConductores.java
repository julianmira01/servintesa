package modelo.datos.objetos.generales.vistas;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * ViewDetConductores Value Object.
  * This class is value object representing database table VIEW_DETCONDUCTORES
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewDetConductores implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDTRAM_INTERNO;
    private String CODTRAMITE;
    private int ID_COD_RUNT;
    private String DESCTRAMITE;
    private int LFD_LF_ID;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewDetConductores () {

    }

    public ViewDetConductores (int IDTRAM_INTERNOIn) {

          this.IDTRAM_INTERNO = IDTRAM_INTERNOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDTRAM_INTERNO() {
          return this.IDTRAM_INTERNO;
    }
    public void setIDTRAM_INTERNO(int IDTRAM_INTERNOIn) {
          this.IDTRAM_INTERNO = IDTRAM_INTERNOIn;
    }

    public String getCODTRAMITE() {
          return this.CODTRAMITE;
    }
    public void setCODTRAMITE(String CODTRAMITEIn) {
          this.CODTRAMITE = CODTRAMITEIn;
    }

    public int getID_COD_RUNT() {
          return this.ID_COD_RUNT;
    }
    public void setID_COD_RUNT(int ID_COD_RUNTIn) {
          this.ID_COD_RUNT = ID_COD_RUNTIn;
    }

    public String getDESCTRAMITE() {
          return this.DESCTRAMITE;
    }
    public void setDESCTRAMITE(String DESCTRAMITEIn) {
          this.DESCTRAMITE = DESCTRAMITEIn;
    }

    public int getLFD_LF_ID() {
          return this.LFD_LF_ID;
    }
    public void setLFD_LF_ID(int LFD_LF_IDIn) {
          this.LFD_LF_ID = LFD_LF_IDIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDTRAM_INTERNOIn,
          String CODTRAMITEIn,
          int ID_COD_RUNTIn,
          String DESCTRAMITEIn,
          int LFD_LF_IDIn) {
          this.IDTRAM_INTERNO = IDTRAM_INTERNOIn;
          this.CODTRAMITE = CODTRAMITEIn;
          this.ID_COD_RUNT = ID_COD_RUNTIn;
          this.DESCTRAMITE = DESCTRAMITEIn;
          this.LFD_LF_ID = LFD_LF_IDIn;
    }


    /** 
     * hasEqualMapping-method will compare two ViewDetConductores instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewDetConductores valueObject) {

          if (valueObject.getIDTRAM_INTERNO() != this.IDTRAM_INTERNO) {
                    return(false);
          }
          if (this.CODTRAMITE == null) {
                    if (valueObject.getCODTRAMITE() != null)
                           return(false);
          } else if (!this.CODTRAMITE.equals(valueObject.getCODTRAMITE())) {
                    return(false);
          }
          if (valueObject.getID_COD_RUNT() != this.ID_COD_RUNT) {
                    return(false);
          }
          if (this.DESCTRAMITE == null) {
                    if (valueObject.getDESCTRAMITE() != null)
                           return(false);
          } else if (!this.DESCTRAMITE.equals(valueObject.getDESCTRAMITE())) {
                    return(false);
          }
          if (valueObject.getLFD_LF_ID() != this.LFD_LF_ID) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewDetConductores, mapping to table VIEW_DETCONDUCTORES\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDTRAM_INTERNO = " + this.IDTRAM_INTERNO + "\n"); 
        out.append("CODTRAMITE = " + this.CODTRAMITE + "\n"); 
        out.append("ID_COD_RUNT = " + this.ID_COD_RUNT + "\n"); 
        out.append("DESCTRAMITE = " + this.DESCTRAMITE + "\n"); 
        out.append("LFD_LF_ID = " + this.LFD_LF_ID + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewDetConductores cloned = new ViewDetConductores();

        cloned.setIDTRAM_INTERNO(this.IDTRAM_INTERNO); 
        if (this.CODTRAMITE != null)
             cloned.setCODTRAMITE(new String(this.CODTRAMITE)); 
        cloned.setID_COD_RUNT(this.ID_COD_RUNT); 
        if (this.DESCTRAMITE != null)
             cloned.setDESCTRAMITE(new String(this.DESCTRAMITE)); 
        cloned.setLFD_LF_ID(this.LFD_LF_ID); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

