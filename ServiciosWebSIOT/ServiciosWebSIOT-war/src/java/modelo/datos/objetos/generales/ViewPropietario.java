package modelo.datos.objetos.generales;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * ViewPropietario Value Object.
  * This class is value object representing database table VIEW_PROPIETARIO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewPropietario implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_PROPIETARIO;
    private int ID_DUENO;
    private int ID_VEHICULO;
    private String EMPPER;
    private String PROPIETARIOACTUAL;
    private String NOMBRE;
    private String IDENTIFICACION;
    private String RAZONSOCIAL;
    private String NIT;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public ViewPropietario () {

    }

    public ViewPropietario (int ID_PROPIETARIOIn) {

          this.ID_PROPIETARIO = ID_PROPIETARIOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_PROPIETARIO() {
          return this.ID_PROPIETARIO;
    }
    public void setID_PROPIETARIO(int ID_PROPIETARIOIn) {
          this.ID_PROPIETARIO = ID_PROPIETARIOIn;
    }

    public int getID_DUENO() {
          return this.ID_DUENO;
    }
    public void setID_DUENO(int ID_DUENOIn) {
          this.ID_DUENO = ID_DUENOIn;
    }

    public int getID_VEHICULO() {
          return this.ID_VEHICULO;
    }
    public void setID_VEHICULO(int ID_VEHICULOIn) {
          this.ID_VEHICULO = ID_VEHICULOIn;
    }

    public String getEMPPER() {
          return this.EMPPER;
    }
    public void setEMPPER(String EMPPERIn) {
          this.EMPPER = EMPPERIn;
    }

    public String getPROPIETARIOACTUAL() {
          return this.PROPIETARIOACTUAL;
    }
    public void setPROPIETARIOACTUAL(String PROPIETARIOACTUALIn) {
          this.PROPIETARIOACTUAL = PROPIETARIOACTUALIn;
    }

    public String getNOMBRE() {
          return this.NOMBRE;
    }
    public void setNOMBRE(String NOMBREIn) {
          this.NOMBRE = NOMBREIn;
    }

    public String getIDENTIFICACION() {
        String id = null;
        if(this.IDENTIFICACION != null)
        {
            id=this.IDENTIFICACION;
            id=id.trim();
        }
        return id;
    }
    public void setIDENTIFICACION(String IDENTIFICACIONIn) {
          this.IDENTIFICACION = IDENTIFICACIONIn;
    }

    public String getRAZONSOCIAL() {
          return this.RAZONSOCIAL;
    }
    public void setRAZONSOCIAL(String RAZONSOCIALIn) {
          this.RAZONSOCIAL = RAZONSOCIALIn;
    }

    public String getNIT() {
          return this.NIT;
    }
    public void setNIT(String NITIn) {
          this.NIT = NITIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_PROPIETARIOIn,
          int ID_DUENOIn,
          int ID_VEHICULOIn,
          String EMPPERIn,
          String PROPIETARIOACTUALIn,
          String NOMBREIn,
          String IDENTIFICACIONIn,
          String RAZONSOCIALIn,
          String NITIn) {
          this.ID_PROPIETARIO = ID_PROPIETARIOIn;
          this.ID_DUENO = ID_DUENOIn;
          this.ID_VEHICULO = ID_VEHICULOIn;
          this.EMPPER = EMPPERIn;
          this.PROPIETARIOACTUAL = PROPIETARIOACTUALIn;
          this.NOMBRE = NOMBREIn;
          this.IDENTIFICACION = IDENTIFICACIONIn;
          this.RAZONSOCIAL = RAZONSOCIALIn;
          this.NIT = NITIn;
    }


    /** 
     * hasEqualMapping-method will compare two ViewPropietario instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(ViewPropietario valueObject) {

          if (valueObject.getID_PROPIETARIO() != this.ID_PROPIETARIO) {
                    return(false);
          }
          if (valueObject.getID_DUENO() != this.ID_DUENO) {
                    return(false);
          }
          if (valueObject.getID_VEHICULO() != this.ID_VEHICULO) {
                    return(false);
          }
          if (this.EMPPER == null) {
                    if (valueObject.getEMPPER() != null)
                           return(false);
          } else if (!this.EMPPER.equals(valueObject.getEMPPER())) {
                    return(false);
          }
          if (this.PROPIETARIOACTUAL == null) {
                    if (valueObject.getPROPIETARIOACTUAL() != null)
                           return(false);
          } else if (!this.PROPIETARIOACTUAL.equals(valueObject.getPROPIETARIOACTUAL())) {
                    return(false);
          }
          if (this.NOMBRE == null) {
                    if (valueObject.getNOMBRE() != null)
                           return(false);
          } else if (!this.NOMBRE.equals(valueObject.getNOMBRE())) {
                    return(false);
          }
          if (this.IDENTIFICACION == null) {
                    if (valueObject.getIDENTIFICACION() != null)
                           return(false);
          } else if (!this.IDENTIFICACION.equals(valueObject.getIDENTIFICACION())) {
                    return(false);
          }
          if (this.RAZONSOCIAL == null) {
                    if (valueObject.getRAZONSOCIAL() != null)
                           return(false);
          } else if (!this.RAZONSOCIAL.equals(valueObject.getRAZONSOCIAL())) {
                    return(false);
          }
          if (this.NIT == null) {
                    if (valueObject.getNIT() != null)
                           return(false);
          } else if (!this.NIT.equals(valueObject.getNIT())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass ViewPropietario, mapping to table VIEW_PROPIETARIO\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_PROPIETARIO = " + this.ID_PROPIETARIO + "\n"); 
        out.append("ID_DUENO = " + this.ID_DUENO + "\n"); 
        out.append("ID_VEHICULO = " + this.ID_VEHICULO + "\n"); 
        out.append("EMPPER = " + this.EMPPER + "\n"); 
        out.append("PROPIETARIOACTUAL = " + this.PROPIETARIOACTUAL + "\n"); 
        out.append("NOMBRE = " + this.NOMBRE + "\n"); 
        out.append("IDENTIFICACION = " + this.IDENTIFICACION + "\n"); 
        out.append("RAZONSOCIAL = " + this.RAZONSOCIAL + "\n"); 
        out.append("NIT = " + this.NIT + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        ViewPropietario cloned = new ViewPropietario();

        cloned.setID_PROPIETARIO(this.ID_PROPIETARIO); 
        cloned.setID_DUENO(this.ID_DUENO); 
        cloned.setID_VEHICULO(this.ID_VEHICULO); 
        if (this.EMPPER != null)
             cloned.setEMPPER(new String(this.EMPPER)); 
        if (this.PROPIETARIOACTUAL != null)
             cloned.setPROPIETARIOACTUAL(new String(this.PROPIETARIOACTUAL)); 
        if (this.NOMBRE != null)
             cloned.setNOMBRE(new String(this.NOMBRE)); 
        if (this.IDENTIFICACION != null)
             cloned.setIDENTIFICACION(new String(this.IDENTIFICACION)); 
        if (this.RAZONSOCIAL != null)
             cloned.setRAZONSOCIAL(new String(this.RAZONSOCIAL)); 
        if (this.NIT != null)
             cloned.setNIT(new String(this.NIT)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

