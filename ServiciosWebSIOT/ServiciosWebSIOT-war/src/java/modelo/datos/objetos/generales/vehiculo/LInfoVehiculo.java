package modelo.datos.objetos.generales.vehiculo;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * LInfoVehiculo Value Object.
  * This class is value object representing database table L_INFOVEHICULO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class LInfoVehiculo implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int LIV_V_ID;
    private String LIV_FECHA_REG;
    private int LIV_LCV_ID;
    private double LIV_SALDO;
    private String LIV_NOTA;
    private int LIV_VIGENCIA_PAGADA;
    private String LIV_FECHA_RTM;
    private int LIV_LML_ID;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public LInfoVehiculo () {

    }

    public LInfoVehiculo (int LIV_V_IDIn) {

          this.LIV_V_ID = LIV_V_IDIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getLIV_V_ID() {
          return this.LIV_V_ID;
    }
    public void setLIV_V_ID(int LIV_V_IDIn) {
          this.LIV_V_ID = LIV_V_IDIn;
    }

    public String getLIV_FECHA_REG() {
          return this.LIV_FECHA_REG;
    }
    public void setLIV_FECHA_REG(String LIV_FECHA_REGIn) {
          this.LIV_FECHA_REG = LIV_FECHA_REGIn;
    }

    public int getLIV_LCV_ID() {
          return this.LIV_LCV_ID;
    }
    public void setLIV_LCV_ID(int LIV_LCV_IDIn) {
          this.LIV_LCV_ID = LIV_LCV_IDIn;
    }

    public double getLIV_SALDO() {
          return this.LIV_SALDO;
    }
    public void setLIV_SALDO(double LIV_SALDOIn) {
          this.LIV_SALDO = LIV_SALDOIn;
    }

    public String getLIV_NOTA() {
          return this.LIV_NOTA;
    }
    public void setLIV_NOTA(String LIV_NOTAIn) {
          this.LIV_NOTA = LIV_NOTAIn;
    }

    public int getLIV_VIGENCIA_PAGADA() {
          return this.LIV_VIGENCIA_PAGADA;
    }
    public void setLIV_VIGENCIA_PAGADA(int LIV_VIGENCIA_PAGADAIn) {
          this.LIV_VIGENCIA_PAGADA = LIV_VIGENCIA_PAGADAIn;
    }

    public String getLIV_FECHA_RTM() {
          return this.LIV_FECHA_RTM;
    }
    public void setLIV_FECHA_RTM(String LIV_FECHA_RTMIn) {
          this.LIV_FECHA_RTM = LIV_FECHA_RTMIn;
    }

    public int getLIV_LML_ID() {
          return this.LIV_LML_ID;
    }
    public void setLIV_LML_ID(int LIV_LML_IDIn) {
          this.LIV_LML_ID = LIV_LML_IDIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int LIV_V_IDIn,
          String LIV_FECHA_REGIn,
          int LIV_LCV_IDIn,
          double LIV_SALDOIn,
          String LIV_NOTAIn,
          int LIV_VIGENCIA_PAGADAIn,
          String LIV_FECHA_RTMIn,
          int LIV_LML_IDIn) {
          this.LIV_V_ID = LIV_V_IDIn;
          this.LIV_FECHA_REG = LIV_FECHA_REGIn;
          this.LIV_LCV_ID = LIV_LCV_IDIn;
          this.LIV_SALDO = LIV_SALDOIn;
          this.LIV_NOTA = LIV_NOTAIn;
          this.LIV_VIGENCIA_PAGADA = LIV_VIGENCIA_PAGADAIn;
          this.LIV_FECHA_RTM = LIV_FECHA_RTMIn;
          this.LIV_LML_ID = LIV_LML_IDIn;
    }


    /** 
     * hasEqualMapping-method will compare two LInfoVehiculo instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(LInfoVehiculo valueObject) {

          if (valueObject.getLIV_V_ID() != this.LIV_V_ID) {
                    return(false);
          }
          if (this.LIV_FECHA_REG == null) {
                    if (valueObject.getLIV_FECHA_REG() != null)
                           return(false);
          } else if (!this.LIV_FECHA_REG.equals(valueObject.getLIV_FECHA_REG())) {
                    return(false);
          }
          if (valueObject.getLIV_LCV_ID() != this.LIV_LCV_ID) {
                    return(false);
          }
          if (valueObject.getLIV_SALDO() != this.LIV_SALDO) {
                    return(false);
          }
          if (this.LIV_NOTA == null) {
                    if (valueObject.getLIV_NOTA() != null)
                           return(false);
          } else if (!this.LIV_NOTA.equals(valueObject.getLIV_NOTA())) {
                    return(false);
          }
          if (valueObject.getLIV_VIGENCIA_PAGADA() != this.LIV_VIGENCIA_PAGADA) {
                    return(false);
          }
          if (this.LIV_FECHA_RTM == null) {
                    if (valueObject.getLIV_FECHA_RTM() != null)
                           return(false);
          } else if (!this.LIV_FECHA_RTM.equals(valueObject.getLIV_FECHA_RTM())) {
                    return(false);
          }
          if (valueObject.getLIV_LML_ID() != this.LIV_LML_ID) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass LInfoVehiculo, mapping to table L_INFOVEHICULO\n");
        out.append("Persistent attributes: \n"); 
        out.append("LIV_V_ID = " + this.LIV_V_ID + "\n"); 
        out.append("LIV_FECHA_REG = " + this.LIV_FECHA_REG + "\n"); 
        out.append("LIV_LCV_ID = " + this.LIV_LCV_ID + "\n"); 
        out.append("LIV_SALDO = " + this.LIV_SALDO + "\n"); 
        out.append("LIV_NOTA = " + this.LIV_NOTA + "\n"); 
        out.append("LIV_VIGENCIA_PAGADA = " + this.LIV_VIGENCIA_PAGADA + "\n"); 
        out.append("LIV_FECHA_RTM = " + this.LIV_FECHA_RTM + "\n"); 
        out.append("LIV_LML_ID = " + this.LIV_LML_ID + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        LInfoVehiculo cloned = new LInfoVehiculo();

        cloned.setLIV_V_ID(this.LIV_V_ID); 
        if (this.LIV_FECHA_REG != null)
             cloned.setLIV_FECHA_REG(new String(this.LIV_FECHA_REG)); 
        cloned.setLIV_LCV_ID(this.LIV_LCV_ID); 
        cloned.setLIV_SALDO(this.LIV_SALDO); 
        if (this.LIV_NOTA != null)
             cloned.setLIV_NOTA(new String(this.LIV_NOTA)); 
        cloned.setLIV_VIGENCIA_PAGADA(this.LIV_VIGENCIA_PAGADA); 
        if (this.LIV_FECHA_RTM != null)
             cloned.setLIV_FECHA_RTM(new String(this.LIV_FECHA_RTM)); 
        cloned.setLIV_LML_ID(this.LIV_LML_ID); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}