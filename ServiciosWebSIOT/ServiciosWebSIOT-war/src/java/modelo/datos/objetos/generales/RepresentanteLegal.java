package modelo.datos.objetos.generales;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RepresentanteLegal Value Object.
  * This class is value object representing database table REPRESENTANTELEGAL
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RepresentanteLegal implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_REPRESENTANTE;
    private int ID_EMPRESA;
    private String FECHAINICIAL;
    private String FECHAFINAL;
    private int ID_CIUDAD;
    private int CONSECUTIVO;
    private int ID_PERSONA;
    private String FECHAVIGENCIA;
    private String TIPO_CONTRATO;
    private String FECHAREGISTRO;
    private String COD_ESTADOREPRESENTACION;
    private String REPPRINCIPAL;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RepresentanteLegal () {

    }

    public RepresentanteLegal (int ID_REPRESENTANTEIn) {

          this.ID_REPRESENTANTE = ID_REPRESENTANTEIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_REPRESENTANTE() {
          return this.ID_REPRESENTANTE;
    }
    public void setID_REPRESENTANTE(int ID_REPRESENTANTEIn) {
          this.ID_REPRESENTANTE = ID_REPRESENTANTEIn;
    }

    public int getID_EMPRESA() {
          return this.ID_EMPRESA;
    }
    public void setID_EMPRESA(int ID_EMPRESAIn) {
          this.ID_EMPRESA = ID_EMPRESAIn;
    }

    public String getFECHAINICIAL() {
          return this.FECHAINICIAL;
    }
    public void setFECHAINICIAL(String FECHAINICIALIn) {
          this.FECHAINICIAL = FECHAINICIALIn;
    }

    public String getFECHAFINAL() {
          return this.FECHAFINAL;
    }
    public void setFECHAFINAL(String FECHAFINALIn) {
          this.FECHAFINAL = FECHAFINALIn;
    }

    public int getID_CIUDAD() {
          return this.ID_CIUDAD;
    }
    public void setID_CIUDAD(int ID_CIUDADIn) {
          this.ID_CIUDAD = ID_CIUDADIn;
    }

    public int getCONSECUTIVO() {
          return this.CONSECUTIVO;
    }
    public void setCONSECUTIVO(int CONSECUTIVOIn) {
          this.CONSECUTIVO = CONSECUTIVOIn;
    }

    public int getID_PERSONA() {
          return this.ID_PERSONA;
    }
    public void setID_PERSONA(int ID_PERSONAIn) {
          this.ID_PERSONA = ID_PERSONAIn;
    }

    public String getFECHAVIGENCIA() {
          return this.FECHAVIGENCIA;
    }
    public void setFECHAVIGENCIA(String FECHAVIGENCIAIn) {
          this.FECHAVIGENCIA = FECHAVIGENCIAIn;
    }

    public String getTIPO_CONTRATO() {
          return this.TIPO_CONTRATO;
    }
    public void setTIPO_CONTRATO(String TIPO_CONTRATOIn) {
          this.TIPO_CONTRATO = TIPO_CONTRATOIn;
    }

    public String getFECHAREGISTRO() {
          return this.FECHAREGISTRO;
    }
    public void setFECHAREGISTRO(String FECHAREGISTROIn) {
          this.FECHAREGISTRO = FECHAREGISTROIn;
    }

    public String getCOD_ESTADOREPRESENTACION() {
          return this.COD_ESTADOREPRESENTACION;
    }
    public void setCOD_ESTADOREPRESENTACION(String COD_ESTADOREPRESENTACIONIn) {
          this.COD_ESTADOREPRESENTACION = COD_ESTADOREPRESENTACIONIn;
    }

    public String getREPPRINCIPAL() {
          return this.REPPRINCIPAL;
    }
    public void setREPPRINCIPAL(String REPPRINCIPALIn) {
          this.REPPRINCIPAL = REPPRINCIPALIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_REPRESENTANTEIn,
          int ID_EMPRESAIn,
          String FECHAINICIALIn,
          String FECHAFINALIn,
          int ID_CIUDADIn,
          int CONSECUTIVOIn,
          int ID_PERSONAIn,
          String FECHAVIGENCIAIn,
          String TIPO_CONTRATOIn,
          String FECHAREGISTROIn,
          String COD_ESTADOREPRESENTACIONIn,
          String REPPRINCIPALIn) {
          this.ID_REPRESENTANTE = ID_REPRESENTANTEIn;
          this.ID_EMPRESA = ID_EMPRESAIn;
          this.FECHAINICIAL = FECHAINICIALIn;
          this.FECHAFINAL = FECHAFINALIn;
          this.ID_CIUDAD = ID_CIUDADIn;
          this.CONSECUTIVO = CONSECUTIVOIn;
          this.ID_PERSONA = ID_PERSONAIn;
          this.FECHAVIGENCIA = FECHAVIGENCIAIn;
          this.TIPO_CONTRATO = TIPO_CONTRATOIn;
          this.FECHAREGISTRO = FECHAREGISTROIn;
          this.COD_ESTADOREPRESENTACION = COD_ESTADOREPRESENTACIONIn;
          this.REPPRINCIPAL = REPPRINCIPALIn;
    }


    /** 
     * hasEqualMapping-method will compare two RepresentanteLegal instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RepresentanteLegal valueObject) {

          if (valueObject.getID_REPRESENTANTE() != this.ID_REPRESENTANTE) {
                    return(false);
          }
          if (valueObject.getID_EMPRESA() != this.ID_EMPRESA) {
                    return(false);
          }
          if (this.FECHAINICIAL == null) {
                    if (valueObject.getFECHAINICIAL() != null)
                           return(false);
          } else if (!this.FECHAINICIAL.equals(valueObject.getFECHAINICIAL())) {
                    return(false);
          }
          if (this.FECHAFINAL == null) {
                    if (valueObject.getFECHAFINAL() != null)
                           return(false);
          } else if (!this.FECHAFINAL.equals(valueObject.getFECHAFINAL())) {
                    return(false);
          }
          if (valueObject.getID_CIUDAD() != this.ID_CIUDAD) {
                    return(false);
          }
          if (valueObject.getCONSECUTIVO() != this.CONSECUTIVO) {
                    return(false);
          }
          if (valueObject.getID_PERSONA() != this.ID_PERSONA) {
                    return(false);
          }
          if (this.FECHAVIGENCIA == null) {
                    if (valueObject.getFECHAVIGENCIA() != null)
                           return(false);
          } else if (!this.FECHAVIGENCIA.equals(valueObject.getFECHAVIGENCIA())) {
                    return(false);
          }
          if (this.TIPO_CONTRATO == null) {
                    if (valueObject.getTIPO_CONTRATO() != null)
                           return(false);
          } else if (!this.TIPO_CONTRATO.equals(valueObject.getTIPO_CONTRATO())) {
                    return(false);
          }
          if (this.FECHAREGISTRO == null) {
                    if (valueObject.getFECHAREGISTRO() != null)
                           return(false);
          } else if (!this.FECHAREGISTRO.equals(valueObject.getFECHAREGISTRO())) {
                    return(false);
          }
          if (this.COD_ESTADOREPRESENTACION == null) {
                    if (valueObject.getCOD_ESTADOREPRESENTACION() != null)
                           return(false);
          } else if (!this.COD_ESTADOREPRESENTACION.equals(valueObject.getCOD_ESTADOREPRESENTACION())) {
                    return(false);
          }
          if (this.REPPRINCIPAL == null) {
                    if (valueObject.getREPPRINCIPAL() != null)
                           return(false);
          } else if (!this.REPPRINCIPAL.equals(valueObject.getREPPRINCIPAL())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RepresentanteLegal, mapping to table REPRESENTANTELEGAL\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_REPRESENTANTE = " + this.ID_REPRESENTANTE + "\n"); 
        out.append("ID_EMPRESA = " + this.ID_EMPRESA + "\n"); 
        out.append("FECHAINICIAL = " + this.FECHAINICIAL + "\n"); 
        out.append("FECHAFINAL = " + this.FECHAFINAL + "\n"); 
        out.append("ID_CIUDAD = " + this.ID_CIUDAD + "\n"); 
        out.append("CONSECUTIVO = " + this.CONSECUTIVO + "\n"); 
        out.append("ID_PERSONA = " + this.ID_PERSONA + "\n"); 
        out.append("FECHAVIGENCIA = " + this.FECHAVIGENCIA + "\n"); 
        out.append("TIPO_CONTRATO = " + this.TIPO_CONTRATO + "\n"); 
        out.append("FECHAREGISTRO = " + this.FECHAREGISTRO + "\n"); 
        out.append("COD_ESTADOREPRESENTACION = " + this.COD_ESTADOREPRESENTACION + "\n"); 
        out.append("REPPRINCIPAL = " + this.REPPRINCIPAL + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RepresentanteLegal cloned = new RepresentanteLegal();

        cloned.setID_REPRESENTANTE(this.ID_REPRESENTANTE); 
        cloned.setID_EMPRESA(this.ID_EMPRESA); 
        if (this.FECHAINICIAL != null)
             cloned.setFECHAINICIAL(new String(this.FECHAINICIAL)); 
        if (this.FECHAFINAL != null)
             cloned.setFECHAFINAL(new String(this.FECHAFINAL)); 
        cloned.setID_CIUDAD(this.ID_CIUDAD); 
        cloned.setCONSECUTIVO(this.CONSECUTIVO); 
        cloned.setID_PERSONA(this.ID_PERSONA); 
        if (this.FECHAVIGENCIA != null)
             cloned.setFECHAVIGENCIA(new String(this.FECHAVIGENCIA)); 
        if (this.TIPO_CONTRATO != null)
             cloned.setTIPO_CONTRATO(new String(this.TIPO_CONTRATO)); 
        if (this.FECHAREGISTRO != null)
             cloned.setFECHAREGISTRO(new String(this.FECHAREGISTRO)); 
        if (this.COD_ESTADOREPRESENTACION != null)
             cloned.setCOD_ESTADOREPRESENTACION(new String(this.COD_ESTADOREPRESENTACION)); 
        if (this.REPPRINCIPAL != null)
             cloned.setREPPRINCIPAL(new String(this.REPPRINCIPAL)); 
        return cloned;
    }
    
  



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}