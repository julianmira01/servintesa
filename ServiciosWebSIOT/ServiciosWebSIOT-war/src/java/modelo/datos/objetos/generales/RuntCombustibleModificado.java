package modelo.datos.objetos.generales;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RuntCombustibleModificado Value Object.
  * This class is value object representing database table RUNT_COMBUSTIBLEMODIFICADO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RuntCombustibleModificado implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_RUNTCOMBMODIFICADO;
    private int ID_COMBUSTIBLE;
    private String ESTADO;
    private String FECHAINICIO;
    private int ID_RUNTMODIFICACION;
    private String FECHAFIN;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RuntCombustibleModificado () {

    }

    public RuntCombustibleModificado (int ID_RUNTCOMBMODIFICADOIn) {

          this.ID_RUNTCOMBMODIFICADO = ID_RUNTCOMBMODIFICADOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_RUNTCOMBMODIFICADO() {
          return this.ID_RUNTCOMBMODIFICADO;
    }
    public void setID_RUNTCOMBMODIFICADO(int ID_RUNTCOMBMODIFICADOIn) {
          this.ID_RUNTCOMBMODIFICADO = ID_RUNTCOMBMODIFICADOIn;
    }

    public int getID_COMBUSTIBLE() {
          return this.ID_COMBUSTIBLE;
    }
    public void setID_COMBUSTIBLE(int ID_COMBUSTIBLEIn) {
          this.ID_COMBUSTIBLE = ID_COMBUSTIBLEIn;
    }

    public String getESTADO() {
          return this.ESTADO;
    }
    public void setESTADO(String ESTADOIn) {
          this.ESTADO = ESTADOIn;
    }

    public String getFECHAINICIO() {
          return this.FECHAINICIO;
    }
    public void setFECHAINICIO(String FECHAINICIOIn) {
          this.FECHAINICIO = FECHAINICIOIn;
    }

    public int getID_RUNTMODIFICACION() {
          return this.ID_RUNTMODIFICACION;
    }
    public void setID_RUNTMODIFICACION(int ID_RUNTMODIFICACIONIn) {
          this.ID_RUNTMODIFICACION = ID_RUNTMODIFICACIONIn;
    }

  public String getFECHAFIN() {
      return FECHAFIN;
  }

  public void setFECHAFIN(String FECHAFIN) {
      this.FECHAFIN = FECHAFIN;
  }

    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_RUNTCOMBMODIFICADOIn,
          int ID_COMBUSTIBLEIn,
          String ESTADOIn,
          String FECHAINICIOIn,
          int ID_RUNTMODIFICACIONIn,
          String FECHAFINIn) {
          this.ID_RUNTCOMBMODIFICADO = ID_RUNTCOMBMODIFICADOIn;
          this.ID_COMBUSTIBLE = ID_COMBUSTIBLEIn;
          this.ESTADO = ESTADOIn;
          this.FECHAINICIO = FECHAINICIOIn;
          this.ID_RUNTMODIFICACION = ID_RUNTMODIFICACIONIn;
          this.FECHAFIN = FECHAFINIn;
    }


    /** 
     * hasEqualMapping-method will compare two RuntCombustibleModificado instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RuntCombustibleModificado valueObject) {

          if (valueObject.getID_RUNTCOMBMODIFICADO() != this.ID_RUNTCOMBMODIFICADO) {
                    return(false);
          }
          if (valueObject.getID_COMBUSTIBLE() != this.ID_COMBUSTIBLE) {
                    return(false);
          }
          if (this.ESTADO == null) {
                    if (valueObject.getESTADO() != null)
                           return(false);
          } else if (!this.ESTADO.equals(valueObject.getESTADO())) {
                    return(false);
          }
          if (this.FECHAINICIO == null) {
                    if (valueObject.getFECHAINICIO() != null)
                           return(false);
          } else if (!this.FECHAINICIO.equals(valueObject.getFECHAINICIO())) {
                    return(false);
          }
          if (valueObject.getID_RUNTMODIFICACION() != this.ID_RUNTMODIFICACION) {
                    return(false);
          }
          if (this.FECHAFIN== null) {
                    if (valueObject.getFECHAFIN() != null)
                           return(false);
          } else if (!this.FECHAFIN.equals(valueObject.getFECHAFIN())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RuntCombustibleModificado, mapping to table RUNT_COMBUSTIBLEMODIFICADO\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_RUNTCOMBMODIFICADO = " + this.ID_RUNTCOMBMODIFICADO + "\n"); 
        out.append("ID_COMBUSTIBLE = " + this.ID_COMBUSTIBLE + "\n"); 
        out.append("ESTADO = " + this.ESTADO + "\n"); 
        out.append("FECHAINICIO = " + this.FECHAINICIO + "\n"); 
        out.append("ID_RUNTMODIFICACION = " + this.ID_RUNTMODIFICACION + "\n"); 
        out.append("FECHAFIN = " + this.FECHAFIN + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RuntCombustibleModificado cloned = new RuntCombustibleModificado();

        cloned.setID_RUNTCOMBMODIFICADO(this.ID_RUNTCOMBMODIFICADO); 
        cloned.setID_COMBUSTIBLE(this.ID_COMBUSTIBLE); 
        if (this.ESTADO != null)
             cloned.setESTADO(new String(this.ESTADO)); 
        if (this.FECHAINICIO != null)
             cloned.setFECHAINICIO(new String(this.FECHAINICIO)); 
        cloned.setID_RUNTMODIFICACION(this.ID_RUNTMODIFICACION); 
        if (this.FECHAFIN != null)
           cloned.setFECHAFIN(new String(this.FECHAFIN)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

  
}
