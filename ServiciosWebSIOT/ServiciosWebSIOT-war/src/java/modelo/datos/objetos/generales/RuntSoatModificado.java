package modelo.datos.objetos.generales;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RuntSoatModificado Value Object.
  * This class is value object representing database table RUNT_SOATMODIFICADO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RuntSoatModificado implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_RUNTSOATMODIFICADO;
    private int ID_RUNTMODIFICACION;
    private String NUMEROSOAT;
    private String FECHAEXPEDICION;
    private String FECHAVENCIMIENTO;
    private int ID_ASEGURADORA;




    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RuntSoatModificado () {

    }

    public RuntSoatModificado (int ID_RUNTSOATMODIFICADOIn) {

          this.ID_RUNTSOATMODIFICADO = ID_RUNTSOATMODIFICADOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_RUNTSOATMODIFICADO() {
          return this.ID_RUNTSOATMODIFICADO;
    }
    public void setID_RUNTSOATMODIFICADO(int ID_RUNTSOATMODIFICADOIn) {
          this.ID_RUNTSOATMODIFICADO = ID_RUNTSOATMODIFICADOIn;
    }

    public int getID_RUNTMODIFICACION() {
          return this.ID_RUNTMODIFICACION;
    }
    public void setID_RUNTMODIFICACION(int ID_RUNTMODIFICACIONIn) {
          this.ID_RUNTMODIFICACION = ID_RUNTMODIFICACIONIn;
    }

    public String getNUMEROSOAT() {
          return this.NUMEROSOAT;
    }
    public void setNUMEROSOAT(String NUMEROSOATIn) {
          this.NUMEROSOAT = NUMEROSOATIn;
    }

    public String getFECHAEXPEDICION() {
          return this.FECHAEXPEDICION;
    }
    public void setFECHAEXPEDICION(String FECHAEXPEDICIONIn) {
          this.FECHAEXPEDICION = FECHAEXPEDICIONIn;
    }

    public String getFECHAVENCIMIENTO() {
          return this.FECHAVENCIMIENTO;
    }
    public void setFECHAVENCIMIENTO(String FECHAVENCIMIENTOIn) {
          this.FECHAVENCIMIENTO = FECHAVENCIMIENTOIn;
    }

    public int getID_ASEGURADORA() {
          return this.ID_ASEGURADORA;
    }
    public void setID_ASEGURADORA(int ID_ASEGURADORAIn) {
          this.ID_ASEGURADORA = ID_ASEGURADORAIn;
    }

   



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_RUNTSOATMODIFICADOIn,
          int ID_RUNTMODIFICACIONIn,
          String NUMEROSOATIn,
          String FECHAEXPEDICIONIn,
          String FECHAVENCIMIENTOIn,
          int ID_ASEGURADORAIn) {
          this.ID_RUNTSOATMODIFICADO = ID_RUNTSOATMODIFICADOIn;
          this.ID_RUNTMODIFICACION = ID_RUNTMODIFICACIONIn;
          this.NUMEROSOAT = NUMEROSOATIn;
          this.FECHAEXPEDICION = FECHAEXPEDICIONIn;
          this.FECHAVENCIMIENTO = FECHAVENCIMIENTOIn;
          this.ID_ASEGURADORA = ID_ASEGURADORAIn;
        
    }


    /** 
     * hasEqualMapping-method will compare two RuntSoatModificado instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RuntSoatModificado valueObject) {

          if (valueObject.getID_RUNTSOATMODIFICADO() != this.ID_RUNTSOATMODIFICADO) {
                    return(false);
          }
          if (valueObject.getID_RUNTMODIFICACION() != this.ID_RUNTMODIFICACION) {
                    return(false);
          }
          if (this.NUMEROSOAT == null) {
                    if (valueObject.getNUMEROSOAT() != null)
                           return(false);
          } else if (!this.NUMEROSOAT.equals(valueObject.getNUMEROSOAT())) {
                    return(false);
          }
          if (this.FECHAEXPEDICION == null) {
                    if (valueObject.getFECHAEXPEDICION() != null)
                           return(false);
          } else if (!this.FECHAEXPEDICION.equals(valueObject.getFECHAEXPEDICION())) {
                    return(false);
          }
          if (this.FECHAVENCIMIENTO == null) {
                    if (valueObject.getFECHAVENCIMIENTO() != null)
                           return(false);
          } else if (!this.FECHAVENCIMIENTO.equals(valueObject.getFECHAVENCIMIENTO())) {
                    return(false);
          }
          if (valueObject.getID_ASEGURADORA() != this.ID_ASEGURADORA) {
              return(false);
          }
          
          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RuntSoatModificado, mapping to table RUNT_SOATMODIFICADO\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_RUNTSOATMODIFICADO = " + this.ID_RUNTSOATMODIFICADO + "\n"); 
        out.append("ID_RUNTMODIFICACION = " + this.ID_RUNTMODIFICACION + "\n"); 
        out.append("NUMEROSOAT = " + this.NUMEROSOAT + "\n"); 
        out.append("FECHAEXPEDICION = " + this.FECHAEXPEDICION + "\n"); 
        out.append("FECHAVENCIMIENTO = " + this.FECHAVENCIMIENTO + "\n"); 
        out.append("ID_ASEGURADORA = " + this.ID_ASEGURADORA + "\n"); 
        
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RuntSoatModificado cloned = new RuntSoatModificado();

        cloned.setID_RUNTSOATMODIFICADO(this.ID_RUNTSOATMODIFICADO); 
        cloned.setID_RUNTMODIFICACION(this.ID_RUNTMODIFICACION); 
        if (this.NUMEROSOAT != null)
             cloned.setNUMEROSOAT(new String(this.NUMEROSOAT)); 
        if (this.FECHAEXPEDICION != null)
             cloned.setFECHAEXPEDICION(new String(this.FECHAEXPEDICION)); 
        if (this.FECHAVENCIMIENTO != null)
             cloned.setFECHAVENCIMIENTO(new String(this.FECHAVENCIMIENTO)); 
        cloned.setID_ASEGURADORA(this.ID_ASEGURADORA); 
        
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
