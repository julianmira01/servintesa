package modelo.datos.objetos.generales;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RuntRTMModificada Value Object.
  * This class is value object representing database table RUNT_RTMMODIFICADA
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RuntRTMModificada implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_RUNTRTMMODIFICADA;
    private int ID_RUNTMODIFICACION;
    private String NUMERORTM;
    private String FECHAREVISION;
    private String ESTADO;
    private String CDA;
    private String ID_DOCTO;
    private String IDENTIFICACION;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RuntRTMModificada () {

    }

    public RuntRTMModificada (int ID_RUNTRTMMODIFICADAIn) {

          this.ID_RUNTRTMMODIFICADA = ID_RUNTRTMMODIFICADAIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_RUNTRTMMODIFICADA() {
          return this.ID_RUNTRTMMODIFICADA;
    }
    public void setID_RUNTRTMMODIFICADA(int ID_RUNTRTMMODIFICADAIn) {
          this.ID_RUNTRTMMODIFICADA = ID_RUNTRTMMODIFICADAIn;
    }

    public int getID_RUNTMODIFICACION() {
          return this.ID_RUNTMODIFICACION;
    }
    public void setID_RUNTMODIFICACION(int ID_RUNTMODIFICACIONIn) {
          this.ID_RUNTMODIFICACION = ID_RUNTMODIFICACIONIn;
    }

    public String getNUMERORTM() {
          return this.NUMERORTM;
    }
    public void setNUMERORTM(String NUMERORTMIn) {
          this.NUMERORTM = NUMERORTMIn;
    }

    public String getFECHAREVISION() {
          return this.FECHAREVISION;
    }
    public void setFECHAREVISION(String FECHAREVISIONIn) {
          this.FECHAREVISION = FECHAREVISIONIn;
    }

    public String getESTADO() {
          return this.ESTADO;
    }
    public void setESTADO(String ESTADOIn) {
          this.ESTADO = ESTADOIn;
    }

    public String getCDA() {
          return this.CDA;
    }
    public void setCDA(String CDAIn) {
          this.CDA = CDAIn;
    }

    public String getID_DOCTO() {
          return this.ID_DOCTO;
    }
    public void setID_DOCTO(String ID_DOCTOIn) {
          this.ID_DOCTO = ID_DOCTOIn;
    }

    public String getIDENTIFICACION() {
          return this.IDENTIFICACION;
    }
    public void setIDENTIFICACION(String IDENTIFICACIONIn) {
          this.IDENTIFICACION = IDENTIFICACIONIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_RUNTRTMMODIFICADAIn,
          int ID_RUNTMODIFICACIONIn,
          String NUMERORTMIn,
          String FECHAREVISIONIn,
          String ESTADOIn,
          String CDAIn,
          String ID_DOCTOIn,
          String IDENTIFICACIONIn) {
          this.ID_RUNTRTMMODIFICADA = ID_RUNTRTMMODIFICADAIn;
          this.ID_RUNTMODIFICACION = ID_RUNTMODIFICACIONIn;
          this.NUMERORTM = NUMERORTMIn;
          this.FECHAREVISION = FECHAREVISIONIn;
          this.ESTADO = ESTADOIn;
          this.CDA = CDAIn;
          this.ID_DOCTO = ID_DOCTOIn;
          this.IDENTIFICACION = IDENTIFICACIONIn;
    }


    /** 
     * hasEqualMapping-method will compare two RuntRTMModificada instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RuntRTMModificada valueObject) {

          if (valueObject.getID_RUNTRTMMODIFICADA() != this.ID_RUNTRTMMODIFICADA) {
                    return(false);
          }
          if (valueObject.getID_RUNTMODIFICACION() != this.ID_RUNTMODIFICACION) {
                    return(false);
          }
          if (this.NUMERORTM == null) {
                    if (valueObject.getNUMERORTM() != null)
                           return(false);
          } else if (!this.NUMERORTM.equals(valueObject.getNUMERORTM())) {
                    return(false);
          }
          if (this.FECHAREVISION == null) {
                    if (valueObject.getFECHAREVISION() != null)
                           return(false);
          } else if (!this.FECHAREVISION.equals(valueObject.getFECHAREVISION())) {
                    return(false);
          }
          if (this.ESTADO == null) {
                    if (valueObject.getESTADO() != null)
                           return(false);
          } else if (!this.ESTADO.equals(valueObject.getESTADO())) {
                    return(false);
          }
          if (this.CDA == null) {
                    if (valueObject.getCDA() != null)
                           return(false);
          } else if (!this.CDA.equals(valueObject.getCDA())) {
                    return(false);
          }
          if (this.ID_DOCTO == null) {
                    if (valueObject.getID_DOCTO() != null)
                           return(false);
          } else if (!this.ID_DOCTO.equals(valueObject.getID_DOCTO())) {
                    return(false);
          }
          if (this.IDENTIFICACION == null) {
                    if (valueObject.getIDENTIFICACION() != null)
                           return(false);
          } else if (!this.IDENTIFICACION.equals(valueObject.getIDENTIFICACION())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RuntRTMModificada, mapping to table RUNT_RTMMODIFICADA\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_RUNTRTMMODIFICADA = " + this.ID_RUNTRTMMODIFICADA + "\n"); 
        out.append("ID_RUNTMODIFICACION = " + this.ID_RUNTMODIFICACION + "\n"); 
        out.append("NUMERORTM = " + this.NUMERORTM + "\n"); 
        out.append("FECHAREVISION = " + this.FECHAREVISION + "\n"); 
        out.append("ESTADO = " + this.ESTADO + "\n"); 
        out.append("CDA = " + this.CDA + "\n"); 
        out.append("ID_DOCTO = " + this.ID_DOCTO + "\n"); 
        out.append("IDENTIFICACION = " + this.IDENTIFICACION + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RuntRTMModificada cloned = new RuntRTMModificada();

        cloned.setID_RUNTRTMMODIFICADA(this.ID_RUNTRTMMODIFICADA); 
        cloned.setID_RUNTMODIFICACION(this.ID_RUNTMODIFICACION); 
        if (this.NUMERORTM != null)
             cloned.setNUMERORTM(new String(this.NUMERORTM)); 
        if (this.FECHAREVISION != null)
             cloned.setFECHAREVISION(new String(this.FECHAREVISION)); 
        if (this.ESTADO != null)
             cloned.setESTADO(new String(this.ESTADO)); 
        if (this.CDA != null)
             cloned.setCDA(new String(this.CDA)); 
        if (this.ID_DOCTO != null)
             cloned.setID_DOCTO(new String(this.ID_DOCTO)); 
        if (this.IDENTIFICACION != null)
             cloned.setIDENTIFICACION(new String(this.IDENTIFICACION)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
