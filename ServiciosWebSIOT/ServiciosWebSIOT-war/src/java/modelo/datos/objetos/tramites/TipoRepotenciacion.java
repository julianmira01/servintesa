package modelo.datos.objetos.tramites;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * TipoRepotenciacion Value Object.
  * This class is value object representing database table TIPOREPOTENCIACION
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class TipoRepotenciacion implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int IDTIP_REPOT;
    private String COD_TIPOREPOT;
    private String DESCRIP_REPOT;
    private String IDREPORUNT;
    private String REPOTENCIACIONRUNT;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public TipoRepotenciacion () {

    }

    public TipoRepotenciacion (int IDTIP_REPOTIn) {

          this.IDTIP_REPOT = IDTIP_REPOTIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getIDTIP_REPOT() {
          return this.IDTIP_REPOT;
    }
    public void setIDTIP_REPOT(int IDTIP_REPOTIn) {
          this.IDTIP_REPOT = IDTIP_REPOTIn;
    }

    public String getCOD_TIPOREPOT() {
          return this.COD_TIPOREPOT;
    }
    public void setCOD_TIPOREPOT(String COD_TIPOREPOTIn) {
          this.COD_TIPOREPOT = COD_TIPOREPOTIn;
    }

    public String getDESCRIP_REPOT() {
          return this.DESCRIP_REPOT;
    }
    public void setDESCRIP_REPOT(String DESCRIP_REPOTIn) {
          this.DESCRIP_REPOT = DESCRIP_REPOTIn;
    }

    public String getIDREPORUNT() {
          return this.IDREPORUNT;
    }
    public void setIDREPORUNT(String IDREPORUNTIn) {
          this.IDREPORUNT = IDREPORUNTIn;
    }

    public String getREPOTENCIACIONRUNT() {
          return this.REPOTENCIACIONRUNT;
    }
    public void setREPOTENCIACIONRUNT(String REPOTENCIACIONRUNTIn) {
          this.REPOTENCIACIONRUNT = REPOTENCIACIONRUNTIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int IDTIP_REPOTIn,
          String COD_TIPOREPOTIn,
          String DESCRIP_REPOTIn,
          String IDREPORUNTIn,
          String REPOTENCIACIONRUNTIn) {
          this.IDTIP_REPOT = IDTIP_REPOTIn;
          this.COD_TIPOREPOT = COD_TIPOREPOTIn;
          this.DESCRIP_REPOT = DESCRIP_REPOTIn;
          this.IDREPORUNT = IDREPORUNTIn;
          this.REPOTENCIACIONRUNT = REPOTENCIACIONRUNTIn;
    }


    /** 
     * hasEqualMapping-method will compare two TipoRepotenciacion instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(TipoRepotenciacion valueObject) {

          if (valueObject.getIDTIP_REPOT() != this.IDTIP_REPOT) {
                    return(false);
          }
          if (this.COD_TIPOREPOT == null) {
                    if (valueObject.getCOD_TIPOREPOT() != null)
                           return(false);
          } else if (!this.COD_TIPOREPOT.equals(valueObject.getCOD_TIPOREPOT())) {
                    return(false);
          }
          if (this.DESCRIP_REPOT == null) {
                    if (valueObject.getDESCRIP_REPOT() != null)
                           return(false);
          } else if (!this.DESCRIP_REPOT.equals(valueObject.getDESCRIP_REPOT())) {
                    return(false);
          }
          if (this.IDREPORUNT == null) {
                    if (valueObject.getIDREPORUNT() != null)
                           return(false);
          } else if (!this.IDREPORUNT.equals(valueObject.getIDREPORUNT())) {
                    return(false);
          }
          if (this.REPOTENCIACIONRUNT == null) {
                    if (valueObject.getREPOTENCIACIONRUNT() != null)
                           return(false);
          } else if (!this.REPOTENCIACIONRUNT.equals(valueObject.getREPOTENCIACIONRUNT())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass TipoRepotenciacion, mapping to table TIPOREPOTENCIACION\n");
        out.append("Persistent attributes: \n"); 
        out.append("IDTIP_REPOT = " + this.IDTIP_REPOT + "\n"); 
        out.append("COD_TIPOREPOT = " + this.COD_TIPOREPOT + "\n"); 
        out.append("DESCRIP_REPOT = " + this.DESCRIP_REPOT + "\n"); 
        out.append("IDREPORUNT = " + this.IDREPORUNT + "\n"); 
        out.append("REPOTENCIACIONRUNT = " + this.REPOTENCIACIONRUNT + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        TipoRepotenciacion cloned = new TipoRepotenciacion();

        cloned.setIDTIP_REPOT(this.IDTIP_REPOT); 
        if (this.COD_TIPOREPOT != null)
             cloned.setCOD_TIPOREPOT(new String(this.COD_TIPOREPOT)); 
        if (this.DESCRIP_REPOT != null)
             cloned.setDESCRIP_REPOT(new String(this.DESCRIP_REPOT)); 
        if (this.IDREPORUNT != null)
             cloned.setIDREPORUNT(new String(this.IDREPORUNT)); 
        if (this.REPOTENCIACIONRUNT != null)
             cloned.setREPOTENCIACIONRUNT(new String(this.REPOTENCIACIONRUNT)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}