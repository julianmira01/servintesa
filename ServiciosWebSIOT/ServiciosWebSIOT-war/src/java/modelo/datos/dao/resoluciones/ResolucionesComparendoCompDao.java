package modelo.datos.dao.resoluciones;
import java.sql.*;
import java.util.*;
import java.math.*;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.resoluciones.ResolucionesComparendoComp;

import utilidades.Funciones;


/**
  * ResolucionesComparendoComp Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve ResolucionesComparendoComp object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ResolucionesComparendoCompDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public ResolucionesComparendoComp createValueObject() {
          return new ResolucionesComparendoComp();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public ResolucionesComparendoComp getObject(Connection conn, int ID) throws NotFoundException, SQLException {

          ResolucionesComparendoComp valueObject = createValueObject();
          valueObject.setID(ID);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, ResolucionesComparendoComp valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM RESOLUCIONESCOMPARENDO WHERE (ID = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getID()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM RESOLUCIONESCOMPARENDO ORDER BY ID ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, ResolucionesComparendoComp valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO RESOLUCIONESCOMPARENDO ( ID, FECHA, NUMERO, "
               + "ID_TIPORESOLUCION, CONTENIDO, FECHAREGISTRO, "
               + "FECHAAUDIENCIA, MOTIVO, NOMBRE, "
               + "IDUSUARIO, CONSIDERACIONJURIDICA, TIEMPOSUSPENSIONLIC, ACCION_ALCOHOLEMIA, MOTIVORESOLUCION, HECHOS, SOLICITUDRESOLUCION, HORAS_COMUNITARIAS, GRADO_ALCOHOLEMIA, VALOR_PAGAR "
                       + ",VALOR_INFRACCION,CODIGO_INFRACCION,POLCA,FOTOMULTA,VALORES_ADICIONALES,VALOR_TOTAL,RESOLUCION_ANTERIOR) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?) ";
               stmt = conn.prepareStatement(sql);

               stmt.setInt(1, valueObject.getID());
               if(Funciones.esFecha(valueObject.getFECHA()))
                 stmt.setDate(2, Funciones.convFechaSSQL(valueObject.getFECHA())); 
               else
                stmt.setNull(2,Types.DATE);
               if(Funciones.contarCadena(valueObject.getNUMERO(), 10))
                 stmt.setString(3, valueObject.getNUMERO()); 
               else
                 stmt.setNull(3, Types.VARCHAR);
               if(!Funciones.EnteroesNulo(valueObject.getID_TIPORESOLUCION()))
                stmt.setInt(4, valueObject.getID_TIPORESOLUCION()); 
               else
                stmt.setNull(4, Types.INTEGER);
               if(Funciones.contarCadena(valueObject.getCONTENIDO(), 4000))
                 stmt.setString(5, valueObject.getCONTENIDO()); 
               else
                 stmt.setNull(5, Types.VARCHAR);
               if(Funciones.esFecha(valueObject.getFECHAREGISTRO()))
                 stmt.setDate(6, Funciones.convFechaSSQL(valueObject.getFECHAREGISTRO())); 
               else
                 stmt.setNull(6,Types.DATE);
               if(Funciones.esFecha(valueObject.getFECHAAUDIENCIA()))
                 stmt.setDate(7, Funciones.convFechaSSQL(valueObject.getFECHAAUDIENCIA())); 
               else
                 stmt.setNull(7,Types.DATE);
               if(Funciones.contarCadena(valueObject.getMOTIVO(), 500))
                 stmt.setString(8, valueObject.getMOTIVO()); 
               else
                 stmt.setNull(8, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getNOMBRE(), 300))
                 stmt.setString(9, valueObject.getNOMBRE()); 
               else
                 stmt.setNull(9, Types.VARCHAR);
               if(!Funciones.EnteroesNulo(valueObject.getIDUSUARIO()))
                 stmt.setInt(10, valueObject.getIDUSUARIO()); 
               else
                 stmt.setNull(10, Types.INTEGER);
               if(Funciones.contarCadena(valueObject.getCONSIDERACIONJURIDICA(),1000))
                 stmt.setString(11, valueObject.getCONSIDERACIONJURIDICA()); 
               else
                 stmt.setNull(11, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getMOTIVORESOLUCION(), 500))
                stmt.setString(12, valueObject.getMOTIVORESOLUCION()); 
              else
                stmt.setNull(12, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getHECHOS(), 500))
                stmt.setString(13, valueObject.getMOTIVO()); 
              else
                stmt.setNull(13, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getSOLICITUDRESOLUCION(), 500))
                stmt.setString(14, valueObject.getMOTIVO()); 
              else
                stmt.setNull(14, Types.VARCHAR);
              if(!Funciones.EnteroesNulo(valueObject.getTIEMPOSUSPENSIONLIC()))
                 stmt.setInt(15, valueObject.getTIEMPOSUSPENSIONLIC()); 
               else
                 stmt.setNull(15, Types.INTEGER);
              if(!Funciones.EnteroesNulo(valueObject.getACCION_ALCOHOLEMIA()))
                 stmt.setInt(16, valueObject.getACCION_ALCOHOLEMIA()); 
               else
                 stmt.setNull(16, Types.INTEGER);
              if(Funciones.contarCadena(valueObject.getHORAS_COMUNITARIAS(), 500))
                stmt.setString(17, valueObject.getHORAS_COMUNITARIAS()); 
              else
                stmt.setNull(17, Types.VARCHAR);
              if(Funciones.FloatEsNulo(valueObject.getGRADO_ALCOHOLEMIA()))
                stmt.setFloat(18, valueObject.getGRADO_ALCOHOLEMIA()); 
              else
                stmt.setNull(18, Types.FLOAT);
              if(Funciones.DoubleEsNulo(valueObject.getVALOR_PAGAR()))
                stmt.setDouble(19, valueObject.getVALOR_PAGAR()); 
              else
                stmt.setNull(19, Types.DOUBLE);
              if(Funciones.DoubleEsNulo(valueObject.getVALOR_INFRACCION()))
                stmt.setDouble(20, valueObject.getVALOR_INFRACCION()); 
              else
                stmt.setNull(20, Types.DOUBLE);
              if(Funciones.contarCadena(valueObject.getCODIGO_INFRACCION(), 500))
                stmt.setString(21, valueObject.getCODIGO_INFRACCION()); 
              else
                stmt.setNull(21, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getPOLCA(), 500))
                stmt.setString(22, valueObject.getPOLCA()); 
              else
                stmt.setNull(22, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getFOTOMULTA(), 500))
                stmt.setString(23, valueObject.getFOTOMULTA()); 
              else
                stmt.setNull(23, Types.VARCHAR);
              if(Funciones.DoubleEsNulo(valueObject.getVALORES_ADICIONALES()))
                stmt.setDouble(24, valueObject.getVALORES_ADICIONALES()); 
              else
                stmt.setNull(24, Types.DOUBLE);
              if(Funciones.DoubleEsNulo(valueObject.getVALOR_TOTAL()))
                stmt.setDouble(25, valueObject.getVALOR_TOTAL()); 
              else
                stmt.setNull(25, Types.DOUBLE);
              if(Funciones.contarCadena(valueObject.getRESOLUCION_ANTERIOR(), 500))
                stmt.setString(26, valueObject.getRESOLUCION_ANTERIOR()); 
              else
                stmt.setNull(26, Types.VARCHAR);
              
               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, ResolucionesComparendoComp valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE RESOLUCIONESCOMPARENDO SET FECHA = ?, NUMERO = ?, ID_TIPORESOLUCION = ?, "
               + "CONTENIDO = ?, FECHAREGISTRO = ?, FECHAAUDIENCIA = ?, "
               + "MOTIVO = ?, NOMBRE = ?, IDUSUARIO = ?, "
               + "CONSIDERACIONJURIDICA = ? , TIEMPOSUSPENSIONLIC = ?, ACCION_ALCOHOLEMIA = ?, "
               + "MOTIVORESOLUCION = ?, HECHOS = ?, SOLICITUDRESOLUCION = ?, HORAS_COMUNITARIAS = ?, GRADO_ALCOHOLEMIA= ?, VALOR_PAGAR= ?, VALOR_INFRACCION = ?, CODIGO_INFRACCION = ?, POLCA= ?, FOTOMULTA = ?, VALORES_ADICIONALES = ?, VALOR_TOTAL = ?, RESOLUCION_ANTERIOR = ? WHERE (ID = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              
            if (Funciones.esFecha(valueObject.getFECHA()))
                stmt.setDate(1, Funciones.convFechaSSQL(valueObject.getFECHA()));
            else
                stmt.setNull(1, Types.DATE);
            if (Funciones.contarCadena(valueObject.getNUMERO(),10))
              stmt.setString(2, valueObject.getNUMERO());
            else
                stmt.setNull(2, Types.VARCHAR);
            
              stmt.setInt(3, valueObject.getID_TIPORESOLUCION()); 
              stmt.setString(4, valueObject.getCONTENIDO()); 
              
            if (Funciones.esFecha(valueObject.getFECHAREGISTRO()))
                stmt.setDate(5, Funciones.convFechaSSQL(valueObject.getFECHAREGISTRO()));
            else
                stmt.setNull(5, Types.DATE);
              
              
            if (Funciones.esFecha(valueObject.getFECHAAUDIENCIA()))
                stmt.setDate(6, Funciones.convFechaSSQL(valueObject.getFECHAAUDIENCIA()));
            else
                stmt.setNull(6, Types.DATE);
              
              stmt.setString(7, valueObject.getMOTIVO()); 
              stmt.setString(8, valueObject.getNOMBRE()); 
              stmt.setInt(9, valueObject.getIDUSUARIO()); 
              stmt.setString(10, valueObject.getCONSIDERACIONJURIDICA()); 
              
              if(!Funciones.EnteroesNulo(valueObject.getTIEMPOSUSPENSIONLIC()))
                stmt.setInt(11, valueObject.getTIEMPOSUSPENSIONLIC());
              else
                stmt.setNull(11, Types.INTEGER);
              if(!Funciones.EnteroesNulo(valueObject.getACCION_ALCOHOLEMIA()))
                stmt.setInt(12, valueObject.getACCION_ALCOHOLEMIA());
              else
                stmt.setNull(12, Types.INTEGER);
              
                stmt.setString(13, valueObject.getMOTIVORESOLUCION());
                stmt.setString(14, valueObject.getHECHOS());
                stmt.setString(15, valueObject.getSOLICITUDRESOLUCION());
              
                stmt.setString(16, valueObject.getHORAS_COMUNITARIAS());
                stmt.setFloat(17, valueObject.getGRADO_ALCOHOLEMIA());
                stmt.setDouble(18, valueObject.getVALOR_PAGAR());
                stmt.setDouble(19, valueObject.getVALOR_INFRACCION());
                stmt.setString(20, valueObject.getCODIGO_INFRACCION());
                stmt.setString(21, valueObject.getPOLCA());
                stmt.setString(22, valueObject.getFOTOMULTA());
                stmt.setDouble(23, valueObject.getVALORES_ADICIONALES());
                stmt.setDouble(24, valueObject.getVALOR_TOTAL());
                stmt.setString(25, valueObject.getRESOLUCION_ANTERIOR());
                
                stmt.setInt(26, valueObject.getID());


              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, ResolucionesComparendoComp valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM RESOLUCIONESCOMPARENDO WHERE (ID = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getID()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM RESOLUCIONESCOMPARENDO";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM RESOLUCIONESCOMPARENDO";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, ResolucionesComparendoComp valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM RESOLUCIONESCOMPARENDO WHERE 1=1 ");

          if (valueObject.getID() != 0) {
              if (first) { first = false; }
              sql.append("AND ID = ").append(valueObject.getID()).append(" ");
          }

          if (valueObject.getFECHA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHA LIKE '").append(valueObject.getFECHA()).append("%' ");
          }

          if (valueObject.getNUMERO() != null) {
              if (first) { first = false; }
              sql.append("AND NUMERO LIKE '").append(valueObject.getNUMERO()).append("%' ");
          }

          if (valueObject.getID_TIPORESOLUCION() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_TIPORESOLUCION = ").append(valueObject.getID_TIPORESOLUCION()).append(" ");
          }

          if (valueObject.getCONTENIDO() != null) {
              if (first) { first = false; }
              sql.append("AND CONTENIDO LIKE '").append(valueObject.getCONTENIDO()).append("%' ");
          }

          if (valueObject.getFECHAREGISTRO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAREGISTRO LIKE '").append(valueObject.getFECHAREGISTRO()).append("%' ");
          }

          if (valueObject.getFECHAAUDIENCIA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAAUDIENCIA LIKE '").append(valueObject.getFECHAAUDIENCIA()).append("%' ");
          }

          if (valueObject.getMOTIVO() != null) {
              if (first) { first = false; }
              sql.append("AND MOTIVO LIKE '").append(valueObject.getMOTIVO()).append("%' ");
          }

          if (valueObject.getNOMBRE() != null) {
              if (first) { first = false; }
              sql.append("AND NOMBRE LIKE '").append(valueObject.getNOMBRE()).append("%' ");
          }

          if (valueObject.getIDUSUARIO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDUSUARIO = ").append(valueObject.getIDUSUARIO()).append(" ");
          }

          if (valueObject.getCONSIDERACIONJURIDICA() != null) {
              if (first) { first = false; }
              sql.append("AND CONSIDERACIONJURIDICA LIKE '").append(valueObject.getCONSIDERACIONJURIDICA()).append("%' ");
          }
          
          
          if (valueObject.getTIEMPOSUSPENSIONLIC() != 0) {
            if (first) { first = false; }
            sql.append("AND TIEMPOSUSPENSIONLIC= ").append(valueObject.getTIEMPOSUSPENSIONLIC()).append(" ");
          }

          if (valueObject.getACCION_ALCOHOLEMIA() != 0) {
            if (first) { first = false; }
            sql.append("AND ACCION_ALCOHOLEMIA= ").append(valueObject.getACCION_ALCOHOLEMIA()).append(" ");
          }
          
          if (valueObject.getMOTIVORESOLUCION() != null) {
            if (first) { first = false; }
            sql.append("AND MOTIVORESOLUCION LIKE '").append(valueObject.getMOTIVORESOLUCION()).append("%' ");
          }
          
          if (valueObject.getHECHOS() != null) {
            if (first) { first = false; }
            sql.append("AND HECHOS LIKE '").append(valueObject.getHECHOS()).append("%' ");
          }
          
          if (valueObject.getSOLICITUDRESOLUCION() != null) {
            if (first) { first = false; }
            sql.append("AND SOLICITUDRESOLUCION LIKE '").append(valueObject.getSOLICITUDRESOLUCION()).append("%' ");
          }



          sql.append("ORDER BY ID ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, ResolucionesComparendoComp valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setID(result.getInt("ID")); 
                   valueObject.setFECHA(result.getString("FECHA")); 
                   valueObject.setNUMERO(result.getString("NUMERO")); 
                   valueObject.setID_TIPORESOLUCION(result.getInt("ID_TIPORESOLUCION")); 
                   valueObject.setCONTENIDO(result.getString("CONTENIDO")); 
                   valueObject.setFECHAREGISTRO(result.getString("FECHAREGISTRO")); 
                   valueObject.setFECHAAUDIENCIA(result.getString("FECHAAUDIENCIA")); 
                   valueObject.setMOTIVO(result.getString("MOTIVO")); 
                   valueObject.setNOMBRE(result.getString("NOMBRE")); 
                   valueObject.setIDUSUARIO(result.getInt("IDUSUARIO")); 
                   valueObject.setCONSIDERACIONJURIDICA(result.getString("CONSIDERACIONJURIDICA")); 
                   
                   valueObject.setTIEMPOSUSPENSIONLIC(result.getInt("TIEMPOSUSPENSIONLIC"));
                   valueObject.setACCION_ALCOHOLEMIA(result.getInt("ACCION_ALCOHOLEMIA"));
                   
                   valueObject.setMOTIVORESOLUCION(result.getString("MOTIVORESOLUCION"));
                   valueObject.setHECHOS(result.getString("HECHOS"));
                   valueObject.setSOLICITUDRESOLUCION(result.getString("SOLICITUDRESOLUCION"));
                   
                    valueObject.setHORAS_COMUNITARIAS(result.getString("HORAS_COMUNITARIAS"));
                    valueObject.setGRADO_ALCOHOLEMIA(result.getFloat("GRADO_ALCOHOLEMIA"));
                    valueObject.setVALOR_PAGAR(result.getDouble("VALOR_PAGAR"));
                    valueObject.setVALOR_INFRACCION(result.getDouble("VALOR_INFRACCION"));
                    valueObject.setCODIGO_INFRACCION(result.getString("CODIGO_INFRACCION"));
                    valueObject.setPOLCA(result.getString("POLCA"));
                    valueObject.setFOTOMULTA(result.getString("FOTOMULTA"));
                    valueObject.setVALORES_ADICIONALES(result.getDouble("VALORES_ADICIONALES"));
                    valueObject.setVALOR_TOTAL(result.getDouble("VALOR_TOTAL"));
                    valueObject.setRESOLUCION_ANTERIOR(result.getString("RESOLUCION_ANTERIOR"));


              } else {
                    //System.out.println("ResolucionesComparendoComp Object Not Found!");
                    throw new NotFoundException("ResolucionesComparendoComp Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   ResolucionesComparendoComp temp = createValueObject();

                   temp.setID(result.getInt("ID")); 
                   temp.setFECHA(result.getString("FECHA")); 
                   temp.setNUMERO(result.getString("NUMERO")); 
                   temp.setID_TIPORESOLUCION(result.getInt("ID_TIPORESOLUCION")); 
                   temp.setCONTENIDO(result.getString("CONTENIDO")); 
                   temp.setFECHAREGISTRO(result.getString("FECHAREGISTRO")); 
                   temp.setFECHAAUDIENCIA(result.getString("FECHAAUDIENCIA")); 
                   temp.setMOTIVO(result.getString("MOTIVO")); 
                   temp.setNOMBRE(result.getString("NOMBRE")); 
                   temp.setIDUSUARIO(result.getInt("IDUSUARIO")); 
                   temp.setCONSIDERACIONJURIDICA(result.getString("CONSIDERACIONJURIDICA")); 
                   temp.setTIEMPOSUSPENSIONLIC(result.getInt("TIEMPOSUSPENSIONLIC"));
                   temp.setACCION_ALCOHOLEMIA(result.getInt("ACCION_ALCOHOLEMIA"));
                   temp.setMOTIVORESOLUCION(result.getString("MOTIVORESOLUCION"));
                   temp.setHECHOS(result.getString("HECHOS"));
                   temp.setSOLICITUDRESOLUCION(result.getString("SOLICITUDRESOLUCION"));
                   
                   temp.setHORAS_COMUNITARIAS(result.getString("HORAS_COMUNITARIAS"));
                    temp.setGRADO_ALCOHOLEMIA(result.getFloat("GRADO_ALCOHOLEMIA"));
                    temp.setVALOR_PAGAR(result.getDouble("VALOR_PAGAR"));
                    temp.setVALOR_INFRACCION(result.getDouble("VALOR_INFRACCION"));
                    temp.setCODIGO_INFRACCION(result.getString("CODIGO_INFRACCION"));
                    temp.setPOLCA(result.getString("POLCA"));
                    temp.setFOTOMULTA(result.getString("FOTOMULTA"));
                    temp.setVALORES_ADICIONALES(result.getDouble("VALORES_ADICIONALES"));
                    temp.setVALOR_TOTAL(result.getDouble("VALOR_TOTAL"));
                    temp.setRESOLUCION_ANTERIOR(result.getString("RESOLUCION_ANTERIOR"));
                  
                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }
    
    public int countNumber(Connection conn,ResolucionesComparendoComp valueObject) throws SQLException {

          String sql = "SELECT count(*) FROM RESOLUCIONESCOMPARENDO WHERE NUMERO = '"+valueObject.getNUMERO()+"' ";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              //stmt.setString(1, valueObject.getNUMERO()); 
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


}
