package modelo.datos.dao.radicacion;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.radicacion.Cita;

import utilidades.Funciones;


/**
  * Cita Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve Cita object instances.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class CitaDao {


    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public Cita createValueObject() {
        return new Cita();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database
     * using given Primary-Key as identifier. This method is just a convenience method
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public Cita getObject(Connection conn,
                          int ID_CITA) throws NotFoundException, SQLException {

        Cita valueObject = createValueObject();
        valueObject.setID_CITA(ID_CITA);
        load(conn, valueObject);
        return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn,
                     Cita valueObject) throws NotFoundException, SQLException {

        String sql = "SELECT * FROM CITA WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getID_CITA());

            singleQuery(conn, stmt, valueObject);

        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows.
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

        String sql = "SELECT * FROM CITA ORDER BY ID_CITA ASC ";
        List searchResults = listQuery(conn, conn.prepareStatement(sql));

        return searchResults;
    }


    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn,
                                    Cita valueObject) throws SQLException {

        String sql = "";
        PreparedStatement stmt = null;
        ResultSet result = null;

        try {
            sql =
"INSERT INTO CITA ( ID_CITA, ID_DEPENDENCIA, FECHACITA, " + "ID_USUARIO, FECHAREG, HORAREG, " +
  "NOMBRESOLICITA, ESTADO, NUMEROCITA, " +
  "ID_USRTERMINA, ID_USRTRASLADA, ID_USRANULA, " +
  "FECHATERMINA, FECHAANULA, FECHATRASLADA, " +
  "REASIGNADA, USRREASIGNA, OBSERVACION) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
            stmt = conn.prepareStatement(sql);

            stmt.setInt(1, valueObject.getID_CITA());
            if (!Funciones.EnteroesNulo(valueObject.getID_DEPENDENCIA()))
                stmt.setInt(2, valueObject.getID_DEPENDENCIA());
            else
                stmt.setNull(2, Types.INTEGER);
            if (Funciones.esFecha(valueObject.getFECHACITA()))
                stmt.setDate(3,Funciones.convFechaSSQL(valueObject.getFECHACITA()));
            else
                stmt.setNull(3, Types.DATE);
            if (!Funciones.EnteroesNulo(valueObject.getID_USUARIO()))
                stmt.setInt(4, valueObject.getID_USUARIO());
            else
                stmt.setNull(4, Types.INTEGER);
            if (Funciones.esFecha(valueObject.getFECHAREG()))
                stmt.setDate(5,Funciones.convFechaSSQL(valueObject.getFECHAREG()));
            else
                stmt.setNull(5, Types.DATE);
            if (Funciones.esTime(valueObject.getHORAREG()))
                stmt.setTime(6,Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getHORAREG())));
            else
                stmt.setNull(6, Types.TIME);
            if (Funciones.contarCadena(valueObject.getNOMBRESOLICITA(), 50))
                stmt.setString(7, valueObject.getNOMBRESOLICITA());
            else
                stmt.setNull(7, Types.VARCHAR);
            if (Funciones.contarCadena(valueObject.getESTADO(), 15))
                stmt.setString(8, valueObject.getESTADO());
            else
                stmt.setNull(8, Types.VARCHAR);
            if (!Funciones.EnteroesNulo(valueObject.getNUMEROCITA()))
                stmt.setInt(9, valueObject.getNUMEROCITA());
            else
                stmt.setNull(9, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getID_USRTERMINA()))
                stmt.setInt(10, valueObject.getID_USRTERMINA());
            else
                stmt.setNull(10, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getID_USRTRASLADA()))
                stmt.setInt(11, valueObject.getID_USRTRASLADA());
            else
                stmt.setNull(11, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getID_USRANULA()))
                stmt.setInt(12, valueObject.getID_USRANULA());
            else
                stmt.setNull(12, Types.INTEGER);
            if (Funciones.esFecha(valueObject.getFECHATERMINA()))
                stmt.setDate(13,Funciones.convFechaSSQL(valueObject.getFECHATERMINA()));
            else
                stmt.setNull(13, Types.DATE);
            if (Funciones.esFecha(valueObject.getFECHAANULA()))
                stmt.setDate(14,Funciones.convFechaSSQL(valueObject.getFECHAANULA()));
            else
                stmt.setNull(14, Types.DATE);
            if (Funciones.esFecha(valueObject.getFECHATRASLADA()))
                stmt.setDate(15,Funciones.convFechaSSQL(valueObject.getFECHATRASLADA()));
            else
                stmt.setNull(15, Types.DATE);
            if (Funciones.contarCadena(valueObject.getREASIGNADA(), 1))
                stmt.setString(16, valueObject.getREASIGNADA());
            else
                stmt.setNull(16, Types.VARCHAR);
            if (Funciones.contarCadena(valueObject.getUSRREASIGNA(), 30))
                stmt.setString(17, valueObject.getUSRREASIGNA());
            else
                stmt.setNull(17, Types.VARCHAR);
            if (Funciones.contarCadena(valueObject.getOBSERVACION(), 1000))
                stmt.setString(18, valueObject.getOBSERVACION());
            else
                stmt.setNull(18, Types.VARCHAR);

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount != 1) {
                //System.out.println("PrimaryKey Error when updating DB!");
                throw new SQLException("PrimaryKey Error when updating DB!");
            }

        } finally {
            if (stmt != null)
                stmt.close();
        }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn,
                     Cita valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE CITA SET ID_DEPENDENCIA = ?, FECHACITA = ?, ID_USUARIO = ?, " +
            "FECHAREG = ?, HORAREG = ?, NOMBRESOLICITA = ?, " +
            "ESTADO = ?, NUMEROCITA = ?, ID_USRTERMINA = ?, " +
            "ID_USRTRASLADA = ?, ID_USRANULA = ?, FECHATERMINA = ?, " +
            "FECHAANULA = ?, FECHATRASLADA = ?, REASIGNADA = ?, " +
            "USRREASIGNA = ?, OBSERVACION = ? WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getID_DEPENDENCIA());
            
          if (Funciones.esFecha(valueObject.getFECHACITA()))
            stmt.setDate(2, Funciones.convFechaSSQL(valueObject.getFECHACITA()));
          else
            stmt.setNull(2, Types.DATE);
            
            stmt.setInt(3, valueObject.getID_USUARIO());
            
          if (Funciones.esFecha(valueObject.getFECHAREG()))
            stmt.setDate(4, Funciones.convFechaSSQL(valueObject.getFECHAREG()));
          else
            stmt.setNull(4, Types.DATE);
            
            //stmt.setString(5, valueObject.getHORAREG());
          if(Funciones.esTime(valueObject.getHORAREG()))
            stmt.setTime(5, Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getHORAREG())));
          else 
            stmt.setNull(5, Types.TIME);
            
            stmt.setString(6, valueObject.getNOMBRESOLICITA());
            stmt.setString(7, valueObject.getESTADO());
            stmt.setInt(8, valueObject.getNUMEROCITA());
            stmt.setInt(9, valueObject.getID_USRTERMINA());
            stmt.setInt(10, valueObject.getID_USRTRASLADA());
            stmt.setInt(11, valueObject.getID_USRANULA());
            
          if (Funciones.esFecha(valueObject.getFECHATERMINA()))
            stmt.setDate(12, Funciones.convFechaSSQL(valueObject.getFECHATERMINA()));
          else
            stmt.setNull(12, Types.DATE);
            
          if (Funciones.esFecha(valueObject.getFECHAANULA()))
            stmt.setDate(13, Funciones.convFechaSSQL(valueObject.getFECHAANULA()));
          else
            stmt.setNull(13, Types.DATE);
            
          if (Funciones.esFecha(valueObject.getFECHATRASLADA()))
            stmt.setDate(14, Funciones.convFechaSSQL(valueObject.getFECHATRASLADA()));
          else
            stmt.setNull(14, Types.DATE);
            
            stmt.setString(15, valueObject.getREASIGNADA());
            stmt.setString(16, valueObject.getUSRREASIGNA());
            stmt.setString(17, valueObject.getOBSERVACION());

            stmt.setInt(18, valueObject.getID_CITA());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }

    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not
     * be restored by calling save. Restoring can only be done using create method but if
     * database is using automatic surrogate-keys, the resulting object will have different
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn,
                       Cita valueObject) throws NotFoundException,
                                                SQLException {

        String sql = "DELETE FROM CITA WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getID_CITA());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be deleted (PrimaryKey not found)");
                throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be
     * restored by calling save. Restoring can only be done using create method but if database
     * is using automatic surrogate-keys, the resulting object will have different primary-key
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

        String sql = "DELETE FROM CITA";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            int rowcount = databaseUpdate(conn, stmt);
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

        String sql = "SELECT count(*) FROM CITA";
        PreparedStatement stmt = null;
        ResultSet result = null;
        int allRows = 0;

        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next())
                allRows = result.getInt(1);
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        return allRows;
    }


    /**
     * searchMatching-Method. This method provides searching capability to
     * get matching valueObjects from database. It works by searching all
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List,
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn,
                               Cita valueObject) throws SQLException {

        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM CITA WHERE 1=1 ");

        if (valueObject.getID_CITA() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_CITA = ").append(valueObject.getID_CITA()).append(" ");
        }

        if (valueObject.getID_DEPENDENCIA() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_DEPENDENCIA = ").append(valueObject.getID_DEPENDENCIA()).append(" ");
        }

        if (valueObject.getFECHACITA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND FECHACITA = '").append(valueObject.getFECHACITA()).append("' ");
        }

        if (valueObject.getID_USUARIO() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_USUARIO = ").append(valueObject.getID_USUARIO()).append(" ");
        }

        if (valueObject.getFECHAREG() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND FECHAREG = '").append(Funciones.convFechaSQLS(Funciones.convFechaSSQL(valueObject.getFECHAREG()))).append("' ");
        }

        if (valueObject.getHORAREG() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND HORAREG = '").append(valueObject.getHORAREG()).append("' ");
        }

        if (valueObject.getNOMBRESOLICITA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND NOMBRESOLICITA = '").append(valueObject.getNOMBRESOLICITA()).append("' ");
        }

        if (valueObject.getESTADO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND ESTADO = '").append(valueObject.getESTADO()).append("' ");
        }

        if (valueObject.getNUMEROCITA() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND NUMEROCITA = ").append(valueObject.getNUMEROCITA()).append(" ");
        }

        if (valueObject.getID_USRTERMINA() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_USRTERMINA = ").append(valueObject.getID_USRTERMINA()).append(" ");
        }

        if (valueObject.getID_USRTRASLADA() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_USRTRASLADA = ").append(valueObject.getID_USRTRASLADA()).append(" ");
        }

        if (valueObject.getID_USRANULA() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_USRANULA = ").append(valueObject.getID_USRANULA()).append(" ");
        }

        if (valueObject.getFECHATERMINA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND FECHATERMINA = '").append(Funciones.convFechaSSQL(valueObject.getFECHATERMINA())).append("' ");
        }

        if (valueObject.getFECHAANULA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND FECHAANULA = '").append(Funciones.convFechaSSQL(valueObject.getFECHAANULA())).append("' ");
        }

        if (valueObject.getFECHATRASLADA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND FECHATRASLADA = '").append(Funciones.convFechaSSQL(valueObject.getFECHATRASLADA())).append("' ");
        }

        if (valueObject.getREASIGNADA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND REASIGNADA = '").append(valueObject.getREASIGNADA()).append("' ");
        }

        if (valueObject.getUSRREASIGNA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND USRREASIGNA = '").append(valueObject.getUSRREASIGNA()).append("' ");
        }

        if (valueObject.getOBSERVACION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND OBSERVACION = '").append(valueObject.getOBSERVACION()).append("' ");
        }
        sql.append("ORDER BY ID_CITA ASC ");

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
            searchResults = new ArrayList();
        else
            searchResults =
                    listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn,
                                 PreparedStatement stmt) throws SQLException {

        int result = stmt.executeUpdate();

        return result;
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt,
                               Cita valueObject) throws NotFoundException,
                                                        SQLException {

        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            if (result.next()) {

                valueObject.setID_CITA(result.getInt("ID_CITA"));
                valueObject.setID_DEPENDENCIA(result.getInt("ID_DEPENDENCIA"));
                valueObject.setFECHACITA(result.getString("FECHACITA"));
                valueObject.setID_USUARIO(result.getInt("ID_USUARIO"));
                valueObject.setFECHAREG(result.getString("FECHAREG"));
                valueObject.setHORAREG(result.getString("HORAREG"));
                valueObject.setNOMBRESOLICITA(result.getString("NOMBRESOLICITA"));
                valueObject.setESTADO(result.getString("ESTADO"));
                valueObject.setNUMEROCITA(result.getInt("NUMEROCITA"));
                valueObject.setID_USRTERMINA(result.getInt("ID_USRTERMINA"));
                valueObject.setID_USRTRASLADA(result.getInt("ID_USRTRASLADA"));
                valueObject.setID_USRANULA(result.getInt("ID_USRANULA"));
                valueObject.setFECHATERMINA(result.getString("FECHATERMINA"));
                valueObject.setFECHAANULA(result.getString("FECHAANULA"));
                valueObject.setFECHATRASLADA(result.getString("FECHATRASLADA"));
                valueObject.setREASIGNADA(result.getString("REASIGNADA"));
                valueObject.setUSRREASIGNA(result.getString("USRREASIGNA"));
                valueObject.setOBSERVACION(result.getString("OBSERVACION"));

            } else {
                //System.out.println("Cita Object Not Found!");
                throw new NotFoundException("Cita Object Not Found!");
            }
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn,
                             PreparedStatement stmt) throws SQLException {

        ArrayList searchResults = new ArrayList();
        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            while (result.next()) {
                Cita temp = createValueObject();
                temp.setID_CITA(result.getInt("ID_CITA"));
                temp.setID_DEPENDENCIA(result.getInt("ID_DEPENDENCIA"));
                temp.setFECHACITA(result.getString("FECHACITA"));
                temp.setID_USUARIO(result.getInt("ID_USUARIO"));
                temp.setFECHAREG(result.getString("FECHAREG"));
                temp.setHORAREG(result.getString("HORAREG"));
                temp.setNOMBRESOLICITA(result.getString("NOMBRESOLICITA"));
                temp.setESTADO(result.getString("ESTADO"));
                temp.setNUMEROCITA(result.getInt("NUMEROCITA"));
                temp.setID_USRTERMINA(result.getInt("ID_USRTERMINA"));
                temp.setID_USRTRASLADA(result.getInt("ID_USRTRASLADA"));
                temp.setID_USRANULA(result.getInt("ID_USRANULA"));
                temp.setFECHATERMINA(result.getString("FECHATERMINA"));
                temp.setFECHAANULA(result.getString("FECHAANULA"));
                temp.setFECHATRASLADA(result.getString("FECHATRASLADA"));
                temp.setREASIGNADA(result.getString("REASIGNADA"));
                temp.setUSRREASIGNA(result.getString("USRREASIGNA"));
                temp.setOBSERVACION(result.getString("OBSERVACION"));

                searchResults.add(temp);
            }

        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        return (List)searchResults;
    }

    public int obtenerNumeroCita(Connection conn,
                                 Cita valueObject) throws SQLException {
        String fecha =
            Funciones.convFechaSQLS(Funciones.convFechaSSQL(valueObject.getFECHACITA()));
        
        String sql = "SELECT MAX(NUMEROCITA) FROM CITA WHERE ID_DEPENDENCIA = ? AND FECHACITA = ?";
            
                
        PreparedStatement stmt = null;
        ResultSet result = null;
        int numero = 0;
        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getID_DEPENDENCIA());
            stmt.setDate(2, Funciones.convFechaSSQL(valueObject.getFECHACITA()));
                          
            
            result = stmt.executeQuery();
            if (result.next())
                numero = result.getInt(1) + 1;
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        return numero;
    }

    public int getMaxId(Connection conn) throws SQLException {

        String sql = "SELECT GEN_ID(GEN_CITA,1) FROM TRANSITO";
        PreparedStatement stmt = null;
        ResultSet result = null;
        int allRows = 0;
        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next())
                allRows = result.getInt(1) + 1;
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        return allRows;
    }
    
    
    public void reasignarCita(Connection conn,
                     Cita valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE CITA SET ID_DEPENDENCIA = ?, ID_USRTRASLADA = ?, FECHATRASLADA = ?, ESTADO = ?, REASIGNADA = ?, USRREASIGNA = ? WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            
            if (!Funciones.EnteroesNulo(valueObject.getID_DEPENDENCIA()))
                stmt.setInt(1, valueObject.getID_DEPENDENCIA());
            else
                stmt.setNull(1, Types.INTEGER);  
            if (!Funciones.EnteroesNulo(valueObject.getID_USRTRASLADA()))
                stmt.setInt(2, valueObject.getID_USRTRASLADA());
            else
                stmt.setNull(2, Types.VARCHAR);
            if (Funciones.esFecha(valueObject.getFECHATRASLADA()))
                stmt.setDate(3,Funciones.convFechaSSQL(valueObject.getFECHATRASLADA()));
            else
                stmt.setNull(3, Types.DATE);
            
            if (valueObject.getESTADO()!=null &&  valueObject.getESTADO()!="")
                stmt.setString(4, valueObject.getESTADO());
            else
                stmt.setNull(4, Types.VARCHAR);
                        
            if (valueObject.getREASIGNADA()!=null &&  valueObject.getREASIGNADA()!="")
                stmt.setString(5, valueObject.getREASIGNADA());
            else
                stmt.setNull(5, Types.VARCHAR);
                        
            if (valueObject.getUSRREASIGNA()!=null &&  valueObject.getUSRREASIGNA()!="")
                stmt.setString(6, valueObject.getUSRREASIGNA());
            else
                stmt.setNull(6, Types.VARCHAR);
                                                
            stmt.setInt(7, valueObject.getID_CITA());
            System.out.println(stmt.toString());
            
            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }
    
    public void terminarCita(Connection conn,
                     Cita valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE CITA SET ESTADO = ?, ID_USRTERMINA = ?, FECHATERMINA = ? WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getESTADO());
            if (!Funciones.EnteroesNulo(valueObject.getID_USRTERMINA()))
                stmt.setInt(2, valueObject.getID_USRTERMINA());
            else
                stmt.setNull(2, Types.INTEGER);
            if (Funciones.esFecha(valueObject.getFECHATERMINA()))
                stmt.setDate(3,Funciones.convFechaSSQL(valueObject.getFECHATERMINA()));
            else
                stmt.setNull(3, Types.DATE);
            stmt.setInt(4, valueObject.getID_CITA());
            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }
    
    
    public void atenderCita(Connection conn,
                     Cita valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE CITA SET ESTADO = ?, ID_USRTERMINA = ?, FECHATERMINA = ? WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getESTADO());
            if (!Funciones.EnteroesNulo(valueObject.getID_USRTERMINA()))
                stmt.setInt(2, valueObject.getID_USRTERMINA());
            else
                stmt.setNull(2, Types.INTEGER);
            if (Funciones.esFecha(valueObject.getFECHAREG()))
                stmt.setDate(3,Funciones.convFechaSSQL(Funciones.getFechaSistema(conn, "")));
            else
                stmt.setNull(3, Types.DATE);
            stmt.setInt(4, valueObject.getID_CITA());
            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }
    
    public void anularCita(Connection conn,
                     Cita valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE CITA SET ESTADO = ?, ID_USRANULA = ?, FECHAANULA = ? WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getESTADO());
            if (!Funciones.EnteroesNulo(valueObject.getID_USRANULA()))
                stmt.setInt(2, valueObject.getID_USRANULA());
            else
                stmt.setNull(2, Types.INTEGER);
            if (Funciones.esFecha(valueObject.getFECHAANULA()))
                stmt.setDate(3,Funciones.convFechaSSQL(valueObject.getFECHAANULA()));
            else
                stmt.setNull(3, Types.DATE);
            stmt.setInt(4, valueObject.getID_CITA());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }
    
    public void observacionCita(Connection conn,
                     Cita valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE CITA SET OBSERVACION = ? WHERE (ID_CITA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            if (Funciones.contarCadena(valueObject.getOBSERVACION(), 500))
                stmt.setString(1, valueObject.getOBSERVACION());
            else
                stmt.setNull(1, Types.VARCHAR);
            stmt.setInt(2, valueObject.getID_CITA());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }
}
