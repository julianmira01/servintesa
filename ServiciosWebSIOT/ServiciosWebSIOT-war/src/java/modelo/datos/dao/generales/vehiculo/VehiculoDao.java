package modelo.datos.dao.generales.vehiculo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.generales.vehiculo.Vehiculo;

import utilidades.Funciones;


/**
  * Vehiculo Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve Vehiculo object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class VehiculoDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public Vehiculo createValueObject() {
          return new Vehiculo();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public Vehiculo getObject(Connection conn, int ID_VEHICULO) throws NotFoundException, SQLException {

          Vehiculo valueObject = createValueObject();
          valueObject.setID_VEHICULO(ID_VEHICULO);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, Vehiculo valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM VEHICULO WHERE (ID_VEHICULO = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getID_VEHICULO()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM VEHICULO ORDER BY ID_VEHICULO ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, Vehiculo valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

         try {
               sql = "INSERT INTO VEHICULO ( ID_VEHICULO, PLACA, SERIE_MOTOR, "
               + "CILINDRAJE, MODELO, NRO_PUERTAS, "
               + "PESO_BRUTO, DIST_EJES, VOLAD_POSTER, "
               + "NRO_EJES, ANCHO, LARGO, "
               + "ALTO, POTENCIA, FECHA_MANIFIESTO, "
               + "POLIZA_NUM, FECHAVENCE_SEGURO, FECHAREG, "
               + "ID_SERVICIO, ID_CVEHICULO, ID_COMBUSTIBLE, "
               + "ID_TCARROCERIA, ID_TMAQUINA, IDEMPRESA_ASEGURADORA, "
               + "ID_EMPSERVIPUBLICO, ID_MARCA, ID_LINEA, "
               + "CAPACIDAD, COLOR, FECHAVENCSEGURO, "
               + "ID_COLOR, ID_ESPVENAL, EMP_FAVORECIDA, "
               + "CHASIS, NRO_MOTOR, IDTIPDOCTOVEHI, "
               + "NUMDOCTO, FECHADOCTO, IDORG_EXPIDE, "
               + "ACTA, MANIFIESTO, FECHAVINCULACIONEMPRESA, "
               + "FECHADESVINCULACIONEMPRESA, VIDRIOS_POLARIZADOS, BLINDADO, "
               + "MOTORREGRABADO, CHASISREGREBADO, NUMSERIE_REGRABADO, "
               + "TARJETAOPERACION, CONCESIONARIO, NUM_ACMANIF, "
               + "VLRFACTURA, IMPORTADOR, ID_ADUANA, "
               + "NUMEROFACTURA, FECHAFACTURA, ID_MOTIVOCANCELACION, "
               + "FECHACANCELACIONVEHICULO, RESOLUCIONCANCELACION, LIMITACION, "
               + "PENDIENTEJUDICIAL, ID_NIVELSERVICIO, ID_MODALIDADSERVICIO, "
               + "IDORG_TRASLADOCTA, NUMOFICIOTRASLADO, NUMFOLIOSTRASLADO, "
               + "VOLAD_ANTERIOR, CAPACIDADTON, NUMGUIATRASLADOCTA, "
               + "ID_TIPOOPERACION, VEHEXTRANJERO, FECHAINIINMOVILIZA, "
               + "FECHAFININMOVILIZA, VEHFORANEO, ID_MARCAPPAL, "
               + "ID_LINEAPPAL, COD_ADMINISTRACION, NIT_IMPORTADOR, "
               + "NRO_FORMULARIO, NRO_AUTOADHESIVO, ID_RUNTANTIGUOCLASICO, "
               + "ID_RUNTTIPOMATRICULA, FECHAINIVIGENCIA, FECHAFINVIGENCIA, "
               + "FICHATECNICAHOMOLOGA, FICHAHOMOLOGACARROCERIA, OBSERVACION, "
               + "VEHIREPOSICION, VEHIDONADO, NUMEROVIN, "
               + "NUMEROAUTOMOTOR, ID_RUNTTIPOMOTOR, ESIMPORTADO, "
               + "ID_RUNTPAISES, ANOFABRICACION, ID_RUNTTIPOREGISTRO, "
               + "ID_RUNTRADIOACCION, VLRPOLIZA, ID_RUNTCONCESIONARIO, "
               + "NUMEROFACTURA_MOTOR, FECHAFACTURA_MOTOR, EMPPER_MOTOR, "
               + "ID_PROPIETARIO_MOTOR, MARCAAUTOMOTORMIGRADO, ID_RUNTORIGENREGISTRO, "
               + "ID_RUNTGRUPO, SEGURIDADESTADO, ENSENANZA, "
               + "NUMEROFICHATECNICA, ESTAREPOTENCIADO, ID_TIPOPLACA, "
               + "ESTADO_MOTOR, ID_RUNTTIPOPLACA, RECUPERACION_MOTOR, "
               + "ID_RECIBOLIQCAN, IDLOGIN_CANCELA, "
               + "TIPOCANCELA, RECUPERAMOTOR, PORCENTAJEREPOSICION, "
               + "VIN, ID_ORGTRANSITOORIGEN, AUTORIZATRASLADO,  VEHPLANORUNT, "
               + "ENTE_JUDICIAL, NUM_OFICIO_CANCELACION, NUM_IPAT, REGRABADO) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";

               stmt = conn.prepareStatement(sql);

               stmt.setInt(1, valueObject.getID_VEHICULO()); 
               if(Funciones.contarCadena(valueObject.getPLACA(), 10))
                stmt.setString(2, valueObject.getPLACA()); 
               else              
                stmt.setNull(2, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getSERIE_MOTOR(), 25))
                stmt.setString(3, valueObject.getSERIE_MOTOR()); 
               else
                stmt.setNull(3, Types.VARCHAR);   
               if(Funciones.contarCadena(valueObject.getCILINDRAJE(), 10))
                stmt.setString(4, valueObject.getCILINDRAJE()); 
               else
                stmt.setNull(4, Types.VARCHAR);
               if(Funciones.esEntero(valueObject.getMODELO()))
                stmt.setString(5, valueObject.getMODELO()); 
               else
                stmt.setNull(5, Types.INTEGER);
               if(Funciones.esEntero(valueObject.getNRO_PUERTAS()))             
                stmt.setString(6, valueObject.getNRO_PUERTAS());
               else
                stmt.setNull(6, Types.INTEGER);
               if(Funciones.contarCadena(valueObject.getPESO_BRUTO(), 5))
                stmt.setString(7, valueObject.getPESO_BRUTO()); 
               else
                stmt.setNull(7, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getDIST_EJES(), 10))
                stmt.setString(8, valueObject.getDIST_EJES()); 
               else
                stmt.setNull(8, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getVOLAD_POSTER(), 10))
                stmt.setString(9, valueObject.getVOLAD_POSTER());
               else
                stmt.setNull(9, Types.VARCHAR);
               if(Funciones.esEntero( valueObject.getNRO_EJES()))             
                stmt.setString(10, valueObject.getNRO_EJES()); 
               else
                stmt.setNull(10, Types.INTEGER);
               if(Funciones.contarCadena(valueObject.getANCHO(), 5)) 
                stmt.setString(11, valueObject.getANCHO());  
               else
                stmt.setNull(11, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getLARGO(), 5))
                stmt.setString(12, valueObject.getLARGO()); 
               else
                stmt.setNull(12, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getALTO(), 5))
                stmt.setString(13, valueObject.getALTO()); 
               else
                stmt.setNull(13, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getPOTENCIA(), 10))
                stmt.setString(14, valueObject.getPOTENCIA()); 
               else
                stmt.setNull(14, Types.VARCHAR);
               if(Funciones.esFecha(valueObject.getFECHA_MANIFIESTO()))                          
                stmt.setDate(15, Funciones.convFechaSSQL(valueObject.getFECHA_MANIFIESTO()));
               else
                stmt.setNull(15, Types.DATE);
               if(Funciones.contarCadena(valueObject.getPOLIZA_NUM(), 20))
                stmt.setString(16, valueObject.getPOLIZA_NUM()); 
               else
                stmt.setNull(16, Types.VARCHAR);
               if(Funciones.esFecha(valueObject.getFECHAVENCE_SEGURO()))
                stmt.setDate(17, Funciones.convFechaSSQL(valueObject.getFECHAVENCE_SEGURO())); 
               else
                stmt.setNull(17, Types.DATE);
               if(Funciones.esFecha(valueObject.getFECHAREG()))
                stmt.setDate(18, Funciones.convFechaSSQL(valueObject.getFECHAREG())); 
               else
                stmt.setNull(18, Types.DATE);
               if(Funciones.esEntero(valueObject.getID_SERVICIO()))
                stmt.setString(19, valueObject.getID_SERVICIO()); 
               else
                stmt.setNull(19, Types.INTEGER);
               if(Funciones.esEntero(valueObject.getID_CVEHICULO()))
                stmt.setString(20, valueObject.getID_CVEHICULO()); 
               else
                stmt.setNull(20, Types.INTEGER);
               if(Funciones.esEntero(valueObject.getID_COMBUSTIBLE()))
                stmt.setString(21, valueObject.getID_COMBUSTIBLE()); 
               else
                stmt.setNull(21, Types.INTEGER);
               if(Funciones.esEntero(valueObject.getID_TCARROCERIA()))
                stmt.setString(22, valueObject.getID_TCARROCERIA()); 
               else
                stmt.setNull(22, Types.INTEGER);
               if(Funciones.esEntero(valueObject.getID_TMAQUINA()))
                stmt.setString(23, valueObject.getID_TMAQUINA()); 
               else
                stmt.setNull(23, Types.INTEGER);
               if(Funciones.esEntero(valueObject.getIDEMPRESA_ASEGURADORA()))
                stmt.setString(24, valueObject.getIDEMPRESA_ASEGURADORA()); 
               else
                stmt.setNull(24, Types.INTEGER);
               if(Funciones.esEntero(valueObject.getID_EMPSERVIPUBLICO()))
                stmt.setString(25, valueObject.getID_EMPSERVIPUBLICO()); //Error converting to int. null
               else
                stmt.setNull(25, Types.INTEGER);
               if(Funciones.contarCadena(valueObject.getID_MARCA(), 2))
                stmt.setString(26, valueObject.getID_MARCA());// Data truncation
               else
                stmt.setNull(26, Types.VARCHAR);
               if(Funciones.esEntero(valueObject.getID_LINEA()))
                stmt.setString(27, valueObject.getID_LINEA()); //Error converting to int. null
               else
                stmt.setNull(27, Types.INTEGER);
               if(Funciones.contarCadena(valueObject.getCAPACIDAD(), 10))
                stmt.setString(28, valueObject.getCAPACIDAD());            
               else
                stmt.setNull(28, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getCOLOR(), 100))
                stmt.setString(29, valueObject.getCOLOR()); 
               else
                stmt.setNull(29, Types.VARCHAR);
               if(Funciones.esFecha(valueObject.getFECHAVENCSEGURO()))
                stmt.setDate(30, Funciones.convFechaSSQL(valueObject.getFECHAVENCSEGURO())); 
               else
                stmt.setNull(30, Types.DATE);   
            if(Funciones.esEntero(valueObject.getID_COLOR()))
             stmt.setString(31, valueObject.getID_COLOR()); 
            else
             stmt.setNull(31, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_ESPVENAL()))
             stmt.setString(32, valueObject.getID_ESPVENAL()); 
            else
             stmt.setNull(32, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getEMP_FAVORECIDA(), 80))
             stmt.setString(33, valueObject.getEMP_FAVORECIDA()); 
            else
             stmt.setNull(33, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getCHASIS(), 40))
             stmt.setString(34, valueObject.getCHASIS()); 
            else
             stmt.setNull(34, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNRO_MOTOR(), 25))
             stmt.setString(35, valueObject.getNRO_MOTOR()); 
            else
             stmt.setNull(35, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getIDTIPDOCTOVEHI()))
             stmt.setString(36, valueObject.getIDTIPDOCTOVEHI()); 
            else
             stmt.setNull(36, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMDOCTO(), 20))
             stmt.setString(37, valueObject.getNUMDOCTO()); 
            else
             stmt.setNull(37, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHADOCTO()))
             stmt.setDate(38, Funciones.convFechaSSQL(valueObject.getFECHADOCTO())); 
            else
             stmt.setNull(38, Types.DATE);
            if(Funciones.esEntero(valueObject.getIDORG_EXPIDE()))
             stmt.setString(39, valueObject.getIDORG_EXPIDE()); 
            else
             stmt.setNull(39, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getACTA(), 2))
             stmt.setString(40, valueObject.getACTA()); 
            else
             stmt.setNull(40, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getMANIFIESTO(), 2))
             stmt.setString(41, valueObject.getMANIFIESTO()); 
            else
             stmt.setNull(41, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAVINCULACIONEMPRESA()))
             stmt.setDate(42, Funciones.convFechaSSQL(valueObject.getFECHAVINCULACIONEMPRESA()));
            else
             stmt.setNull(42, Types.DATE); 
                        
            
            if (Funciones.esFecha(valueObject.getFECHADESVINCULACIONEMPRESA()))
              stmt.setDate(43, Funciones.convFechaSSQL(valueObject.getFECHADESVINCULACIONEMPRESA()));
            else
              stmt.setNull(43, Types.DATE);
            
             
            if(Funciones.contarCadena(valueObject.getVIDRIOS_POLARIZADOS(), 2))
             stmt.setString(44, valueObject.getVIDRIOS_POLARIZADOS()); 
            else
             stmt.setNull(44, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getBLINDADO(), 2)) 
             stmt.setString(45, valueObject.getBLINDADO()); 
            else
             stmt.setNull(45, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getMOTORREGRABADO(), 2))
             stmt.setString(46, valueObject.getMOTORREGRABADO());
            else
             stmt.setNull(46, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getCHASISREGREBADO(), 2)) 
             stmt.setString(47, valueObject.getCHASISREGREBADO()); 
            else
             stmt.setNull(47, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMSERIE_REGRABADO(), 2))
             stmt.setString(48, valueObject.getNUMSERIE_REGRABADO()); 
            else
             stmt.setNull(48, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getTARJETAOPERACION(), 20))
             stmt.setString(49, valueObject.getTARJETAOPERACION()); 
            else
             stmt.setNull(49, Types.VARCHAR);
            if(Funciones.contarCadena( valueObject.getCONCESIONARIO(), 20))
             stmt.setString(50, valueObject.getCONCESIONARIO());
            else
             stmt.setNull(50, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUM_ACMANIF(), 30))              
             stmt.setString(51, valueObject.getNUM_ACMANIF());
            else
             stmt.setNull(51, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getVLRFACTURA()))
             stmt.setString(52, valueObject.getVLRFACTURA());
            else
             stmt.setNull(52, Types.INTEGER); 
            if(Funciones.contarCadena(valueObject.getIMPORTADOR(), 30))
             stmt.setString(53, valueObject.getIMPORTADOR());
            else
             stmt.setNull(53, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_ADUANA()))
             stmt.setString(54, valueObject.getID_ADUANA());
            else
             stmt.setNull(54, Types.INTEGER); 
            if(Funciones.contarCadena(valueObject.getNUMEROFACTURA(), 30))
             stmt.setString(55, valueObject.getNUMEROFACTURA());
            else
             stmt.setNull(55, Types.VARCHAR); 
            if(Funciones.esFecha(valueObject.getFECHAFACTURA()))
             stmt.setDate(56, Funciones.convFechaSSQL(valueObject.getFECHAFACTURA())); 
            else
             stmt.setNull(56, Types.DATE);
            if(Funciones.esEntero(valueObject.getID_MOTIVOCANCELACION())) 
             stmt.setString(57, valueObject.getID_MOTIVOCANCELACION()); 
            else
             stmt.setNull(57, Types.INTEGER);
            if(Funciones.esFecha(valueObject.getFECHACANCELACIONVEHICULO()))
             stmt.setDate(58, Funciones.convFechaSSQL(valueObject.getFECHACANCELACIONVEHICULO()));
            else
             stmt.setNull(58, Types.DATE);
            if(Funciones.contarCadena(valueObject.getRESOLUCIONCANCELACION(), 15))
             stmt.setString(59, valueObject.getRESOLUCIONCANCELACION()); 
            else
             stmt.setNull(59, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getLIMITACION(), 2))
             stmt.setString(60, valueObject.getLIMITACION()); 
            else
             stmt.setNull(60, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getPENDIENTEJUDICIAL(), 2))
             stmt.setString(61, valueObject.getPENDIENTEJUDICIAL()); 
            else
             stmt.setNull(61, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_NIVELSERVICIO()))
             stmt.setString(62, valueObject.getID_NIVELSERVICIO()); 
            else
             stmt.setNull(62, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_MODALIDADSERVICIO()))
             stmt.setString(63, valueObject.getID_MODALIDADSERVICIO()); 
            else
             stmt.setNull(63, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getIDORG_TRASLADOCTA())) 
             stmt.setString(64, valueObject.getIDORG_TRASLADOCTA()); 
            else
             stmt.setNull(64, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMOFICIOTRASLADO(), 10))
            stmt.setString(65, valueObject.getNUMOFICIOTRASLADO()); 
            else
             stmt.setNull(65, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getNUMFOLIOSTRASLADO()))
             stmt.setString(66, valueObject.getNUMFOLIOSTRASLADO()); 
            else
             stmt.setNull(66, Types.INTEGER);
            if(Funciones.contarCadena( valueObject.getVOLAD_ANTERIOR(), 10))
             stmt.setString(67, valueObject.getVOLAD_ANTERIOR()); 
            else
             stmt.setNull(67, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getCAPACIDADTON(), 10))
             stmt.setString(68, valueObject.getCAPACIDADTON()); 
            else
             stmt.setNull(68, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMGUIATRASLADOCTA(), 10))
             stmt.setString(69, valueObject.getNUMGUIATRASLADOCTA()); 
            else
             stmt.setNull(69, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_TIPOOPERACION()))
             stmt.setString(70, valueObject.getID_TIPOOPERACION());
            else
             stmt.setNull(70, Types.INTEGER); 
            if(Funciones.contarCadena(valueObject.getVEHEXTRANJERO(), 1))
             stmt.setString(71, valueObject.getVEHEXTRANJERO()); 
            else
             stmt.setNull(71, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAINIINMOVILIZA()))
             stmt.setDate(72, Funciones.convFechaSSQL(valueObject.getFECHAINIINMOVILIZA()));
            else
             stmt.setNull(72, Types.DATE); 
            if(Funciones.esFecha(valueObject.getFECHAFININMOVILIZA()))              
             stmt.setDate(73, Funciones.convFechaSSQL(valueObject.getFECHAFININMOVILIZA())); 
            else
             stmt.setNull(73, Types.DATE);
            if(Funciones.contarCadena(valueObject.getVEHFORANEO(), 1))
             stmt.setString(74, valueObject.getVEHFORANEO()); 
            else
             stmt.setNull(74, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_MARCAPPAL()))
             stmt.setString(75, valueObject.getID_MARCAPPAL());
            else
             stmt.setNull(75, Types.INTEGER); 
            if(Funciones.esEntero(valueObject.getID_LINEAPPAL()))
             stmt.setString(76, valueObject.getID_LINEAPPAL());
            else
             stmt.setNull(76, Types.INTEGER); 
            if(Funciones.contarCadena(valueObject.getCOD_ADMINISTRACION(), 40))
             stmt.setString(77, valueObject.getCOD_ADMINISTRACION()); 
            else
             stmt.setNull(77, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNIT_IMPORTADOR(), 40)) 
             stmt.setString(78, valueObject.getNIT_IMPORTADOR()); 
            else
             stmt.setNull(78, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNRO_FORMULARIO(), 40))
             stmt.setString(79, valueObject.getNRO_FORMULARIO());
            else
             stmt.setNull(79, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNRO_AUTOADHESIVO(), 40))
             stmt.setString(80, valueObject.getNRO_AUTOADHESIVO()); 
            else
             stmt.setNull(80, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTANTIGUOCLASICO()))
             stmt.setString(81, valueObject.getID_RUNTANTIGUOCLASICO());
            else
             stmt.setNull(81, Types.INTEGER); 
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOMATRICULA())) 
             stmt.setString(82, valueObject.getID_RUNTTIPOMATRICULA()); 
            else
             stmt.setNull(82, Types.INTEGER);
            if(Funciones.esFecha(valueObject.getFECHAINIVIGENCIA())) 
             stmt.setDate(83, Funciones.convFechaSSQL(valueObject.getFECHAINIVIGENCIA())); 
            else
             stmt.setNull(83, Types.DATE);
            if(Funciones.esFecha(valueObject.getFECHAFINVIGENCIA()))             
             stmt.setDate(84, Funciones.convFechaSSQL(valueObject.getFECHAFINVIGENCIA()));
            else
             stmt.setNull(84, Types.DATE); 
            if(Funciones.contarCadena(valueObject.getFICHATECNICAHOMOLOGA(), 20))
             stmt.setString(85, valueObject.getFICHATECNICAHOMOLOGA()); 
            else
             stmt.setNull(85, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getFICHAHOMOLOGACARROCERIA(), 20))
             stmt.setString(86, valueObject.getFICHAHOMOLOGACARROCERIA());
            else
             stmt.setNull(86, Types.VARCHAR); 
            if(Funciones.contarCadena(valueObject.getOBSERVACION(), 50)) 
             stmt.setString(87, valueObject.getOBSERVACION());
            else
             stmt.setNull(87, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getVEHIREPOSICION(), 10))
             stmt.setString(88, valueObject.getVEHIREPOSICION()); 
            else
             stmt.setNull(88, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getVEHIDONADO(), 10)) 
             stmt.setString(89, valueObject.getVEHIDONADO());
            else
             stmt.setNull(89, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMEROVIN(), 30)) 
             stmt.setString(90, valueObject.getNUMEROVIN()); 
            else
             stmt.setNull(90, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMEROAUTOMOTOR(), 30))
             stmt.setString(91, valueObject.getNUMEROAUTOMOTOR()); 
            else
             stmt.setNull(91, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOMOTOR()))
             stmt.setString(92, valueObject.getID_RUNTTIPOMOTOR()); 
            else
             stmt.setNull(92, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getESIMPORTADO(), 5))
             stmt.setString(93, valueObject.getESIMPORTADO()); 
            else
             stmt.setNull(93, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTPAISES()))
             stmt.setString(94, valueObject.getID_RUNTPAISES()); 
            else
             stmt.setNull(94, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getANOFABRICACION()))
             stmt.setString(95, valueObject.getANOFABRICACION());
            else
             stmt.setNull(95, Types.INTEGER); 
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOREGISTRO()))
             stmt.setString(96, valueObject.getID_RUNTTIPOREGISTRO());
            else
             stmt.setNull(96, Types.INTEGER); 
            if(Funciones.esEntero(valueObject.getID_RUNTRADIOACCION()))
             stmt.setString(97, valueObject.getID_RUNTRADIOACCION()); 
            else
             stmt.setNull(97, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getVLRPOLIZA()))
             stmt.setString(98, valueObject.getVLRPOLIZA());
            else
             stmt.setNull(98, Types.INTEGER); 
            if(Funciones.esEntero(valueObject.getID_RUNTCONCESIONARIO()))
             stmt.setString(99, valueObject.getID_RUNTCONCESIONARIO()); 
            else
             stmt.setNull(99, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMEROFACTURA_MOTOR(), 20))
             stmt.setString(100, valueObject.getNUMEROFACTURA_MOTOR()); 
            else
             stmt.setNull(100, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAFACTURA_MOTOR()))
             stmt.setDate(101, Funciones.convFechaSSQL(valueObject.getFECHAFACTURA_MOTOR())); 
            else
             stmt.setNull(101, Types.DATE);
            if(Funciones.contarCadena(valueObject.getEMPPER_MOTOR(), 3)) 
             stmt.setString(102, valueObject.getEMPPER_MOTOR());
            else
             stmt.setNull(102, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_PROPIETARIO_MOTOR()))
             stmt.setString(103, valueObject.getID_PROPIETARIO_MOTOR());
            else
             stmt.setNull(103, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getMARCAAUTOMOTORMIGRADO(), 5))
             stmt.setString(104, valueObject.getMARCAAUTOMOTORMIGRADO()); 
            else
             stmt.setNull(104, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTORIGENREGISTRO()))
             stmt.setString(105, valueObject.getID_RUNTORIGENREGISTRO());
            else
             stmt.setNull(105, Types.INTEGER); 
            if(Funciones.esEntero(valueObject.getID_RUNTGRUPO()))
             stmt.setString(106, valueObject.getID_RUNTGRUPO()); 
            else
             stmt.setNull(106, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getSEGURIDADESTADO(), 5))
             stmt.setString(107, valueObject.getSEGURIDADESTADO()); 
            else
             stmt.setNull(107, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getENSENANZA(), 5)) 
             stmt.setString(108, valueObject.getENSENANZA());
            else
             stmt.setNull(108, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMEROFICHATECNICA(), 15))
             stmt.setString(109, valueObject.getNUMEROFICHATECNICA()); 
            else
             stmt.setNull(109, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getESTAREPOTENCIADO(), 5))
             stmt.setString(110, valueObject.getESTAREPOTENCIADO()); 
            else
             stmt.setNull(110, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_TIPOPLACA())) 
             stmt.setString(111, valueObject.getID_TIPOPLACA());
            else
             stmt.setNull(111, Types.INTEGER); 
            if(Funciones.contarCadena(valueObject.getESTADO_MOTOR(), 15))
             stmt.setString(112, valueObject.getESTADO_MOTOR()); 
            else
             stmt.setNull(112, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOPLACA()))
             stmt.setString(113, valueObject.getID_RUNTTIPOPLACA()); 
            else
             stmt.setNull(113, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getRECUPERACION_MOTOR(), 1)) 
             stmt.setString(114, valueObject.getRECUPERACION_MOTOR()); 
            else
             stmt.setNull(114, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RECIBOLIQCAN()))
             stmt.setString(115, valueObject.getID_RECIBOLIQCAN()); 
            else
             stmt.setNull(115, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getIDLOGIN_CANCELA()))
             stmt.setString(116, valueObject.getIDLOGIN_CANCELA()); 
            else
             stmt.setNull(116, Types.INTEGER);
            
            if(Funciones.contarCadena(valueObject.getTIPOCANCELA(), 1))
             stmt.setString(117, valueObject.getTIPOCANCELA());
            else
             stmt.setNull(117, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getRECUPERAMOTOR(), 1))
             stmt.setString(118, valueObject.getRECUPERAMOTOR()); 
            else
             stmt.setNull(118, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getPORCENTAJEREPOSICION()))
             stmt.setString(119, valueObject.getPORCENTAJEREPOSICION()); 
            else
             stmt.setNull(119, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getVIN(), 100))
             stmt.setString(120, valueObject.getVIN()); 
            else
             stmt.setNull(120, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_ORGTRANSITOORIGEN()))
             stmt.setString(121, valueObject.getID_ORGTRANSITOORIGEN()); 
            else
             stmt.setNull(121, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getAUTORIZATRASLADO(), 1)) 
             stmt.setString(122, valueObject.getAUTORIZATRASLADO());
            else
             stmt.setNull(122, Types.VARCHAR); 
            if(Funciones.contarCadena(valueObject.getVEHPLANORUNT(), 1))
             stmt.setString(123, valueObject.getVEHPLANORUNT());
            else
             stmt.setNull(123, Types.VARCHAR);  
             
            
              if(Funciones.contarCadena(valueObject.getENTE_JUDICIAL(), 100))
               stmt.setString(124, valueObject.getENTE_JUDICIAL());
              else
               stmt.setNull(124, Types.VARCHAR);     
             
              if(Funciones.contarCadena(valueObject.getNUM_OFICIO_CANCELACION(), 1))
               stmt.setString(125, valueObject.getNUM_OFICIO_CANCELACION());
              else
               stmt.setNull(125, Types.INTEGER);     
             
              if(Funciones.contarCadena(valueObject.getNUM_IPAT(), 1))
               stmt.setString(126, valueObject.getNUM_IPAT());
              else
               stmt.setNull(126, Types.INTEGER);     
             
              if(Funciones.contarCadena(valueObject.getREGRABADO(), 100))
               stmt.setString(127, valueObject.getREGRABADO());
              else
               stmt.setNull(127, Types.VARCHAR);
            
               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          }               catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(e.getMessage());
                        }
         
         finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, Vehiculo valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE VEHICULO SET PLACA = ?, SERIE_MOTOR = ?, CILINDRAJE = ?, "
               + "MODELO = ?, NRO_PUERTAS = ?, PESO_BRUTO = ?, "
               + "DIST_EJES = ?, VOLAD_POSTER = ?, NRO_EJES = ?, "
               + "ANCHO = ?, LARGO = ?, ALTO = ?, "
               + "POTENCIA = ?, FECHA_MANIFIESTO = ?, POLIZA_NUM = ?, "
               + "FECHAVENCE_SEGURO = ?, FECHAREG = ?, ID_SERVICIO = ?, "
               + "ID_CVEHICULO = ?, ID_COMBUSTIBLE = ?, ID_TCARROCERIA = ?, "
               + "ID_TMAQUINA = ?, IDEMPRESA_ASEGURADORA = ?, ID_EMPSERVIPUBLICO = ?, "
               + "ID_MARCA = ?, ID_LINEA = ?, CAPACIDAD = ?, "
               + "COLOR = ?, FECHAVENCSEGURO = ?, ID_COLOR = ?, "
               + "ID_ESPVENAL = ?, EMP_FAVORECIDA = ?, CHASIS = ?, "
               + "NRO_MOTOR = ?, IDTIPDOCTOVEHI = ?, NUMDOCTO = ?, "
               + "FECHADOCTO = ?, IDORG_EXPIDE = ?, ACTA = ?, "
               + "MANIFIESTO = ?, FECHAVINCULACIONEMPRESA = ?, FECHADESVINCULACIONEMPRESA = ?, "
               + "VIDRIOS_POLARIZADOS = ?, BLINDADO = ?, MOTORREGRABADO = ?, "
               + "CHASISREGREBADO = ?, NUMSERIE_REGRABADO = ?, TARJETAOPERACION = ?, "
               + "CONCESIONARIO = ?, NUM_ACMANIF = ?, VLRFACTURA = ?, "
               + "IMPORTADOR = ?, ID_ADUANA = ?, NUMEROFACTURA = ?, "
               + "FECHAFACTURA = ?, ID_MOTIVOCANCELACION = ?, FECHACANCELACIONVEHICULO = ?, "
               + "RESOLUCIONCANCELACION = ?, LIMITACION = ?, PENDIENTEJUDICIAL = ?, "
               + "ID_NIVELSERVICIO = ?, ID_MODALIDADSERVICIO = ?, IDORG_TRASLADOCTA = ?, "
               + "NUMOFICIOTRASLADO = ?, NUMFOLIOSTRASLADO = ?, VOLAD_ANTERIOR = ?, "
               + "CAPACIDADTON = ?, NUMGUIATRASLADOCTA = ?, ID_TIPOOPERACION = ?, "
               + "VEHEXTRANJERO = ?, FECHAINIINMOVILIZA = ?, FECHAFININMOVILIZA = ?, "
               + "VEHFORANEO = ?, ID_MARCAPPAL = ?, ID_LINEAPPAL = ?, "
               + "COD_ADMINISTRACION = ?, NIT_IMPORTADOR = ?, NRO_FORMULARIO = ?, "
               + "NRO_AUTOADHESIVO = ?, ID_RUNTANTIGUOCLASICO = ?, ID_RUNTTIPOMATRICULA = ?, "
               + "FECHAINIVIGENCIA = ?, FECHAFINVIGENCIA = ?, FICHATECNICAHOMOLOGA = ?, "
               + "FICHAHOMOLOGACARROCERIA = ?, OBSERVACION = ?, VEHIREPOSICION = ?, "
               + "VEHIDONADO = ?, NUMEROVIN = ?, NUMEROAUTOMOTOR = ?, "
               + "ID_RUNTTIPOMOTOR = ?, ESIMPORTADO = ?, ID_RUNTPAISES = ?, "
               + "ANOFABRICACION = ?, ID_RUNTTIPOREGISTRO = ?, ID_RUNTRADIOACCION = ?, "
               + "VLRPOLIZA = ?, ID_RUNTCONCESIONARIO = ?, NUMEROFACTURA_MOTOR = ?, "
               + "FECHAFACTURA_MOTOR = ?, EMPPER_MOTOR = ?, ID_PROPIETARIO_MOTOR = ?, "
               + "MARCAAUTOMOTORMIGRADO = ?, ID_RUNTORIGENREGISTRO = ?, ID_RUNTGRUPO = ?, "
               + "SEGURIDADESTADO = ?, ENSENANZA = ?, NUMEROFICHATECNICA = ?, "
               + "ESTAREPOTENCIADO = ?, ID_TIPOPLACA = ?, ESTADO_MOTOR = ?, "
               + "ID_RUNTTIPOPLACA = ?, RECUPERACION_MOTOR = ?, ID_RECIBOLIQCAN = ?, "
               + "IDLOGIN_CANCELA = ?, TIPOCANCELA = ?, "
               + "RECUPERAMOTOR = ?, PORCENTAJEREPOSICION = ?, VIN = ?, "
               + "ID_ORGTRANSITOORIGEN = ?, AUTORIZATRASLADO = ?, VEHPLANORUNT = ?, ENTE_JUDICIAL = ?, NUM_OFICIO_CANCELACION = ?, NUM_IPAT = ?, REGRABADO = ? WHERE (ID_VEHICULO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              
            if(Funciones.contarCadena(valueObject.getPLACA(), 10))
             stmt.setString(1, valueObject.getPLACA()); 
            else              
             stmt.setNull(1, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getSERIE_MOTOR(), 25))
             stmt.setString(2, valueObject.getSERIE_MOTOR()); 
            else
             stmt.setNull(2, Types.VARCHAR);   
            if(Funciones.contarCadena(valueObject.getCILINDRAJE(), 10))
             stmt.setString(3, valueObject.getCILINDRAJE()); 
            else
             stmt.setNull(3, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getMODELO()))
             stmt.setString(4, valueObject.getMODELO()); 
            else
             stmt.setNull(4, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getNRO_PUERTAS()))             
             stmt.setString(5, valueObject.getNRO_PUERTAS());
            else
             stmt.setNull(5, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getPESO_BRUTO(), 5))
             stmt.setString(6, valueObject.getPESO_BRUTO()); 
            else
             stmt.setNull(6, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getDIST_EJES(), 10))
             stmt.setString(7, valueObject.getDIST_EJES()); 
            else
             stmt.setNull(7, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getVOLAD_POSTER(), 10))
             stmt.setString(8, valueObject.getVOLAD_POSTER());
            else
             stmt.setNull(8, Types.VARCHAR);
            if(Funciones.esEntero( valueObject.getNRO_EJES()))             
             stmt.setString(9, valueObject.getNRO_EJES()); 
            else
             stmt.setNull(9, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getANCHO(), 5)) 
             stmt.setString(10, valueObject.getANCHO());  
            else
             stmt.setNull(10, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getLARGO(), 5))
             stmt.setString(11, valueObject.getLARGO()); 
            else
             stmt.setNull(11, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getALTO(), 5))
             stmt.setString(12, valueObject.getALTO()); 
            else
             stmt.setNull(12, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getPOTENCIA(), 10))
             stmt.setString(13, valueObject.getPOTENCIA()); 
            else
             stmt.setNull(13, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHA_MANIFIESTO()))                          
             stmt.setDate(14, Funciones.convFechaSSQL(valueObject.getFECHA_MANIFIESTO()));
            else
             stmt.setNull(14, Types.DATE);
            if(Funciones.contarCadena(valueObject.getPOLIZA_NUM(), 20))
             stmt.setString(15, valueObject.getPOLIZA_NUM()); 
            else
             stmt.setNull(15, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAVENCE_SEGURO()))
             stmt.setDate(16, Funciones.convFechaSSQL(valueObject.getFECHAVENCE_SEGURO())); 
            else
             stmt.setNull(16, Types.DATE);
            if(Funciones.esFecha(valueObject.getFECHAREG()))
             stmt.setDate(17, Funciones.convFechaSSQL(valueObject.getFECHAREG())); 
            else
             stmt.setNull(17, Types.DATE);
            if(Funciones.esEntero(valueObject.getID_SERVICIO()))
             stmt.setString(18, valueObject.getID_SERVICIO()); 
            else
             stmt.setNull(18, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_CVEHICULO()))
             stmt.setString(19, valueObject.getID_CVEHICULO()); 
            else
             stmt.setNull(19, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_COMBUSTIBLE()))
             stmt.setString(20, valueObject.getID_COMBUSTIBLE()); 
            else
             stmt.setNull(20, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_TCARROCERIA()))
             stmt.setString(21, valueObject.getID_TCARROCERIA()); 
            else
             stmt.setNull(21, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_TMAQUINA()))
             stmt.setString(22, valueObject.getID_TMAQUINA()); 
            else
             stmt.setNull(22, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getIDEMPRESA_ASEGURADORA()))
             stmt.setString(23, valueObject.getIDEMPRESA_ASEGURADORA()); 
            else
             stmt.setNull(23, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_EMPSERVIPUBLICO()))
             stmt.setString(24, valueObject.getID_EMPSERVIPUBLICO()); //Error converting to int. null
            else
             stmt.setNull(24, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getID_MARCA(), 2))
             stmt.setString(25, valueObject.getID_MARCA());// Data truncation
            else
             stmt.setNull(25, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_LINEA()))
             stmt.setString(26, valueObject.getID_LINEA()); //Error converting to int. null
            else
             stmt.setNull(26, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getCAPACIDAD(), 10))
             stmt.setString(27, valueObject.getCAPACIDAD());            
            else
             stmt.setNull(27, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getCOLOR(), 100))
             stmt.setString(28, valueObject.getCOLOR()); 
            else
             stmt.setNull(28, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAVENCSEGURO()))
             stmt.setDate(29, Funciones.convFechaSSQL(valueObject.getFECHAVENCSEGURO())); 
            else
             stmt.setNull(29, Types.DATE);   
            if(Funciones.esEntero(valueObject.getID_COLOR()))
            stmt.setString(30, valueObject.getID_COLOR());
            else
            stmt.setNull(30, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_ESPVENAL()))
            stmt.setString(31, valueObject.getID_ESPVENAL());
            else
            stmt.setNull(31, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getEMP_FAVORECIDA(), 80))
            stmt.setString(32, valueObject.getEMP_FAVORECIDA());
            else
            stmt.setNull(32, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getCHASIS(), 40))
            stmt.setString(33, valueObject.getCHASIS());
            else
            stmt.setNull(33, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNRO_MOTOR(), 25))
            stmt.setString(34, valueObject.getNRO_MOTOR());
            else
            stmt.setNull(34, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getIDTIPDOCTOVEHI()))
            stmt.setString(35, valueObject.getIDTIPDOCTOVEHI());
            else
            stmt.setNull(35, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMDOCTO(), 20))
            stmt.setString(36, valueObject.getNUMDOCTO());
            else
            stmt.setNull(36, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHADOCTO()))
            stmt.setDate(37, Funciones.convFechaSSQL(valueObject.getFECHADOCTO()));
            else
            stmt.setNull(37, Types.DATE);
            if(Funciones.esEntero(valueObject.getIDORG_EXPIDE()))
            stmt.setString(38, valueObject.getIDORG_EXPIDE());
            else
            stmt.setNull(38, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getACTA(), 2))
            stmt.setString(39, valueObject.getACTA());
            else
            stmt.setNull(39, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getMANIFIESTO(), 2))
            stmt.setString(40, valueObject.getMANIFIESTO());
            else
            stmt.setNull(40, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAVINCULACIONEMPRESA()))
            stmt.setDate(41, Funciones.convFechaSSQL(valueObject.getFECHAVINCULACIONEMPRESA()));
            else
            stmt.setNull(41, Types.DATE);
                        
              
            if (Funciones.esFecha(valueObject.getFECHADESVINCULACIONEMPRESA()))
              stmt.setDate(42, Funciones.convFechaSSQL(valueObject.getFECHADESVINCULACIONEMPRESA()));
            else
              stmt.setNull(42, Types.DATE);
            
              
            if(Funciones.contarCadena(valueObject.getVIDRIOS_POLARIZADOS(), 2))
            stmt.setString(43, valueObject.getVIDRIOS_POLARIZADOS());
            else
            stmt.setNull(43, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getBLINDADO(), 2))
            stmt.setString(44, valueObject.getBLINDADO());
            else
            stmt.setNull(44, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getMOTORREGRABADO(), 2))
            stmt.setString(45, valueObject.getMOTORREGRABADO());
            else
            stmt.setNull(45, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getCHASISREGREBADO(), 2))
            stmt.setString(46, valueObject.getCHASISREGREBADO());
            else
            stmt.setNull(46, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMSERIE_REGRABADO(), 2))
            stmt.setString(47, valueObject.getNUMSERIE_REGRABADO());
            else
            stmt.setNull(47, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getTARJETAOPERACION(), 20))
            stmt.setString(48, valueObject.getTARJETAOPERACION());
            else
            stmt.setNull(48, Types.VARCHAR);
            if(Funciones.contarCadena( valueObject.getCONCESIONARIO(), 20))
            stmt.setString(49, valueObject.getCONCESIONARIO());
            else
            stmt.setNull(49, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUM_ACMANIF(), 30))
            stmt.setString(50, valueObject.getNUM_ACMANIF());
            else
            stmt.setNull(50, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getVLRFACTURA()))
            stmt.setString(51, valueObject.getVLRFACTURA());
            else
            stmt.setNull(51, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getIMPORTADOR(), 30))
            stmt.setString(52, valueObject.getIMPORTADOR());
            else
            stmt.setNull(52, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_ADUANA()))
            stmt.setString(53, valueObject.getID_ADUANA());
            else
            stmt.setNull(53, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMEROFACTURA(), 30))
            stmt.setString(54, valueObject.getNUMEROFACTURA());
            else
            stmt.setNull(54, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAFACTURA()))
            stmt.setDate(55, Funciones.convFechaSSQL(valueObject.getFECHAFACTURA()));
            else
            stmt.setNull(55, Types.DATE);
            if(Funciones.esEntero(valueObject.getID_MOTIVOCANCELACION()))
            stmt.setString(56, valueObject.getID_MOTIVOCANCELACION());
            else
            stmt.setNull(56, Types.INTEGER);
            if(Funciones.esFecha(valueObject.getFECHACANCELACIONVEHICULO()))
            stmt.setDate(57, Funciones.convFechaSSQL(valueObject.getFECHACANCELACIONVEHICULO()));
            else
            stmt.setNull(57, Types.DATE);
            if(Funciones.contarCadena(valueObject.getRESOLUCIONCANCELACION(), 15))
            stmt.setString(58, valueObject.getRESOLUCIONCANCELACION());
            else
            stmt.setNull(58, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getLIMITACION(), 2))
            stmt.setString(59, valueObject.getLIMITACION());
            else
            stmt.setNull(59, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getPENDIENTEJUDICIAL(), 2))
            stmt.setString(60, valueObject.getPENDIENTEJUDICIAL());
            else
            stmt.setNull(60, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_NIVELSERVICIO()))
            stmt.setString(61, valueObject.getID_NIVELSERVICIO());
            else
            stmt.setNull(61, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_MODALIDADSERVICIO()))
            stmt.setString(62, valueObject.getID_MODALIDADSERVICIO());
            else
            stmt.setNull(62, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getIDORG_TRASLADOCTA()))
            stmt.setString(63, valueObject.getIDORG_TRASLADOCTA());
            else
            stmt.setNull(63, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMOFICIOTRASLADO(), 10))
            stmt.setString(64, valueObject.getNUMOFICIOTRASLADO());
            else
            stmt.setNull(64, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getNUMFOLIOSTRASLADO()))
            stmt.setString(65, valueObject.getNUMFOLIOSTRASLADO());
            else
            stmt.setNull(65, Types.INTEGER);
            if(Funciones.contarCadena( valueObject.getVOLAD_ANTERIOR(), 10))
            stmt.setString(66, valueObject.getVOLAD_ANTERIOR());
            else
            stmt.setNull(66, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getCAPACIDADTON(), 10))
            stmt.setString(67, valueObject.getCAPACIDADTON());
            else
            stmt.setNull(67, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMGUIATRASLADOCTA(), 10))
            stmt.setString(68, valueObject.getNUMGUIATRASLADOCTA());
            else
            stmt.setNull(68, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_TIPOOPERACION()))
            stmt.setString(69, valueObject.getID_TIPOOPERACION());
            else
            stmt.setNull(69, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getVEHEXTRANJERO(), 1))
            stmt.setString(70, valueObject.getVEHEXTRANJERO());
            else
            stmt.setNull(70, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAINIINMOVILIZA()))
            stmt.setDate(71, Funciones.convFechaSSQL(valueObject.getFECHAINIINMOVILIZA()));
            else
            stmt.setNull(71, Types.DATE);
            if(Funciones.esFecha(valueObject.getFECHAFININMOVILIZA()))
            stmt.setDate(72, Funciones.convFechaSSQL(valueObject.getFECHAFININMOVILIZA()));
            else
            stmt.setNull(72, Types.DATE);
            if(Funciones.contarCadena(valueObject.getVEHFORANEO(), 1))
            stmt.setString(73, valueObject.getVEHFORANEO());
            else
            stmt.setNull(73, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_MARCAPPAL()))
            stmt.setString(74, valueObject.getID_MARCAPPAL());
            else
            stmt.setNull(74, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_LINEAPPAL()))
            stmt.setString(75, valueObject.getID_LINEAPPAL());
            else
            stmt.setNull(75, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getCOD_ADMINISTRACION(), 40))
            stmt.setString(76, valueObject.getCOD_ADMINISTRACION());
            else
            stmt.setNull(76, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNIT_IMPORTADOR(), 40))
            stmt.setString(77, valueObject.getNIT_IMPORTADOR());
            else
            stmt.setNull(77, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNRO_FORMULARIO(), 40))
            stmt.setString(78, valueObject.getNRO_FORMULARIO());
            else
            stmt.setNull(78, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNRO_AUTOADHESIVO(), 40))
            stmt.setString(79, valueObject.getNRO_AUTOADHESIVO());
            else
            stmt.setNull(79, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTANTIGUOCLASICO()))
            stmt.setString(80, valueObject.getID_RUNTANTIGUOCLASICO());
            else
            stmt.setNull(80, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOMATRICULA()))
            stmt.setString(81, valueObject.getID_RUNTTIPOMATRICULA());
            else
            stmt.setNull(81, Types.INTEGER);
            if(Funciones.esFecha(valueObject.getFECHAINIVIGENCIA()))
            stmt.setDate(82, Funciones.convFechaSSQL(valueObject.getFECHAINIVIGENCIA()));
            else
            stmt.setNull(82, Types.DATE);
            if(Funciones.esFecha(valueObject.getFECHAFINVIGENCIA()))
            stmt.setDate(83, Funciones.convFechaSSQL(valueObject.getFECHAFINVIGENCIA()));
            else
            stmt.setNull(83, Types.DATE);
            if(Funciones.contarCadena(valueObject.getFICHATECNICAHOMOLOGA(), 20))
            stmt.setString(84, valueObject.getFICHATECNICAHOMOLOGA());
            else
            stmt.setNull(84, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getFICHAHOMOLOGACARROCERIA(), 20))
            stmt.setString(85, valueObject.getFICHAHOMOLOGACARROCERIA());
            else
            stmt.setNull(85, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getOBSERVACION(), 50))
            stmt.setString(86, valueObject.getOBSERVACION());
            else
            stmt.setNull(86, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getVEHIREPOSICION(), 10))
            stmt.setString(87, valueObject.getVEHIREPOSICION());
            else
            stmt.setNull(87, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getVEHIDONADO(), 10))
            stmt.setString(88, valueObject.getVEHIDONADO());
            else
            stmt.setNull(88, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMEROVIN(), 30))
            stmt.setString(89, valueObject.getNUMEROVIN());
            else
            stmt.setNull(89, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMEROAUTOMOTOR(), 30))
            stmt.setString(90, valueObject.getNUMEROAUTOMOTOR());
            else
            stmt.setNull(90, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOMOTOR()))
            stmt.setString(91, valueObject.getID_RUNTTIPOMOTOR());
            else
            stmt.setNull(91, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getESIMPORTADO(), 5))
            stmt.setString(92, valueObject.getESIMPORTADO());
            else
            stmt.setNull(92, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTPAISES()))
            stmt.setString(93, valueObject.getID_RUNTPAISES());
            else
            stmt.setNull(93, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getANOFABRICACION()))
            stmt.setString(94, valueObject.getANOFABRICACION());
            else
            stmt.setNull(94, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOREGISTRO()))
            stmt.setString(95, valueObject.getID_RUNTTIPOREGISTRO());
            else
            stmt.setNull(95, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_RUNTRADIOACCION()))
            stmt.setString(96, valueObject.getID_RUNTRADIOACCION());
            else
            stmt.setNull(96, Types.INTEGER);
            if(Funciones.esDouble(valueObject.getVLRPOLIZA()))
            stmt.setString(97, valueObject.getVLRPOLIZA());
            else
            stmt.setNull(97, Types.DOUBLE);
            if(Funciones.esEntero(valueObject.getID_RUNTCONCESIONARIO()))
            stmt.setString(98, valueObject.getID_RUNTCONCESIONARIO());
            else
            stmt.setNull(98, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMEROFACTURA_MOTOR(), 20))
            stmt.setString(99, valueObject.getNUMEROFACTURA_MOTOR());
            else
            stmt.setNull(99, Types.VARCHAR);
            if(Funciones.esFecha(valueObject.getFECHAFACTURA_MOTOR()))
            stmt.setDate(100, Funciones.convFechaSSQL(valueObject.getFECHAFACTURA_MOTOR()));
            else
            stmt.setNull(100, Types.DATE);
            if(Funciones.contarCadena(valueObject.getEMPPER_MOTOR(), 3))
            stmt.setString(101, valueObject.getEMPPER_MOTOR());
            else
            stmt.setNull(101, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_PROPIETARIO_MOTOR()))
            stmt.setString(102, valueObject.getID_PROPIETARIO_MOTOR());
            else
            stmt.setNull(102, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getMARCAAUTOMOTORMIGRADO(), 5))
            stmt.setString(103, valueObject.getMARCAAUTOMOTORMIGRADO());
            else
            stmt.setNull(103, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTORIGENREGISTRO()))
            stmt.setString(104, valueObject.getID_RUNTORIGENREGISTRO());
            else
            stmt.setNull(104, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getID_RUNTGRUPO()))
            stmt.setString(105, valueObject.getID_RUNTGRUPO());
            else
            stmt.setNull(105, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getSEGURIDADESTADO(), 5))
            stmt.setString(106, valueObject.getSEGURIDADESTADO());
            else
            stmt.setNull(106, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getENSENANZA(), 5))
            stmt.setString(107, valueObject.getENSENANZA());
            else
            stmt.setNull(107, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getNUMEROFICHATECNICA(), 15))
            stmt.setString(108, valueObject.getNUMEROFICHATECNICA());
            else
            stmt.setNull(108, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getESTAREPOTENCIADO(), 5))
            stmt.setString(109, valueObject.getESTAREPOTENCIADO());
            else
            stmt.setNull(109, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_TIPOPLACA()))
            stmt.setString(110, valueObject.getID_TIPOPLACA());
            else
            stmt.setNull(110, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getESTADO_MOTOR(), 15))
            stmt.setString(111, valueObject.getESTADO_MOTOR());
            else
            stmt.setNull(111, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RUNTTIPOPLACA()))
            stmt.setString(112, valueObject.getID_RUNTTIPOPLACA());
            else
            stmt.setNull(112, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getRECUPERACION_MOTOR(), 1))
            stmt.setString(113, valueObject.getRECUPERACION_MOTOR());
            else
            stmt.setNull(113, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_RECIBOLIQCAN()))
            stmt.setString(114, valueObject.getID_RECIBOLIQCAN());
            else
            stmt.setNull(114, Types.INTEGER);
            if(Funciones.esEntero(valueObject.getIDLOGIN_CANCELA()))
            stmt.setString(115, valueObject.getIDLOGIN_CANCELA());
            else
            stmt.setNull(115, Types.INTEGER);
            
            if(Funciones.contarCadena(valueObject.getTIPOCANCELA(), 1))
            stmt.setString(116, valueObject.getTIPOCANCELA());
            else
            stmt.setNull(116, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getRECUPERAMOTOR(), 1))
            stmt.setString(117, valueObject.getRECUPERAMOTOR());
            else
            stmt.setNull(117, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getPORCENTAJEREPOSICION()))
            stmt.setString(118, valueObject.getPORCENTAJEREPOSICION());
            else
            stmt.setNull(118, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getVIN(), 100))
            stmt.setString(119, valueObject.getVIN());
            else
            stmt.setNull(119, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getID_ORGTRANSITOORIGEN()))
            stmt.setString(120, valueObject.getID_ORGTRANSITOORIGEN());
            else
            stmt.setNull(120, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getAUTORIZATRASLADO(), 1))
            stmt.setString(121, valueObject.getAUTORIZATRASLADO());
            else
            stmt.setNull(121, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getVEHPLANORUNT(), 1))
            stmt.setString(122, valueObject.getVEHPLANORUNT());
            else
            stmt.setNull(122, Types.VARCHAR);
            
            if(Funciones.contarCadena(valueObject.getENTE_JUDICIAL(), 1))
             stmt.setString(123, valueObject.getENTE_JUDICIAL());
            else
             stmt.setNull(123, Types.VARCHAR);     

            if(Funciones.contarCadena(valueObject.getNUM_OFICIO_CANCELACION(), 100))
             stmt.setString(124, valueObject.getNUM_OFICIO_CANCELACION());
            else
             stmt.setNull(124, Types.INTEGER);     

            if(Funciones.contarCadena(valueObject.getNUM_IPAT(), 1))
             stmt.setString(125, valueObject.getNUM_IPAT());
            else
             stmt.setNull(125, Types.INTEGER);

            if(Funciones.contarCadena(valueObject.getREGRABADO(), 2))
                stmt.setString(126, valueObject.getREGRABADO());
            else
                stmt.setNull(126, Types.VARCHAR);

            stmt.setInt(127, valueObject.getID_VEHICULO()); 
            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                 //System.out.println("Object could not be saved! (PrimaryKey not found)");
                 throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                 //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                 throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }

        }              
        finally {
            if (stmt != null)
                stmt.close();
        }
    }

    public void actualizarTrasladoCuenta(Connection conn, Vehiculo valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE VEHICULO SET  ID_MOTIVOCANCELACION = ?, NUMOFICIOTRASLADO = ?, NUMFOLIOSTRASLADO = ?, " 
               + "NUMGUIATRASLADOCTA = ?, AUTORIZATRASLADO = ? WHERE (ID_VEHICULO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              
            if(Funciones.esEntero(valueObject.getID_MOTIVOCANCELACION()))
                stmt.setString(1, valueObject.getID_MOTIVOCANCELACION());
            else
                stmt.setNull(1, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMOFICIOTRASLADO(), 10))
                stmt.setString(2, valueObject.getNUMOFICIOTRASLADO());
            else
                stmt.setNull(2, Types.VARCHAR);
            if(Funciones.esEntero(valueObject.getNUMFOLIOSTRASLADO()))
                stmt.setString(3, valueObject.getNUMFOLIOSTRASLADO());
            else
                stmt.setNull(3, Types.INTEGER);
            if(Funciones.contarCadena(valueObject.getNUMGUIATRASLADOCTA(), 10))
                stmt.setString(4, valueObject.getNUMGUIATRASLADOCTA());
            else
                stmt.setNull(4, Types.VARCHAR);
            if(Funciones.contarCadena(valueObject.getAUTORIZATRASLADO(), 1))
                stmt.setString(5, valueObject.getAUTORIZATRASLADO());
            else
                stmt.setNull(5, Types.VARCHAR);
              
            stmt.setInt(6, valueObject.getID_VEHICULO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
              
          }              
          finally {
              if (stmt != null)
                  stmt.close();
          }
    }




    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, Vehiculo valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM VEHICULO WHERE (ID_VEHICULO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getID_VEHICULO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM VEHICULO";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM VEHICULO";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, Vehiculo valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM VEHICULO WHERE 1=1 ");

          if (valueObject.getID_VEHICULO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_VEHICULO = ").append(valueObject.getID_VEHICULO()).append(" ");
          }

          if (valueObject.getPLACA() != null) {
              if (first) { first = false; }
              sql.append("AND PLACA = '").append(valueObject.getPLACA()).append("' ");
          }

          if (valueObject.getSERIE_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND SERIE_MOTOR = '").append(valueObject.getSERIE_MOTOR()).append("' ");
          }

          if (valueObject.getCILINDRAJE() != null) {
              if (first) { first = false; }
              sql.append("AND CILINDRAJE = '").append(valueObject.getCILINDRAJE()).append("' ");
          }

          if (valueObject.getMODELO() != null) {
              if (first) { first = false; }
              sql.append("AND MODELO = '").append(valueObject.getMODELO()).append("' ");
          }

          if (valueObject.getNRO_PUERTAS() != null) {
              if (first) { first = false; }
              sql.append("AND NRO_PUERTAS = '").append(valueObject.getNRO_PUERTAS()).append("' ");
          }

          if (valueObject.getPESO_BRUTO() != null) {
              if (first) { first = false; }
              sql.append("AND PESO_BRUTO = '").append(valueObject.getPESO_BRUTO()).append("' ");
          }

          if (valueObject.getDIST_EJES() != null) {
              if (first) { first = false; }
              sql.append("AND DIST_EJES = '").append(valueObject.getDIST_EJES()).append("' ");
          }

          if (valueObject.getVOLAD_POSTER() != null) {
              if (first) { first = false; }
              sql.append("AND VOLAD_POSTER = '").append(valueObject.getVOLAD_POSTER()).append("' ");
          }

          if (valueObject.getNRO_EJES() != null) {
              if (first) { first = false; }
              sql.append("AND NRO_EJES = '").append(valueObject.getNRO_EJES()).append("' ");
          }

          if (valueObject.getANCHO() != null) {
              if (first) { first = false; }
              sql.append("AND ANCHO = '").append(valueObject.getANCHO()).append("' ");
          }

          if (valueObject.getLARGO() != null) {
              if (first) { first = false; }
              sql.append("AND LARGO = '").append(valueObject.getLARGO()).append("' ");
          }

          if (valueObject.getALTO() != null) {
              if (first) { first = false; }
              sql.append("AND ALTO = '").append(valueObject.getALTO()).append("' ");
          }

          if (valueObject.getPOTENCIA() != null) {
              if (first) { first = false; }
              sql.append("AND POTENCIA = '").append(valueObject.getPOTENCIA()).append("' ");
          }

          if (valueObject.getFECHA_MANIFIESTO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHA_MANIFIESTO = '").append(valueObject.getFECHA_MANIFIESTO()).append("' ");
          }

          if (valueObject.getPOLIZA_NUM() != null) {
              if (first) { first = false; }
              sql.append("AND POLIZA_NUM = '").append(valueObject.getPOLIZA_NUM()).append("' ");
          }

          if (valueObject.getFECHAVENCE_SEGURO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAVENCE_SEGURO = '").append(valueObject.getFECHAVENCE_SEGURO()).append("' ");
          }

          if (valueObject.getFECHAREG() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAREG = '").append(valueObject.getFECHAREG()).append("' ");
          }

          if (valueObject.getID_SERVICIO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_SERVICIO = '").append(valueObject.getID_SERVICIO()).append("' ");
          }

          if (valueObject.getID_CVEHICULO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_CVEHICULO = '").append(valueObject.getID_CVEHICULO()).append("' ");
          }

          if (valueObject.getID_COMBUSTIBLE() != null) {
              if (first) { first = false; }
              sql.append("AND ID_COMBUSTIBLE = '").append(valueObject.getID_COMBUSTIBLE()).append("' ");
          }

          if (valueObject.getID_TCARROCERIA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_TCARROCERIA = '").append(valueObject.getID_TCARROCERIA()).append("' ");
          }

          if (valueObject.getID_TMAQUINA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_TMAQUINA = '").append(valueObject.getID_TMAQUINA()).append("' ");
          }

          if (valueObject.getIDEMPRESA_ASEGURADORA() != null) {
              if (first) { first = false; }
              sql.append("AND IDEMPRESA_ASEGURADORA = '").append(valueObject.getIDEMPRESA_ASEGURADORA()).append("' ");
          }

          if (valueObject.getID_EMPSERVIPUBLICO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_EMPSERVIPUBLICO = '").append(valueObject.getID_EMPSERVIPUBLICO()).append("' ");
          }

          if (valueObject.getID_MARCA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_MARCA = '").append(valueObject.getID_MARCA()).append("' ");
          }

          if (valueObject.getID_LINEA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_LINEA = '").append(valueObject.getID_LINEA()).append("' ");
          }

          if (valueObject.getCAPACIDAD() != null) {
              if (first) { first = false; }
              sql.append("AND CAPACIDAD = '").append(valueObject.getCAPACIDAD()).append("' ");
          }

          if (valueObject.getCOLOR() != null) {
              if (first) { first = false; }
              sql.append("AND COLOR = '").append(valueObject.getCOLOR()).append("' ");
          }

          if (valueObject.getFECHAVENCSEGURO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAVENCSEGURO = '").append(valueObject.getFECHAVENCSEGURO()).append("' ");
          }

          if (valueObject.getID_COLOR() != null) {
              if (first) { first = false; }
              sql.append("AND ID_COLOR = '").append(valueObject.getID_COLOR()).append("' ");
          }

          if (valueObject.getID_ESPVENAL() != null) {
              if (first) { first = false; }
              sql.append("AND ID_ESPVENAL = '").append(valueObject.getID_ESPVENAL()).append("' ");
          }

          if (valueObject.getEMP_FAVORECIDA() != null) {
              if (first) { first = false; }
              sql.append("AND EMP_FAVORECIDA = '").append(valueObject.getEMP_FAVORECIDA()).append("' ");
          }

          if (valueObject.getCHASIS() != null) {
              if (first) { first = false; }
              sql.append("AND CHASIS = '").append(valueObject.getCHASIS()).append("' ");
          }

          if (valueObject.getNRO_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND NRO_MOTOR = '").append(valueObject.getNRO_MOTOR()).append("' ");
          }

          if (valueObject.getIDTIPDOCTOVEHI() != null) {
              if (first) { first = false; }
              sql.append("AND IDTIPDOCTOVEHI = '").append(valueObject.getIDTIPDOCTOVEHI()).append("' ");
          }

          if (valueObject.getNUMDOCTO() != null) {
              if (first) { first = false; }
              sql.append("AND NUMDOCTO = '").append(valueObject.getNUMDOCTO()).append("' ");
          }

          if (valueObject.getFECHADOCTO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHADOCTO = '").append(valueObject.getFECHADOCTO()).append("' ");
          }

          if (valueObject.getIDORG_EXPIDE() != null) {
              if (first) { first = false; }
              sql.append("AND IDORG_EXPIDE = '").append(valueObject.getIDORG_EXPIDE()).append("' ");
          }

          if (valueObject.getACTA() != null) {
              if (first) { first = false; }
              sql.append("AND ACTA = '").append(valueObject.getACTA()).append("' ");
          }

          if (valueObject.getMANIFIESTO() != null) {
              if (first) { first = false; }
              sql.append("AND MANIFIESTO = '").append(valueObject.getMANIFIESTO()).append("' ");
          }

          if (valueObject.getFECHAVINCULACIONEMPRESA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAVINCULACIONEMPRESA = '").append(valueObject.getFECHAVINCULACIONEMPRESA()).append("' ");
          }

          if (valueObject.getFECHADESVINCULACIONEMPRESA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHADESVINCULACIONEMPRESA = '").append(valueObject.getFECHADESVINCULACIONEMPRESA()).append("' ");
          }

          if (valueObject.getVIDRIOS_POLARIZADOS() != null) {
              if (first) { first = false; }
              sql.append("AND VIDRIOS_POLARIZADOS = '").append(valueObject.getVIDRIOS_POLARIZADOS()).append("' ");
          }

          if (valueObject.getBLINDADO() != null) {
              if (first) { first = false; }
              sql.append("AND BLINDADO = '").append(valueObject.getBLINDADO()).append("' ");
          }

          if (valueObject.getMOTORREGRABADO() != null) {
              if (first) { first = false; }
              sql.append("AND MOTORREGRABADO = '").append(valueObject.getMOTORREGRABADO()).append("' ");
          }

          if (valueObject.getCHASISREGREBADO() != null) {
              if (first) { first = false; }
              sql.append("AND CHASISREGREBADO = '").append(valueObject.getCHASISREGREBADO()).append("' ");
          }

          if (valueObject.getNUMSERIE_REGRABADO() != null) {
              if (first) { first = false; }
              sql.append("AND NUMSERIE_REGRABADO = '").append(valueObject.getNUMSERIE_REGRABADO()).append("' ");
          }

          if (valueObject.getTARJETAOPERACION() != null) {
              if (first) { first = false; }
              sql.append("AND TARJETAOPERACION = '").append(valueObject.getTARJETAOPERACION()).append("' ");
          }

          if (valueObject.getCONCESIONARIO() != null) {
              if (first) { first = false; }
              sql.append("AND CONCESIONARIO = '").append(valueObject.getCONCESIONARIO()).append("' ");
          }

          if (valueObject.getNUM_ACMANIF() != null) {
              if (first) { first = false; }
              sql.append("AND NUM_ACMANIF = '").append(valueObject.getNUM_ACMANIF()).append("' ");
          }

          if (valueObject.getVLRFACTURA() != null) {
              if (first) { first = false; }
              sql.append("AND VLRFACTURA = '").append(valueObject.getVLRFACTURA()).append("' ");
          }

          if (valueObject.getIMPORTADOR() != null) {
              if (first) { first = false; }
              sql.append("AND IMPORTADOR = '").append(valueObject.getIMPORTADOR()).append("' ");
          }

          if (valueObject.getID_ADUANA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_ADUANA = '").append(valueObject.getID_ADUANA()).append("' ");
          }

          if (valueObject.getNUMEROFACTURA() != null) {
              if (first) { first = false; }
              sql.append("AND NUMEROFACTURA = '").append(valueObject.getNUMEROFACTURA()).append("' ");
          }

          if (valueObject.getFECHAFACTURA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAFACTURA = '").append(valueObject.getFECHAFACTURA()).append("' ");
          }

          if (valueObject.getID_MOTIVOCANCELACION() != null) {
              if (first) { first = false; }
              sql.append("AND ID_MOTIVOCANCELACION = '").append(valueObject.getID_MOTIVOCANCELACION()).append("' ");
          }

          if (valueObject.getFECHACANCELACIONVEHICULO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHACANCELACIONVEHICULO = '").append(valueObject.getFECHACANCELACIONVEHICULO()).append("' ");
          }

          if (valueObject.getRESOLUCIONCANCELACION() != null) {
              if (first) { first = false; }
              sql.append("AND RESOLUCIONCANCELACION = '").append(valueObject.getRESOLUCIONCANCELACION()).append("' ");
          }

          if (valueObject.getLIMITACION() != null) {
              if (first) { first = false; }
              sql.append("AND LIMITACION = '").append(valueObject.getLIMITACION()).append("' ");
          }

          if (valueObject.getPENDIENTEJUDICIAL() != null) {
              if (first) { first = false; }
              sql.append("AND PENDIENTEJUDICIAL = '").append(valueObject.getPENDIENTEJUDICIAL()).append("' ");
          }

          if (valueObject.getID_NIVELSERVICIO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_NIVELSERVICIO = '").append(valueObject.getID_NIVELSERVICIO()).append("' ");
          }

          if (valueObject.getID_MODALIDADSERVICIO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_MODALIDADSERVICIO = '").append(valueObject.getID_MODALIDADSERVICIO()).append("' ");
          }

          if (valueObject.getIDORG_TRASLADOCTA() != null) {
              if (first) { first = false; }
              sql.append("AND IDORG_TRASLADOCTA = '").append(valueObject.getIDORG_TRASLADOCTA()).append("' ");
          }

          if (valueObject.getNUMOFICIOTRASLADO() != null) {
              if (first) { first = false; }
              sql.append("AND NUMOFICIOTRASLADO = '").append(valueObject.getNUMOFICIOTRASLADO()).append("' ");
          }

          if (valueObject.getNUMFOLIOSTRASLADO() != null) {
              if (first) { first = false; }
              sql.append("AND NUMFOLIOSTRASLADO = '").append(valueObject.getNUMFOLIOSTRASLADO()).append("' ");
          }

          if (valueObject.getVOLAD_ANTERIOR() != null) {
              if (first) { first = false; }
              sql.append("AND VOLAD_ANTERIOR = '").append(valueObject.getVOLAD_ANTERIOR()).append("' ");
          }

          if (valueObject.getCAPACIDADTON() != null) {
              if (first) { first = false; }
              sql.append("AND CAPACIDADTON = '").append(valueObject.getCAPACIDADTON()).append("' ");
          }

          if (valueObject.getNUMGUIATRASLADOCTA() != null) {
              if (first) { first = false; }
              sql.append("AND NUMGUIATRASLADOCTA = '").append(valueObject.getNUMGUIATRASLADOCTA()).append("' ");
          }

          if (valueObject.getID_TIPOOPERACION() != null) {
              if (first) { first = false; }
              sql.append("AND ID_TIPOOPERACION = '").append(valueObject.getID_TIPOOPERACION()).append("' ");
          }

          if (valueObject.getVEHEXTRANJERO() != null) {
              if (first) { first = false; }
              sql.append("AND VEHEXTRANJERO = '").append(valueObject.getVEHEXTRANJERO()).append("' ");
          }

          if (valueObject.getFECHAINIINMOVILIZA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAINIINMOVILIZA = '").append(valueObject.getFECHAINIINMOVILIZA()).append("' ");
          }

          if (valueObject.getFECHAFININMOVILIZA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAFININMOVILIZA = '").append(valueObject.getFECHAFININMOVILIZA()).append("' ");
          }

          if (valueObject.getVEHFORANEO() != null) {
              if (first) { first = false; }
              sql.append("AND VEHFORANEO = '").append(valueObject.getVEHFORANEO()).append("' ");
          }

          if (valueObject.getID_MARCAPPAL() != null) {
              if (first) { first = false; }
              sql.append("AND ID_MARCAPPAL = '").append(valueObject.getID_MARCAPPAL()).append("' ");
          }

          if (valueObject.getID_LINEAPPAL() != null) {
              if (first) { first = false; }
              sql.append("AND ID_LINEAPPAL = '").append(valueObject.getID_LINEAPPAL()).append("' ");
          }

          if (valueObject.getCOD_ADMINISTRACION() != null) {
              if (first) { first = false; }
              sql.append("AND COD_ADMINISTRACION = '").append(valueObject.getCOD_ADMINISTRACION()).append("' ");
          }

          if (valueObject.getNIT_IMPORTADOR() != null) {
              if (first) { first = false; }
              sql.append("AND NIT_IMPORTADOR = '").append(valueObject.getNIT_IMPORTADOR()).append("' ");
          }

          if (valueObject.getNRO_FORMULARIO() != null) {
              if (first) { first = false; }
              sql.append("AND NRO_FORMULARIO = '").append(valueObject.getNRO_FORMULARIO()).append("' ");
          }

          if (valueObject.getNRO_AUTOADHESIVO() != null) {
              if (first) { first = false; }
              sql.append("AND NRO_AUTOADHESIVO = '").append(valueObject.getNRO_AUTOADHESIVO()).append("' ");
          }

          if (valueObject.getID_RUNTANTIGUOCLASICO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTANTIGUOCLASICO = '").append(valueObject.getID_RUNTANTIGUOCLASICO()).append("' ");
          }

          if (valueObject.getID_RUNTTIPOMATRICULA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTTIPOMATRICULA = '").append(valueObject.getID_RUNTTIPOMATRICULA()).append("' ");
          }

          if (valueObject.getFECHAINIVIGENCIA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAINIVIGENCIA = '").append(valueObject.getFECHAINIVIGENCIA()).append("' ");
          }

          if (valueObject.getFECHAFINVIGENCIA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAFINVIGENCIA = '").append(valueObject.getFECHAFINVIGENCIA()).append("' ");
          }

          if (valueObject.getFICHATECNICAHOMOLOGA() != null) {
              if (first) { first = false; }
              sql.append("AND FICHATECNICAHOMOLOGA = '").append(valueObject.getFICHATECNICAHOMOLOGA()).append("' ");
          }

          if (valueObject.getFICHAHOMOLOGACARROCERIA() != null) {
              if (first) { first = false; }
              sql.append("AND FICHAHOMOLOGACARROCERIA = '").append(valueObject.getFICHAHOMOLOGACARROCERIA()).append("' ");
          }

          if (valueObject.getOBSERVACION() != null) {
              if (first) { first = false; }
              sql.append("AND OBSERVACION = '").append(valueObject.getOBSERVACION()).append("' ");
          }

          if (valueObject.getVEHIREPOSICION() != null) {
              if (first) { first = false; }
              sql.append("AND VEHIREPOSICION = '").append(valueObject.getVEHIREPOSICION()).append("' ");
          }

          if (valueObject.getVEHIDONADO() != null) {
              if (first) { first = false; }
              sql.append("AND VEHIDONADO = '").append(valueObject.getVEHIDONADO()).append("' ");
          }

          if (valueObject.getNUMEROVIN() != null) {
              if (first) { first = false; }
              sql.append("AND NUMEROVIN = '").append(valueObject.getNUMEROVIN()).append("' ");
          }

          if (valueObject.getNUMEROAUTOMOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND NUMEROAUTOMOTOR = '").append(valueObject.getNUMEROAUTOMOTOR()).append("' ");
          }

          if (valueObject.getID_RUNTTIPOMOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTTIPOMOTOR = '").append(valueObject.getID_RUNTTIPOMOTOR()).append("' ");
          }

          if (valueObject.getESIMPORTADO() != null) {
              if (first) { first = false; }
              sql.append("AND ESIMPORTADO = '").append(valueObject.getESIMPORTADO()).append("' ");
          }

          if (valueObject.getID_RUNTPAISES() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTPAISES = '").append(valueObject.getID_RUNTPAISES()).append("' ");
          }

          if (valueObject.getANOFABRICACION() != null) {
              if (first) { first = false; }
              sql.append("AND ANOFABRICACION = '").append(valueObject.getANOFABRICACION()).append("' ");
          }

          if (valueObject.getID_RUNTTIPOREGISTRO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTTIPOREGISTRO = '").append(valueObject.getID_RUNTTIPOREGISTRO()).append("' ");
          }

          if (valueObject.getID_RUNTRADIOACCION() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTRADIOACCION = '").append(valueObject.getID_RUNTRADIOACCION()).append("' ");
          }

          if (valueObject.getVLRPOLIZA() != null) {
              if (first) { first = false; }
              sql.append("AND VLRPOLIZA = '").append(valueObject.getVLRPOLIZA()).append("' ");
          }

          if (valueObject.getID_RUNTCONCESIONARIO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTCONCESIONARIO = '").append(valueObject.getID_RUNTCONCESIONARIO()).append("' ");
          }

          if (valueObject.getNUMEROFACTURA_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND NUMEROFACTURA_MOTOR = '").append(valueObject.getNUMEROFACTURA_MOTOR()).append("' ");
          }

          if (valueObject.getFECHAFACTURA_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAFACTURA_MOTOR = '").append(valueObject.getFECHAFACTURA_MOTOR()).append("' ");
          }

          if (valueObject.getEMPPER_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND EMPPER_MOTOR = '").append(valueObject.getEMPPER_MOTOR()).append("' ");
          }

          if (valueObject.getID_PROPIETARIO_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND ID_PROPIETARIO_MOTOR = '").append(valueObject.getID_PROPIETARIO_MOTOR()).append("' ");
          }

          if (valueObject.getMARCAAUTOMOTORMIGRADO() != null) {
              if (first) { first = false; }
              sql.append("AND MARCAAUTOMOTORMIGRADO = '").append(valueObject.getMARCAAUTOMOTORMIGRADO()).append("' ");
          }

          if (valueObject.getID_RUNTORIGENREGISTRO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTORIGENREGISTRO = '").append(valueObject.getID_RUNTORIGENREGISTRO()).append("' ");
          }

          if (valueObject.getID_RUNTGRUPO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTGRUPO = '").append(valueObject.getID_RUNTGRUPO()).append("' ");
          }

          if (valueObject.getSEGURIDADESTADO() != null) {
              if (first) { first = false; }
              sql.append("AND SEGURIDADESTADO = '").append(valueObject.getSEGURIDADESTADO()).append("' ");
          }

          if (valueObject.getENSENANZA() != null) {
              if (first) { first = false; }
              sql.append("AND ENSENANZA = '").append(valueObject.getENSENANZA()).append("' ");
          }

          if (valueObject.getNUMEROFICHATECNICA() != null) {
              if (first) { first = false; }
              sql.append("AND NUMEROFICHATECNICA = '").append(valueObject.getNUMEROFICHATECNICA()).append("' ");
          }

          if (valueObject.getESTAREPOTENCIADO() != null) {
              if (first) { first = false; }
              sql.append("AND ESTAREPOTENCIADO = '").append(valueObject.getESTAREPOTENCIADO()).append("' ");
          }

          if (valueObject.getID_TIPOPLACA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_TIPOPLACA = '").append(valueObject.getID_TIPOPLACA()).append("' ");
          }

          if (valueObject.getESTADO_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND ESTADO_MOTOR = '").append(valueObject.getESTADO_MOTOR()).append("' ");
          }

          if (valueObject.getID_RUNTTIPOPLACA() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTTIPOPLACA = '").append(valueObject.getID_RUNTTIPOPLACA()).append("' ");
          }

          if (valueObject.getRECUPERACION_MOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND RECUPERACION_MOTOR = '").append(valueObject.getRECUPERACION_MOTOR()).append("' ");
          }

          if (valueObject.getID_RECIBOLIQCAN() != null) {
              if (first) { first = false; }
              sql.append("AND ID_RECIBOLIQCAN = '").append(valueObject.getID_RECIBOLIQCAN()).append("' ");
          }

          if (valueObject.getIDLOGIN_CANCELA() != null) {
              if (first) { first = false; }
              sql.append("AND IDLOGIN_CANCELA = '").append(valueObject.getIDLOGIN_CANCELA()).append("' ");
          }

          if (valueObject.getFECHA_SISTEMA_CANCELA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHA_SISTEMA_CANCELA = '").append(valueObject.getFECHA_SISTEMA_CANCELA()).append("' ");
          }

          if (valueObject.getTIPOCANCELA() != null) {
              if (first) { first = false; }
              sql.append("AND TIPOCANCELA = '").append(valueObject.getTIPOCANCELA()).append("' ");
          }

          if (valueObject.getRECUPERAMOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND RECUPERAMOTOR = '").append(valueObject.getRECUPERAMOTOR()).append("' ");
          }

          if (valueObject.getPORCENTAJEREPOSICION() != null) {
              if (first) { first = false; }
              sql.append("AND PORCENTAJEREPOSICION = '").append(valueObject.getPORCENTAJEREPOSICION()).append("' ");
          }

          if (valueObject.getVIN() != null) {
              if (first) { first = false; }
              sql.append("AND VIN = '").append(valueObject.getVIN()).append("' ");
          }

          if (valueObject.getID_ORGTRANSITOORIGEN() != null) {
              if (first) { first = false; }
              sql.append("AND ID_ORGTRANSITOORIGEN = '").append(valueObject.getID_ORGTRANSITOORIGEN()).append("' ");
          }

          if (valueObject.getAUTORIZATRASLADO() != null) {
              if (first) { first = false; }
              sql.append("AND AUTORIZATRASLADO = '").append(valueObject.getAUTORIZATRASLADO()).append("' ");
          }
          
          if (valueObject.getVEHPLANORUNT() !=null) {
              if (first) { first = false; }
              sql.append("AND VEHPLANORUNT = '").append(valueObject.getVEHPLANORUNT()).append("' ");
          }
         
        if (valueObject.getENTE_JUDICIAL() !=null) {
            if (first) { first = false; }
            sql.append("AND ENTE_JUDICIAL = '").append(valueObject.getENTE_JUDICIAL()).append("' ");
        }
        
        if (valueObject.getNUM_OFICIO_CANCELACION() !=null) {
            if (first) { first = false; }
            sql.append("AND NUM_OFICIO_CANCELACION = '").append(valueObject.getNUM_OFICIO_CANCELACION()).append("' ");
        }
        if (valueObject.getNUM_IPAT () !=null) {
            if (first) { first = false; }
            sql.append("AND NUM_IPAT  = '").append(valueObject.getNUM_IPAT ()).append("' ");
        }        
        if (valueObject.getNUM_IPAT () !=null) {
            if (first) { first = false; }
            sql.append("AND ESTADO_VEHICULO  = '").append(valueObject.getESTADO_VEHICULO ()).append("' ");
        }
        
          sql.append("ORDER BY ID_VEHICULO ASC ");
         // System.out.println(sql);
          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, Vehiculo valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setID_VEHICULO(result.getInt("ID_VEHICULO")); 
                   valueObject.setPLACA(result.getString("PLACA")); 
                   valueObject.setSERIE_MOTOR(result.getString("SERIE_MOTOR")); 
                   valueObject.setCILINDRAJE(result.getString("CILINDRAJE")); 
                   valueObject.setMODELO(result.getString("MODELO")); 
                   valueObject.setNRO_PUERTAS(result.getString("NRO_PUERTAS")); 
                   valueObject.setPESO_BRUTO(result.getString("PESO_BRUTO")); 
                   valueObject.setDIST_EJES(result.getString("DIST_EJES")); 
                   valueObject.setVOLAD_POSTER(result.getString("VOLAD_POSTER")); 
                   valueObject.setNRO_EJES(result.getString("NRO_EJES")); 
                   valueObject.setANCHO(result.getString("ANCHO")); 
                   valueObject.setLARGO(result.getString("LARGO")); 
                   valueObject.setALTO(result.getString("ALTO")); 
                   valueObject.setPOTENCIA(result.getString("POTENCIA")); 
                   valueObject.setFECHA_MANIFIESTO(result.getString("FECHA_MANIFIESTO")); 
                   valueObject.setPOLIZA_NUM(result.getString("POLIZA_NUM")); 
                   valueObject.setFECHAVENCE_SEGURO(result.getString("FECHAVENCE_SEGURO")); 
                   valueObject.setFECHAREG(result.getString("FECHAREG")); 
                   valueObject.setID_SERVICIO(result.getString("ID_SERVICIO")); 
                   valueObject.setID_CVEHICULO(result.getString("ID_CVEHICULO")); 
                   valueObject.setID_COMBUSTIBLE(result.getString("ID_COMBUSTIBLE")); 
                   valueObject.setID_TCARROCERIA(result.getString("ID_TCARROCERIA")); 
                   valueObject.setID_TMAQUINA(result.getString("ID_TMAQUINA")); 
                   valueObject.setIDEMPRESA_ASEGURADORA(result.getString("IDEMPRESA_ASEGURADORA")); 
                   valueObject.setID_EMPSERVIPUBLICO(result.getString("ID_EMPSERVIPUBLICO")); 
                   valueObject.setID_MARCA(result.getString("ID_MARCA")); 
                   valueObject.setID_LINEA(result.getString("ID_LINEA")); 
                   valueObject.setCAPACIDAD(result.getString("CAPACIDAD")); 
                   valueObject.setCOLOR(result.getString("COLOR")); 
                   valueObject.setFECHAVENCSEGURO(result.getString("FECHAVENCSEGURO")); 
                   valueObject.setID_COLOR(result.getString("ID_COLOR")); 
                   valueObject.setID_ESPVENAL(result.getString("ID_ESPVENAL")); 
                   valueObject.setEMP_FAVORECIDA(result.getString("EMP_FAVORECIDA")); 
                   valueObject.setCHASIS(result.getString("CHASIS")); 
                   valueObject.setNRO_MOTOR(result.getString("NRO_MOTOR")); 
                   valueObject.setIDTIPDOCTOVEHI(result.getString("IDTIPDOCTOVEHI")); 
                   valueObject.setNUMDOCTO(result.getString("NUMDOCTO")); 
                   valueObject.setFECHADOCTO(result.getString("FECHADOCTO")); 
                   valueObject.setIDORG_EXPIDE(result.getString("IDORG_EXPIDE")); 
                   valueObject.setACTA(result.getString("ACTA")); 
                   valueObject.setMANIFIESTO(result.getString("MANIFIESTO")); 
                   valueObject.setFECHAVINCULACIONEMPRESA(result.getString("FECHAVINCULACIONEMPRESA")); 
                   valueObject.setFECHADESVINCULACIONEMPRESA(result.getString("FECHADESVINCULACIONEMPRESA")); 
                   valueObject.setVIDRIOS_POLARIZADOS(result.getString("VIDRIOS_POLARIZADOS")); 
                   valueObject.setBLINDADO(result.getString("BLINDADO")); 
                   valueObject.setMOTORREGRABADO(result.getString("MOTORREGRABADO")); 
                   valueObject.setCHASISREGREBADO(result.getString("CHASISREGREBADO")); 
                   valueObject.setNUMSERIE_REGRABADO(result.getString("NUMSERIE_REGRABADO")); 
                   valueObject.setTARJETAOPERACION(result.getString("TARJETAOPERACION")); 
                   valueObject.setCONCESIONARIO(result.getString("CONCESIONARIO")); 
                   valueObject.setNUM_ACMANIF(result.getString("NUM_ACMANIF")); 
                   valueObject.setVLRFACTURA(result.getString("VLRFACTURA")); 
                   valueObject.setIMPORTADOR(result.getString("IMPORTADOR")); 
                   valueObject.setID_ADUANA(result.getString("ID_ADUANA")); 
                   valueObject.setNUMEROFACTURA(result.getString("NUMEROFACTURA")); 
                   valueObject.setFECHAFACTURA(result.getString("FECHAFACTURA")); 
                   valueObject.setID_MOTIVOCANCELACION(result.getString("ID_MOTIVOCANCELACION")); 
                   valueObject.setFECHACANCELACIONVEHICULO(result.getString("FECHACANCELACIONVEHICULO")); 
                   valueObject.setRESOLUCIONCANCELACION(result.getString("RESOLUCIONCANCELACION")); 
                   valueObject.setLIMITACION(result.getString("LIMITACION")); 
                   valueObject.setPENDIENTEJUDICIAL(result.getString("PENDIENTEJUDICIAL")); 
                   valueObject.setID_NIVELSERVICIO(result.getString("ID_NIVELSERVICIO")); 
                   valueObject.setID_MODALIDADSERVICIO(result.getString("ID_MODALIDADSERVICIO")); 
                   valueObject.setIDORG_TRASLADOCTA(result.getString("IDORG_TRASLADOCTA")); 
                   valueObject.setNUMOFICIOTRASLADO(result.getString("NUMOFICIOTRASLADO")); 
                   valueObject.setNUMFOLIOSTRASLADO(result.getString("NUMFOLIOSTRASLADO")); 
                   valueObject.setVOLAD_ANTERIOR(result.getString("VOLAD_ANTERIOR")); 
                   valueObject.setCAPACIDADTON(result.getString("CAPACIDADTON")); 
                   valueObject.setNUMGUIATRASLADOCTA(result.getString("NUMGUIATRASLADOCTA")); 
                   valueObject.setID_TIPOOPERACION(result.getString("ID_TIPOOPERACION")); 
                   valueObject.setVEHEXTRANJERO(result.getString("VEHEXTRANJERO")); 
                   valueObject.setFECHAINIINMOVILIZA(result.getString("FECHAINIINMOVILIZA")); 
                   valueObject.setFECHAFININMOVILIZA(result.getString("FECHAFININMOVILIZA")); 
                   valueObject.setVEHFORANEO(result.getString("VEHFORANEO")); 
                   valueObject.setID_MARCAPPAL(result.getString("ID_MARCAPPAL")); 
                   valueObject.setID_LINEAPPAL(result.getString("ID_LINEAPPAL")); 
                   valueObject.setCOD_ADMINISTRACION(result.getString("COD_ADMINISTRACION")); 
                   valueObject.setNIT_IMPORTADOR(result.getString("NIT_IMPORTADOR")); 
                   valueObject.setNRO_FORMULARIO(result.getString("NRO_FORMULARIO")); 
                   valueObject.setNRO_AUTOADHESIVO(result.getString("NRO_AUTOADHESIVO")); 
                   valueObject.setID_RUNTANTIGUOCLASICO(result.getString("ID_RUNTANTIGUOCLASICO")); 
                   valueObject.setID_RUNTTIPOMATRICULA(result.getString("ID_RUNTTIPOMATRICULA")); 
                   valueObject.setFECHAINIVIGENCIA(result.getString("FECHAINIVIGENCIA")); 
                   valueObject.setFECHAFINVIGENCIA(result.getString("FECHAFINVIGENCIA")); 
                   valueObject.setFICHATECNICAHOMOLOGA(result.getString("FICHATECNICAHOMOLOGA")); 
                   valueObject.setFICHAHOMOLOGACARROCERIA(result.getString("FICHAHOMOLOGACARROCERIA")); 
                   valueObject.setOBSERVACION(result.getString("OBSERVACION")); 
                   valueObject.setVEHIREPOSICION(result.getString("VEHIREPOSICION")); 
                   valueObject.setVEHIDONADO(result.getString("VEHIDONADO")); 
                   valueObject.setNUMEROVIN(result.getString("NUMEROVIN")); 
                   valueObject.setNUMEROAUTOMOTOR(result.getString("NUMEROAUTOMOTOR")); 
                   valueObject.setID_RUNTTIPOMOTOR(result.getString("ID_RUNTTIPOMOTOR")); 
                   valueObject.setESIMPORTADO(result.getString("ESIMPORTADO")); 
                   valueObject.setID_RUNTPAISES(result.getString("ID_RUNTPAISES")); 
                   valueObject.setANOFABRICACION(result.getString("ANOFABRICACION")); 
                   valueObject.setID_RUNTTIPOREGISTRO(result.getString("ID_RUNTTIPOREGISTRO")); 
                   valueObject.setID_RUNTRADIOACCION(result.getString("ID_RUNTRADIOACCION")); 
                   valueObject.setVLRPOLIZA(result.getString("VLRPOLIZA")); 
                   valueObject.setID_RUNTCONCESIONARIO(result.getString("ID_RUNTCONCESIONARIO")); 
                   valueObject.setNUMEROFACTURA_MOTOR(result.getString("NUMEROFACTURA_MOTOR")); 
                   valueObject.setFECHAFACTURA_MOTOR(result.getString("FECHAFACTURA_MOTOR")); 
                   valueObject.setEMPPER_MOTOR(result.getString("EMPPER_MOTOR")); 
                   valueObject.setID_PROPIETARIO_MOTOR(result.getString("ID_PROPIETARIO_MOTOR")); 
                   valueObject.setMARCAAUTOMOTORMIGRADO(result.getString("MARCAAUTOMOTORMIGRADO")); 
                   valueObject.setID_RUNTORIGENREGISTRO(result.getString("ID_RUNTORIGENREGISTRO")); 
                   valueObject.setID_RUNTGRUPO(result.getString("ID_RUNTGRUPO")); 
                   valueObject.setSEGURIDADESTADO(result.getString("SEGURIDADESTADO")); 
                   valueObject.setENSENANZA(result.getString("ENSENANZA")); 
                   valueObject.setNUMEROFICHATECNICA(result.getString("NUMEROFICHATECNICA")); 
                   valueObject.setESTAREPOTENCIADO(result.getString("ESTAREPOTENCIADO")); 
                   valueObject.setID_TIPOPLACA(result.getString("ID_TIPOPLACA")); 
                   valueObject.setESTADO_MOTOR(result.getString("ESTADO_MOTOR")); 
                   valueObject.setID_RUNTTIPOPLACA(result.getString("ID_RUNTTIPOPLACA")); 
                   valueObject.setRECUPERACION_MOTOR(result.getString("RECUPERACION_MOTOR")); 
                   valueObject.setID_RECIBOLIQCAN(result.getString("ID_RECIBOLIQCAN")); 
                   valueObject.setIDLOGIN_CANCELA(result.getString("IDLOGIN_CANCELA")); 
                   valueObject.setFECHA_SISTEMA_CANCELA(result.getString("FECHA_SISTEMA_CANCELA")); 
                   valueObject.setTIPOCANCELA(result.getString("TIPOCANCELA")); 
                   valueObject.setRECUPERAMOTOR(result.getString("RECUPERAMOTOR")); 
                   valueObject.setPORCENTAJEREPOSICION(result.getString("PORCENTAJEREPOSICION")); 
                   valueObject.setVIN(result.getString("VIN")); 
                   valueObject.setID_ORGTRANSITOORIGEN(result.getString("ID_ORGTRANSITOORIGEN")); 
                   valueObject.setAUTORIZATRASLADO(result.getString("AUTORIZATRASLADO")); 
                   valueObject.setVEHPLANORUNT(result.getString("VEHPLANORUNT"));
                   
                  valueObject.setENTE_JUDICIAL(result.getString("ENTE_JUDICIAL"));
                  valueObject.setNUM_OFICIO_CANCELACION(result.getString("NUM_OFICIO_CANCELACION"));
                  valueObject.setNUM_IPAT (result.getString("NUM_IPAT "));
                  

              } else {
                    //System.out.println("Vehiculo Object Not Found!");
                    throw new NotFoundException("Vehiculo Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   Vehiculo temp = createValueObject();

                   temp.setID_VEHICULO(result.getInt("ID_VEHICULO")); 
                   temp.setPLACA(result.getString("PLACA")); 
                   temp.setSERIE_MOTOR(result.getString("SERIE_MOTOR")); 
                   temp.setCILINDRAJE(result.getString("CILINDRAJE")); 
                   temp.setMODELO(result.getString("MODELO")); 
                   temp.setNRO_PUERTAS(result.getString("NRO_PUERTAS")); 
                   temp.setPESO_BRUTO(result.getString("PESO_BRUTO")); 
                   temp.setDIST_EJES(result.getString("DIST_EJES")); 
                   temp.setVOLAD_POSTER(result.getString("VOLAD_POSTER")); 
                   temp.setNRO_EJES(result.getString("NRO_EJES")); 
                   temp.setANCHO(result.getString("ANCHO")); 
                   temp.setLARGO(result.getString("LARGO")); 
                   temp.setALTO(result.getString("ALTO")); 
                   temp.setPOTENCIA(result.getString("POTENCIA")); 
                   temp.setFECHA_MANIFIESTO(result.getString("FECHA_MANIFIESTO")); 
                   temp.setPOLIZA_NUM(result.getString("POLIZA_NUM")); 
                   temp.setFECHAVENCE_SEGURO(result.getString("FECHAVENCE_SEGURO")); 
                   temp.setFECHAREG(result.getString("FECHAREG")); 
                   temp.setID_SERVICIO(result.getString("ID_SERVICIO")); 
                   temp.setID_CVEHICULO(result.getString("ID_CVEHICULO")); 
                   temp.setID_COMBUSTIBLE(result.getString("ID_COMBUSTIBLE")); 
                   temp.setID_TCARROCERIA(result.getString("ID_TCARROCERIA")); 
                   temp.setID_TMAQUINA(result.getString("ID_TMAQUINA")); 
                   temp.setIDEMPRESA_ASEGURADORA(result.getString("IDEMPRESA_ASEGURADORA")); 
                   temp.setID_EMPSERVIPUBLICO(result.getString("ID_EMPSERVIPUBLICO")); 
                   temp.setID_MARCA(result.getString("ID_MARCA")); 
                   temp.setID_LINEA(result.getString("ID_LINEA")); 
                   temp.setCAPACIDAD(result.getString("CAPACIDAD")); 
                   temp.setCOLOR(result.getString("COLOR")); 
                   temp.setFECHAVENCSEGURO(result.getString("FECHAVENCSEGURO")); 
                   temp.setID_COLOR(result.getString("ID_COLOR")); 
                   temp.setID_ESPVENAL(result.getString("ID_ESPVENAL")); 
                   temp.setEMP_FAVORECIDA(result.getString("EMP_FAVORECIDA")); 
                   temp.setCHASIS(result.getString("CHASIS")); 
                   temp.setNRO_MOTOR(result.getString("NRO_MOTOR")); 
                   temp.setIDTIPDOCTOVEHI(result.getString("IDTIPDOCTOVEHI")); 
                   temp.setNUMDOCTO(result.getString("NUMDOCTO")); 
                   temp.setFECHADOCTO(result.getString("FECHADOCTO")); 
                   temp.setIDORG_EXPIDE(result.getString("IDORG_EXPIDE")); 
                   temp.setACTA(result.getString("ACTA")); 
                   temp.setMANIFIESTO(result.getString("MANIFIESTO")); 
                   temp.setFECHAVINCULACIONEMPRESA(result.getString("FECHAVINCULACIONEMPRESA")); 
                   temp.setFECHADESVINCULACIONEMPRESA(result.getString("FECHADESVINCULACIONEMPRESA")); 
                   temp.setVIDRIOS_POLARIZADOS(result.getString("VIDRIOS_POLARIZADOS")); 
                   temp.setBLINDADO(result.getString("BLINDADO")); 
                   temp.setMOTORREGRABADO(result.getString("MOTORREGRABADO")); 
                   temp.setCHASISREGREBADO(result.getString("CHASISREGREBADO")); 
                   temp.setNUMSERIE_REGRABADO(result.getString("NUMSERIE_REGRABADO")); 
                   temp.setTARJETAOPERACION(result.getString("TARJETAOPERACION")); 
                   temp.setCONCESIONARIO(result.getString("CONCESIONARIO")); 
                   temp.setNUM_ACMANIF(result.getString("NUM_ACMANIF")); 
                   temp.setVLRFACTURA(result.getString("VLRFACTURA")); 
                   temp.setIMPORTADOR(result.getString("IMPORTADOR")); 
                   temp.setID_ADUANA(result.getString("ID_ADUANA")); 
                   temp.setNUMEROFACTURA(result.getString("NUMEROFACTURA")); 
                   temp.setFECHAFACTURA(result.getString("FECHAFACTURA")); 
                   temp.setID_MOTIVOCANCELACION(result.getString("ID_MOTIVOCANCELACION")); 
                   temp.setFECHACANCELACIONVEHICULO(result.getString("FECHACANCELACIONVEHICULO")); 
                   temp.setRESOLUCIONCANCELACION(result.getString("RESOLUCIONCANCELACION")); 
                   temp.setLIMITACION(result.getString("LIMITACION")); 
                   temp.setPENDIENTEJUDICIAL(result.getString("PENDIENTEJUDICIAL")); 
                   temp.setID_NIVELSERVICIO(result.getString("ID_NIVELSERVICIO")); 
                   temp.setID_MODALIDADSERVICIO(result.getString("ID_MODALIDADSERVICIO")); 
                   temp.setIDORG_TRASLADOCTA(result.getString("IDORG_TRASLADOCTA")); 
                   temp.setNUMOFICIOTRASLADO(result.getString("NUMOFICIOTRASLADO")); 
                   temp.setNUMFOLIOSTRASLADO(result.getString("NUMFOLIOSTRASLADO")); 
                   temp.setVOLAD_ANTERIOR(result.getString("VOLAD_ANTERIOR")); 
                   temp.setCAPACIDADTON(result.getString("CAPACIDADTON")); 
                   temp.setNUMGUIATRASLADOCTA(result.getString("NUMGUIATRASLADOCTA")); 
                   temp.setID_TIPOOPERACION(result.getString("ID_TIPOOPERACION")); 
                   temp.setVEHEXTRANJERO(result.getString("VEHEXTRANJERO")); 
                   temp.setFECHAINIINMOVILIZA(result.getString("FECHAINIINMOVILIZA")); 
                   temp.setFECHAFININMOVILIZA(result.getString("FECHAFININMOVILIZA")); 
                   temp.setVEHFORANEO(result.getString("VEHFORANEO")); 
                   temp.setID_MARCAPPAL(result.getString("ID_MARCAPPAL")); 
                   temp.setID_LINEAPPAL(result.getString("ID_LINEAPPAL")); 
                   temp.setCOD_ADMINISTRACION(result.getString("COD_ADMINISTRACION")); 
                   temp.setNIT_IMPORTADOR(result.getString("NIT_IMPORTADOR")); 
                   temp.setNRO_FORMULARIO(result.getString("NRO_FORMULARIO")); 
                   temp.setNRO_AUTOADHESIVO(result.getString("NRO_AUTOADHESIVO")); 
                   temp.setID_RUNTANTIGUOCLASICO(result.getString("ID_RUNTANTIGUOCLASICO")); 
                   temp.setID_RUNTTIPOMATRICULA(result.getString("ID_RUNTTIPOMATRICULA")); 
                   temp.setFECHAINIVIGENCIA(result.getString("FECHAINIVIGENCIA")); 
                   temp.setFECHAFINVIGENCIA(result.getString("FECHAFINVIGENCIA")); 
                   temp.setFICHATECNICAHOMOLOGA(result.getString("FICHATECNICAHOMOLOGA")); 
                   temp.setFICHAHOMOLOGACARROCERIA(result.getString("FICHAHOMOLOGACARROCERIA")); 
                   temp.setOBSERVACION(result.getString("OBSERVACION")); 
                   temp.setVEHIREPOSICION(result.getString("VEHIREPOSICION")); 
                   temp.setVEHIDONADO(result.getString("VEHIDONADO")); 
                   temp.setNUMEROVIN(result.getString("NUMEROVIN")); 
                   temp.setNUMEROAUTOMOTOR(result.getString("NUMEROAUTOMOTOR")); 
                   temp.setID_RUNTTIPOMOTOR(result.getString("ID_RUNTTIPOMOTOR")); 
                   temp.setESIMPORTADO(result.getString("ESIMPORTADO")); 
                   temp.setID_RUNTPAISES(result.getString("ID_RUNTPAISES")); 
                   temp.setANOFABRICACION(result.getString("ANOFABRICACION")); 
                   temp.setID_RUNTTIPOREGISTRO(result.getString("ID_RUNTTIPOREGISTRO")); 
                   temp.setID_RUNTRADIOACCION(result.getString("ID_RUNTRADIOACCION")); 
                   temp.setVLRPOLIZA(result.getString("VLRPOLIZA")); 
                   temp.setID_RUNTCONCESIONARIO(result.getString("ID_RUNTCONCESIONARIO")); 
                   temp.setNUMEROFACTURA_MOTOR(result.getString("NUMEROFACTURA_MOTOR")); 
                   temp.setFECHAFACTURA_MOTOR(result.getString("FECHAFACTURA_MOTOR")); 
                   temp.setEMPPER_MOTOR(result.getString("EMPPER_MOTOR")); 
                   temp.setID_PROPIETARIO_MOTOR(result.getString("ID_PROPIETARIO_MOTOR")); 
                   temp.setMARCAAUTOMOTORMIGRADO(result.getString("MARCAAUTOMOTORMIGRADO")); 
                   temp.setID_RUNTORIGENREGISTRO(result.getString("ID_RUNTORIGENREGISTRO")); 
                   temp.setID_RUNTGRUPO(result.getString("ID_RUNTGRUPO")); 
                   temp.setSEGURIDADESTADO(result.getString("SEGURIDADESTADO")); 
                   temp.setENSENANZA(result.getString("ENSENANZA")); 
                   temp.setNUMEROFICHATECNICA(result.getString("NUMEROFICHATECNICA")); 
                   temp.setESTAREPOTENCIADO(result.getString("ESTAREPOTENCIADO")); 
                   temp.setID_TIPOPLACA(result.getString("ID_TIPOPLACA")); 
                   temp.setESTADO_MOTOR(result.getString("ESTADO_MOTOR")); 
                   temp.setID_RUNTTIPOPLACA(result.getString("ID_RUNTTIPOPLACA")); 
                   temp.setRECUPERACION_MOTOR(result.getString("RECUPERACION_MOTOR")); 
                   temp.setID_RECIBOLIQCAN(result.getString("ID_RECIBOLIQCAN")); 
                   temp.setIDLOGIN_CANCELA(result.getString("IDLOGIN_CANCELA")); 
                   temp.setFECHA_SISTEMA_CANCELA(result.getString("FECHA_SISTEMA_CANCELA")); 
                   temp.setTIPOCANCELA(result.getString("TIPOCANCELA")); 
                   temp.setRECUPERAMOTOR(result.getString("RECUPERAMOTOR")); 
                   temp.setPORCENTAJEREPOSICION(result.getString("PORCENTAJEREPOSICION")); 
                   temp.setVIN(result.getString("VIN")); 
                   temp.setID_ORGTRANSITOORIGEN(result.getString("ID_ORGTRANSITOORIGEN")); 
                   temp.setAUTORIZATRASLADO(result.getString("AUTORIZATRASLADO")); 
                   temp.setVEHPLANORUNT(result.getString("VEHPLANORUNT"));
                  
                   temp.setENTE_JUDICIAL(result.getString("ENTE_JUDICIAL"));
                   temp.setNUM_OFICIO_CANCELACION(result.getString("NUM_OFICIO_CANCELACION"));
                   temp.setNUM_IPAT (result.getString("NUM_IPAT"));

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }
    
    public int getMaxId(Connection conn) throws SQLException {

              String sql = "SELECT GEN_ID(GEN_VEHICULO,1) FROM TRANSITO";
              PreparedStatement stmt = null;
              ResultSet result = null;
              int allRows = 0;
              try {
                  stmt = conn.prepareStatement(sql);
                  result = stmt.executeQuery();

                  if (result.next())
                      allRows = result.getInt(1)+1;
              } finally {
                  if (result != null)
                      result.close();
                  if (stmt != null)
                      stmt.close();
              }
              return allRows;
        }


///////////////////////////
        public void actualizarNuevoColorVehiculo(Connection conn, Vehiculo valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE VEHICULO SET ID_COLOR = ?  WHERE (ID_VEHICULO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setString(1, valueObject.getID_COLOR()); 
             
              stmt.setInt(2, valueObject.getID_VEHICULO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
              
          }              
          finally {
              if (stmt != null)
                  stmt.close();
          }
    }
        
  public void actualizarNuevoTipoPlacaVehiculo(Connection conn, Vehiculo valueObject) 
    throws NotFoundException, SQLException {

    String sql = "UPDATE VEHICULO SET ID_TIPOPLACA = ?, ID_RUNTTIPOPLACA = ?  WHERE (ID_VEHICULO = ? ) ";
    PreparedStatement stmt = null;

    try {
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, valueObject.getID_TIPOPLACA()); 
        stmt.setString(2, valueObject.getID_RUNTTIPOPLACA());        
        stmt.setInt(3, valueObject.getID_VEHICULO()); 
        //System.out.println("id_tipoPlaca = "+valueObject.getID_TIPOPLACA()+" id_RuntTipoPlaca = "+valueObject.getID_RUNTTIPOPLACA());

        int rowcount = databaseUpdate(conn, stmt);
        if (rowcount == 0) {
             //System.out.println("Object could not be saved! (PrimaryKey not found)");
             throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
        }
        if (rowcount > 1) {
             //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
             throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
        }
        
    }              
    finally {
        if (stmt != null)
            stmt.close();
    }
  }
        
  public List validarVehiculoExisteBaseDatos(Connection conn, Vehiculo valueObject) throws SQLException {

        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM VEHICULO WHERE 1=1 ");

        if (valueObject.getID_VEHICULO() != 0) {
            if (first) { first = false; }
            sql.append("AND ID_VEHICULO = ").append(valueObject.getID_VEHICULO()).append(" ");
        }

        if (valueObject.getPLACA() != null) {
            if (first) { first = false; }
            sql.append("AND PLACA = '").append(valueObject.getPLACA()).append("' ");
        }

        if (valueObject.getSERIE_MOTOR() != null) {
            if (first) { first = false; }
            sql.append("AND SERIE_MOTOR = '").append(valueObject.getSERIE_MOTOR()).append("' ");
        }

        if (valueObject.getCHASIS() != null) {
            if (first) { first = false; }
            sql.append("AND CHASIS = '").append(valueObject.getCHASIS()).append("' ");
        }

        if (valueObject.getNRO_MOTOR() != null) {
            if (first) { first = false; }
            sql.append("AND NRO_MOTOR = '").append(valueObject.getNRO_MOTOR()).append("' ");
        }

        sql.append("ORDER BY ID_VEHICULO ASC ");
       // System.out.println(sql);
        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
             searchResults = new ArrayList();
        else
             searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
  }
  
  public void actualizarNuevoServicioVehiculo(Connection conn, Vehiculo valueObject) 
    throws NotFoundException, SQLException {

    String sql = "UPDATE VEHICULO SET ID_SERVICIO = ?  WHERE (ID_VEHICULO = ? ) ";
    PreparedStatement stmt = null;

    try {
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, valueObject.getID_SERVICIO());  
        stmt.setInt(2, valueObject.getID_VEHICULO()); 

        int rowcount = databaseUpdate(conn, stmt);
        if (rowcount == 0) {
             //System.out.println("Object could not be saved! (PrimaryKey not found)");
             throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
        }
        if (rowcount > 1) {
             //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
             throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
        }
        
    }              
    finally {
        if (stmt != null)
            stmt.close();
    }
  }
  
  public void cancelarMatriculaVehiculo(Connection conn, Vehiculo valueObject) 
    throws NotFoundException, SQLException {

    String sql = "UPDATE VEHICULO SET ID_MOTIVOCANCELACION = ?, RESOLUCIONCANCELACION = ?, FECHACANCELACIONVEHICULO = ?, RECUPERAMOTOR = ? WHERE (ID_VEHICULO = ? ) ";
    PreparedStatement stmt = null;

    try {
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, valueObject.getID_MOTIVOCANCELACION()); 
        stmt.setString(2, valueObject.getRESOLUCIONCANCELACION());
        stmt.setDate(3, Funciones.convFechaSSQL(valueObject.getFECHACANCELACIONVEHICULO()));
        stmt.setString(4, valueObject.getRECUPERAMOTOR());
        stmt.setInt(5, valueObject.getID_VEHICULO()); 

        int rowcount = databaseUpdate(conn, stmt);
        if (rowcount == 0) {
             //System.out.println("Object could not be saved! (PrimaryKey not found)");
             throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
        }
        if (rowcount > 1) {
             //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
             throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
        }
        
    }              
    finally {
        if (stmt != null)
            stmt.close();
    }
  }
  
    public String obtenerClaseRUNTVehiculo(Connection conn,String placa) throws NotFoundException, SQLException
    {
      
      PreparedStatement stmt = null;
      ResultSet result = null;
      String retorno="";
      
      String sql="select " + 
      "case clase_vehiculo.idruntclasificacion " + 
      "when 'MOTOCICLETA' THEN 'MOTO' " + 
      "when 'MOTO' THEN 'MOTO' " + 
      "else 'AUTOMOVIL' " + 
      "end " + 
      "from vehiculo inner join clase_vehiculo " + 
      "on(vehiculo.id_cvehiculo = clase_vehiculo.id_cvehiculo) " + 
      "where vehiculo.placa = '"+ placa +"'";
        
       stmt = conn.prepareStatement(sql);
       result = stmt.executeQuery();
       
        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next())
                retorno = result.getString(1);
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        
        return retorno;
    }
  
    public void activar(Connection conn, Vehiculo valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE VEHICULO SET ID_MOTIVOCANCELACION = ?, FECHACANCELACIONVEHICULO = ?, "
               + "RESOLUCIONCANCELACION = ? WHERE (ID_VEHICULO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              
            /*if(Funciones.esEntero(valueObject.getID_MOTIVOCANCELACION()))
                stmt.setString(56, valueObject.getID_MOTIVOCANCELACION());
            else*/
            stmt.setNull(1, Types.INTEGER);
            /*if(Funciones.esFecha(valueObject.getFECHACANCELACIONVEHICULO()))
                stmt.setDate(57, Funciones.convFechaSSQL(valueObject.getFECHACANCELACIONVEHICULO()));
            else*/
            stmt.setNull(2, Types.DATE);
            /*if(Funciones.contarCadena(valueObject.getRESOLUCIONCANCELACION(), 15))
                stmt.setString(58, valueObject.getRESOLUCIONCANCELACION());
            else*/
            stmt.setNull(3, Types.VARCHAR);
            
            stmt.setInt(4, valueObject.getID_VEHICULO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
              
          }              
          finally {
              if (stmt != null)
                  stmt.close();
          }
    }
  
}



