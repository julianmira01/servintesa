package modelo.datos.dao.generales;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.generales.Sucursal;

import utilidades.Funciones;


/**
  * Sucursal Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve Sucursal object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class SucursalDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public Sucursal createValueObject() {
          return new Sucursal();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public Sucursal getObject(Connection conn, int ID_SUCURSAL) throws NotFoundException, SQLException {

          Sucursal valueObject = createValueObject();
          valueObject.setID_SUCURSAL(ID_SUCURSAL);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, Sucursal valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM SUCURSAL WHERE (ID_SUCURSAL = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getID_SUCURSAL()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM SUCURSAL ORDER BY ID_SUCURSAL ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, Sucursal valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO SUCURSAL ( ID_SUCURSAL, NRODIRECCION, DIRECCION, "
               + "TELEFONO1, TELEFONO2, FAX1, "
               + "FAX2, WEB, ID_PERSONA, "
               + "ID_EMPRESA, ID_CIUDAD, FECHARES, "
               + "EMAIL, IDTIPO, CELULAR, "
               + "COD_TIPODIRECCION, DIRPRINCIPAL, ID_PAIS, ID_DEPARTAMENTO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);
   
               stmt.setInt(1, valueObject.getID_SUCURSAL()); 
               if(Funciones.esEntero(String.valueOf(valueObject.getNRODIRECCION())))
                  stmt.setInt(2, valueObject.getNRODIRECCION()); 
               else
                  stmt.setNull(2, Types.INTEGER);    
               if(Funciones.contarCadena(valueObject.getDIRECCION(), 100))
                stmt.setString(3, valueObject.getDIRECCION()); 
               else
                stmt.setNull(3, Types.VARCHAR);
               if(Funciones.contarCadena(valueObject.getTELEFONO1(), 10))
                stmt.setString(4, valueObject.getTELEFONO1()); 
               else
                stmt.setNull(4, Types.VARCHAR);   
               if(Funciones.contarCadena(valueObject.getTELEFONO2(), 10))
                stmt.setString(5, valueObject.getTELEFONO2());
               else
                stmt.setNull(5, Types.VARCHAR);   
               if(Funciones.contarCadena(valueObject.getFAX1(), 10))
                stmt.setString(6, valueObject.getFAX1()); 
               else
                stmt.setNull(6, Types.VARCHAR);   
               if(Funciones.contarCadena(valueObject.getFAX2(), 10))
                stmt.setString(7, valueObject.getFAX2()); 
               else
                stmt.setNull(7, Types.VARCHAR);   
               if(Funciones.contarCadena(valueObject.getWEB(), 80))
                stmt.setString(8, valueObject.getWEB()); 
               else
                stmt.setNull(8, Types.VARCHAR);
               if(valueObject.getID_PERSONA() > 0)  
                stmt.setInt(9, valueObject.getID_PERSONA()); 
               else
                stmt.setNull(9, Types.VARCHAR);
               if(Funciones.esEntero(String.valueOf(valueObject.getID_EMPRESA())))
                stmt.setInt(10, valueObject.getID_EMPRESA()); 
               else
                stmt.setNull(10, Types.INTEGER);
               if(Funciones.esEntero(String.valueOf(valueObject.getID_CIUDAD())))   
                stmt.setInt(11, valueObject.getID_CIUDAD()); 
               else
                stmt.setNull(11, Types.INTEGER);
               if(Funciones.esFecha(valueObject.getFECHARES()))  
                stmt.setDate(12, Funciones.convFechaSSQL(valueObject.getFECHARES()));
               else
                stmt.setNull(12, Types.DATE); 
               if(Funciones.contarCadena(valueObject.getEMAIL(), 80))
                stmt.setString(13, valueObject.getEMAIL());
               else
                stmt.setNull(13, Types.VARCHAR);  
               if(Funciones.esEntero(String.valueOf(valueObject.getIDTIPO())))   
                stmt.setInt(14, valueObject.getIDTIPO()); 
               else
                stmt.setNull(14, Types.INTEGER);
               if(Funciones.contarCadena(valueObject.getCELULAR(), 15))  
                stmt.setString(15, valueObject.getCELULAR()); 
               else
                stmt.setNull(15, Types.VARCHAR);  
               if(Funciones.contarCadena(valueObject.getCOD_TIPODIRECCION(), 10))
                stmt.setString(16, valueObject.getCOD_TIPODIRECCION()); 
               else
                stmt.setNull(16, Types.VARCHAR);  
               if(Funciones.contarCadena(valueObject.getDIRPRINCIPAL(), 1))  
                stmt.setString(17, valueObject.getDIRPRINCIPAL()); 
               else
                stmt.setNull(17, Types.VARCHAR);  
              if(Funciones.contarCadena(valueObject.getID_PAIS(), 20))  
               stmt.setString(18, valueObject.getID_PAIS()); 
              else
               stmt.setNull(18, Types.VARCHAR);  
              if(Funciones.contarCadena(valueObject.getID_DEPARTAMENTO(), 20))  
               stmt.setString(19, valueObject.getID_DEPARTAMENTO()); 
              else
               stmt.setNull(19, Types.VARCHAR);  

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, Sucursal valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE SUCURSAL SET NRODIRECCION = ?, DIRECCION = ?, TELEFONO1 = ?, "
               + "TELEFONO2 = ?, FAX1 = ?, FAX2 = ?, "
               + "WEB = ?, ID_PERSONA = ?, ID_EMPRESA = ?, "
               + "ID_CIUDAD = ?, FECHARES = ?, EMAIL = ?, "
               + "IDTIPO = ?, CELULAR = ?, COD_TIPODIRECCION = ?, "
               + "DIRPRINCIPAL = ?, ID_PAIS = ?, ID_DEPARTAMENTO = ? WHERE (ID_SUCURSAL = ? ) ";
          
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);              
            
              if(Funciones.esEntero(String.valueOf(valueObject.getNRODIRECCION())))
                 stmt.setInt(1, valueObject.getNRODIRECCION()); 
              else
                 stmt.setNull(1, Types.INTEGER);    
              if(Funciones.contarCadena(valueObject.getDIRECCION(), 100))
               stmt.setString(2, valueObject.getDIRECCION()); 
              else
               stmt.setNull(2, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getTELEFONO1(), 10))
               stmt.setString(3, valueObject.getTELEFONO1()); 
              else
               stmt.setNull(3, Types.VARCHAR);   
              if(Funciones.contarCadena(valueObject.getTELEFONO2(), 10))
               stmt.setString(4, valueObject.getTELEFONO2());
              else
               stmt.setNull(4, Types.VARCHAR);   
              if(Funciones.contarCadena(valueObject.getFAX1(), 10))
               stmt.setString(5, valueObject.getFAX1()); 
              else
               stmt.setNull(5, Types.VARCHAR);   
              if(Funciones.contarCadena(valueObject.getFAX2(), 10))
               stmt.setString(6, valueObject.getFAX2()); 
              else
               stmt.setNull(6, Types.VARCHAR);   
              if(Funciones.contarCadena(valueObject.getWEB(), 80))
               stmt.setString(7, valueObject.getWEB()); 
              else
               stmt.setNull(7, Types.VARCHAR);
              if(valueObject.getID_PERSONA() > 0)  
               stmt.setInt(8, valueObject.getID_PERSONA()); 
              else
               stmt.setNull(8, Types.VARCHAR);
              if(Funciones.esEntero(String.valueOf(valueObject.getID_EMPRESA())))
               stmt.setInt(9, valueObject.getID_EMPRESA()); 
              else
               stmt.setNull(9, Types.INTEGER);
              if(Funciones.esEntero(String.valueOf(valueObject.getID_CIUDAD())))   
               stmt.setInt(10, valueObject.getID_CIUDAD()); 
              else
               stmt.setNull(10, Types.INTEGER);
              if(Funciones.esFecha(valueObject.getFECHARES()))  
               stmt.setDate(11, Funciones.convFechaSSQL(valueObject.getFECHARES()));
              else
               stmt.setNull(11, Types.DATE); 
              if(Funciones.contarCadena(valueObject.getEMAIL(), 80))
               stmt.setString(12, valueObject.getEMAIL());
              else
               stmt.setNull(12, Types.VARCHAR);  
              if(Funciones.esEntero(String.valueOf(valueObject.getIDTIPO())))   
               stmt.setInt(13, valueObject.getIDTIPO()); 
              else
               stmt.setNull(13, Types.INTEGER);
              if(Funciones.contarCadena(valueObject.getCELULAR(), 15))  
               stmt.setString(14, valueObject.getCELULAR()); 
              else
               stmt.setNull(14, Types.VARCHAR);  
              if(Funciones.contarCadena(valueObject.getCOD_TIPODIRECCION(), 10))
               stmt.setString(15, valueObject.getCOD_TIPODIRECCION()); 
              else
               stmt.setNull(15, Types.VARCHAR);  
              if(Funciones.contarCadena(valueObject.getDIRPRINCIPAL(), 1))  
               stmt.setString(16, valueObject.getDIRPRINCIPAL()); 
              else
               stmt.setNull(16, Types.VARCHAR);  
              
              if(Funciones.contarCadena(valueObject.getID_PAIS(), 20))  
               stmt.setString(17, valueObject.getID_PAIS()); 
              else
               stmt.setNull(17, Types.VARCHAR);  
              
              if(Funciones.contarCadena(valueObject.getID_DEPARTAMENTO(), 20))  
               stmt.setString(18, valueObject.getID_DEPARTAMENTO()); 
              else
               stmt.setNull(18, Types.VARCHAR);  
              
              stmt.setInt(19, valueObject.getID_SUCURSAL()); 
              
              int rowcount = databaseUpdate(conn, stmt);
              
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, Sucursal valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM SUCURSAL WHERE (ID_SUCURSAL = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getID_SUCURSAL()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM SUCURSAL";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM SUCURSAL";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, Sucursal valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM SUCURSAL WHERE 1=1 ");

          if (valueObject.getID_SUCURSAL() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_SUCURSAL = ").append(valueObject.getID_SUCURSAL()).append(" ");
          }

          if (valueObject.getNRODIRECCION() != 0) {
              if (first) { first = false; }
              sql.append("AND NRODIRECCION = ").append(valueObject.getNRODIRECCION()).append(" ");
          }

          if (valueObject.getDIRECCION() != null && !valueObject.getDIRECCION().equals("")) {
              if (first) { first = false; }
              sql.append("AND DIRECCION LIKE '").append(valueObject.getDIRECCION()).append("%' ");
          }

          if (valueObject.getTELEFONO1() != null && !valueObject.getTELEFONO1().equals("")) {
              if (first) { first = false; }
              sql.append("AND TELEFONO1 LIKE '").append(valueObject.getTELEFONO1()).append("%' ");
          }

          if (valueObject.getTELEFONO2() != null && !valueObject.getTELEFONO2().equals("")) {
              if (first) { first = false; }
              sql.append("AND TELEFONO2 LIKE '").append(valueObject.getTELEFONO2()).append("%' ");
          }

          if (valueObject.getFAX1() != null && !valueObject.getFAX1().equals("")) {
              if (first) { first = false; }
              sql.append("AND FAX1 LIKE '").append(valueObject.getFAX1()).append("%' ");
          }

          if (valueObject.getFAX2() != null && !valueObject.getFAX2().equals("")) {
              if (first) { first = false; }
              sql.append("AND FAX2 LIKE '").append(valueObject.getFAX2()).append("%' ");
          }

          if (valueObject.getWEB() != null && !valueObject.getWEB().equals("")) {
              if (first) { first = false; }
              sql.append("AND WEB LIKE '").append(valueObject.getWEB()).append("%' ");
          }

          if (valueObject.getID_PERSONA() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_PERSONA = ").append(valueObject.getID_PERSONA()).append(" ");
          }

          if (valueObject.getID_EMPRESA() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_EMPRESA = ").append(valueObject.getID_EMPRESA()).append(" ");
          }

          if (valueObject.getID_CIUDAD() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_CIUDAD = ").append(valueObject.getID_CIUDAD()).append(" ");
          }

          if (valueObject.getFECHARES()!=null && !valueObject.getFECHARES().equals("")) {
              if (first) { first = false; }
              sql.append("AND FECHARES = '").append(valueObject.getFECHARES()).append("' ");
          }

          if (valueObject.getEMAIL() != null && !valueObject.getEMAIL().equals("")) {
              if (first) { first = false; }
              sql.append("AND EMAIL LIKE '").append(valueObject.getEMAIL()).append("%' ");
          }

          if (valueObject.getIDTIPO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDTIPO = ").append(valueObject.getIDTIPO()).append(" ");
          }

          if (valueObject.getCELULAR() != null && !valueObject.getCELULAR().equals("")) {
              if (first) { first = false; }
              sql.append("AND CELULAR LIKE '").append(valueObject.getCELULAR()).append("%' ");
          }

          if (valueObject.getCOD_TIPODIRECCION() != null && !valueObject.getCOD_TIPODIRECCION().equals("")) {
              if (first) { first = false; }
              sql.append("AND COD_TIPODIRECCION LIKE '").append(valueObject.getCOD_TIPODIRECCION()).append("%' ");
          }

          if (valueObject.getDIRPRINCIPAL() != null && !valueObject.getDIRPRINCIPAL().equals("")) {
              if (first) { first = false; }
              sql.append("AND DIRPRINCIPAL LIKE '").append(valueObject.getDIRPRINCIPAL()).append("%' ");
          }


          sql.append("ORDER BY ID_SUCURSAL ASC ");

         System.out.println(sql);
          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, Sucursal valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setID_SUCURSAL(result.getInt("ID_SUCURSAL")); 
                   valueObject.setNRODIRECCION(result.getInt("NRODIRECCION")); 
                   valueObject.setDIRECCION(result.getString("DIRECCION")); 
                   valueObject.setTELEFONO1(result.getString("TELEFONO1")); 
                   valueObject.setTELEFONO2(result.getString("TELEFONO2")); 
                   valueObject.setFAX1(result.getString("FAX1")); 
                   valueObject.setFAX2(result.getString("FAX2")); 
                   valueObject.setWEB(result.getString("WEB")); 
                   valueObject.setID_PERSONA(result.getInt("ID_PERSONA")); 
                   valueObject.setID_EMPRESA(result.getInt("ID_EMPRESA")); 
                   valueObject.setID_CIUDAD(result.getInt("ID_CIUDAD")); 
                   valueObject.setFECHARES(result.getString("FECHARES")); 
                   valueObject.setEMAIL(result.getString("EMAIL")); 
                   valueObject.setIDTIPO(result.getInt("IDTIPO")); 
                   valueObject.setCELULAR(result.getString("CELULAR")); 
                   valueObject.setCOD_TIPODIRECCION(result.getString("COD_TIPODIRECCION")); 
                   valueObject.setDIRPRINCIPAL(result.getString("DIRPRINCIPAL")); 
                   valueObject.setID_PAIS(result.getString("ID_PAIS")); 
                   valueObject.setID_DEPARTAMENTO(result.getString("ID_DEPARTAMENTO")); 

              } else {
                    //System.out.println("Sucursal Object Not Found!");
                    throw new NotFoundException("Sucursal Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   Sucursal temp = createValueObject();

                   temp.setID_SUCURSAL(result.getInt("ID_SUCURSAL")); 
                   temp.setNRODIRECCION(result.getInt("NRODIRECCION")); 
                   temp.setDIRECCION(result.getString("DIRECCION")); 
                   temp.setTELEFONO1(result.getString("TELEFONO1")); 
                   temp.setTELEFONO2(result.getString("TELEFONO2")); 
                   temp.setFAX1(result.getString("FAX1")); 
                   temp.setFAX2(result.getString("FAX2")); 
                   temp.setWEB(result.getString("WEB")); 
                   temp.setID_PERSONA(result.getInt("ID_PERSONA")); 
                   temp.setID_EMPRESA(result.getInt("ID_EMPRESA")); 
                   temp.setID_CIUDAD(result.getInt("ID_CIUDAD")); 
                   temp.setFECHARES(result.getString("FECHARES")); 
                   temp.setEMAIL(result.getString("EMAIL")); 
                   temp.setIDTIPO(result.getInt("IDTIPO")); 
                   temp.setCELULAR(result.getString("CELULAR")); 
                   temp.setCOD_TIPODIRECCION(result.getString("COD_TIPODIRECCION")); 
                   temp.setDIRPRINCIPAL(result.getString("DIRPRINCIPAL")); 
                   temp.setID_PAIS(result.getString("ID_PAIS")); 
                   temp.setID_DEPARTAMENTO(result.getString("ID_DEPARTAMENTO")); 

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }
    
  public int getMaxId(Connection conn) throws SQLException {

            String sql = "SELECT GEN_ID(GEN_SUCURSAL,1) FROM TRANSITO";
            PreparedStatement stmt = null;
            ResultSet result = null;
            int allRows = 0;
            try {
                stmt = conn.prepareStatement(sql);
                result = stmt.executeQuery();

                if (result.next())
                    allRows = result.getInt(1)+1;
            } finally {
                if (result != null)
                    result.close();
                if (stmt != null)
                    stmt.close();
            }
            return allRows;
      }


}