package modelo.datos.dao.generales;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.generales.Persona;

import utilidades.Funciones;


/**
  * Persona Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve Persona object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class PersonaDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public Persona createValueObject() {
          return new Persona();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public Persona getObject(Connection conn, int ID_PERSONAS) throws NotFoundException, SQLException, Exception {
        try{
          Persona valueObject = createValueObject();
          valueObject.setID_PERSONAS(ID_PERSONAS);
          load(conn, valueObject);
          return valueObject;
        }catch(Exception e){throw new Exception(e.getMessage());} 
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, Persona valueObject) throws NotFoundException, SQLException, Exception {

          String sql = "SELECT * FROM PERSONAS WHERE (ID_PERSONAS = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getID_PERSONAS()); 

               singleQuery(conn, stmt, valueObject);

          }catch(Exception e){throw new Exception(e.getMessage());}  finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException, Exception {
        try{
          String sql = "SELECT * FROM PERSONAS ORDER BY ID_PERSONAS ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
        }catch(Exception e){throw new Exception(e.getMessage());} 
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, Persona valueObject) throws SQLException, Exception {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO PERSONAS ( ID_PERSONAS, IDENTIFICACION, NOMBRES, "
               + "APELLIDO1, APELLIDO2, TIPOSANGRE, "
               + "FACTORRH, FOTO, ID_TRANSITO, "
               + "NRO_LICENCIA, CATEGORIA, EMAIL, "
               + "ID_SEXO, ID_DOCTO, CELULAR, "
               + "ID_MUNICIPIO, SGDNOMBRE, TELEFONO, "
               + "ID_GRUPOSANGUINEORUNT, DIRECCION, FCH_EXPDOCUMENTO, "
               + "CODBIDIMENSIONAL, FIRMA, TOKENHUELLA, "
               + "IDRUNT, FECHA_NAC, ID_PAIS, ID_DEPARTAMENTO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);

               stmt.setInt(1, valueObject.getID_PERSONAS()); 

              if(Funciones.contarCadena(valueObject.getIDENTIFICACION(), 20))  
                 stmt.setString(2, valueObject.getIDENTIFICACION()); 
              else
                stmt.setNull(2, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getNOMBRES(), 40))  
                 stmt.setString(3, valueObject.getNOMBRES()); 
              else
                stmt.setNull(3, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getAPELLIDO1(), 20))  
                 stmt.setString(4, valueObject.getAPELLIDO1()); 
              else
                stmt.setNull(4, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getAPELLIDO2(), 20))  
                 stmt.setString(5, valueObject.getAPELLIDO2()); 
              else
                stmt.setNull(5, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getTIPOSANGRE(), 3))  
                 stmt.setString(6, valueObject.getTIPOSANGRE()); 
              else
                stmt.setNull(6, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getFACTORRH(), 3))  
                 stmt.setString(7, valueObject.getFACTORRH()); 
              else
                stmt.setNull(7, Types.VARCHAR);
              if(valueObject.getFOTO() != null)  
                 stmt.setBytes(8, valueObject.getFOTO()); 
              else
                stmt.setNull(8, Types.VARCHAR);            
              if(Funciones.esEntero(String.valueOf(valueObject.getID_TRANSITO())))   
                 stmt.setInt(9, valueObject.getID_TRANSITO()); 
              else
                  stmt.setNull(9, Types.INTEGER);
              if(Funciones.esEntero(String.valueOf(valueObject.getNRO_LICENCIA())))   
                 stmt.setInt(10, valueObject.getNRO_LICENCIA()); 
              else
                  stmt.setNull(10, Types.INTEGER);
              if(Funciones.esEntero(String.valueOf(valueObject.getCATEGORIA())))   
                 stmt.setInt(11, valueObject.getCATEGORIA()); 
              else
                  stmt.setNull(11, Types.INTEGER);            
              if(Funciones.contarCadena(valueObject.getEMAIL(), 80))  
                 stmt.setString(12, valueObject.getEMAIL()); 
              else
                stmt.setNull(12, Types.VARCHAR);             
              if(Funciones.esEntero(String.valueOf(valueObject.getID_SEXO())))   
                 stmt.setInt(13, valueObject.getID_SEXO()); 
              else
                  stmt.setNull(13, Types.INTEGER);
              if(valueObject.getID_DOCTO() != null)   
                 stmt.setString(14, valueObject.getID_DOCTO()); 
              else
                  stmt.setNull(14, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getCELULAR(), 15))  
                 stmt.setString(15, valueObject.getCELULAR()); 
              else
                stmt.setNull(15, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getID_MUNICIPIO(), 10))  
                 stmt.setString(16, valueObject.getID_MUNICIPIO()); 
              else
                stmt.setNull(16, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getSGDNOMBRE(), 80))  
                 stmt.setString(17, valueObject.getSGDNOMBRE()); 
              else
                stmt.setNull(17, Types.VARCHAR);
              if(Funciones.contarCadena(valueObject.getTELEFONO(), 15))  
                 stmt.setString(18, valueObject.getTELEFONO()); 
              else
                stmt.setNull(18, Types.VARCHAR);
              if(Funciones.esEntero(String.valueOf(valueObject.getID_GRUPOSANGUINEORUNT())))   
                 stmt.setInt(19, valueObject.getID_GRUPOSANGUINEORUNT()); 
              else
                  stmt.setNull(19, Types.INTEGER);           
              if(Funciones.contarCadena(valueObject.getDIRECCION(), 100))  
                 stmt.setString(20, valueObject.getDIRECCION()); 
              else
                stmt.setNull(20, Types.VARCHAR);
              if(Funciones.esFecha(valueObject.getFCH_EXPDOCUMENTO()))  
                 stmt.setDate(21, Funciones.convFechaSSQL(valueObject.getFCH_EXPDOCUMENTO()));
              else
                 stmt.setNull(21, Types.DATE); 
              if(valueObject.getCODBIDIMENSIONAL() != null)  
                 stmt.setBytes(22, valueObject.getCODBIDIMENSIONAL()); 
              else
                stmt.setNull(22, Types.VARCHAR);
              if(valueObject.getFIRMA() != null)  
                 stmt.setBytes(23, valueObject.getFIRMA()); 
              else
                stmt.setNull(23, Types.VARCHAR);             
              if(valueObject.getTOKENHUELLA() != null)  
                 stmt.setBytes(24, valueObject.getTOKENHUELLA()); 
              else
                stmt.setNull(24, Types.VARCHAR);            
              if(Funciones.esEntero(String.valueOf(valueObject.getIDRUNT())))   
                 stmt.setInt(25, valueObject.getIDRUNT()); 
              else
                  stmt.setNull(25, Types.INTEGER);             
              if(Funciones.esFecha(valueObject.getFECHA_NAC()))  
                 stmt.setDate(26, Funciones.convFechaSSQL(valueObject.getFECHA_NAC()));
              else
                 stmt.setNull(26, Types.DATE); 
              if(Funciones.contarCadena(valueObject.getID_PAIS(), 20))
                  stmt.setString(27, valueObject.getID_PAIS());
              else
                  stmt.setNull(27, Types.VARCHAR); 
              if(Funciones.contarCadena(valueObject.getID_DEPARTAMENTO(), 20))
                  stmt.setString(28, valueObject.getID_DEPARTAMENTO());
              else
                  stmt.setNull(28, Types.VARCHAR); 
              

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }
          }catch(Exception e){throw new Exception(e.getMessage());}  finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, Persona valueObject) 
          throws NotFoundException, SQLException, Exception {

          String sql = "UPDATE PERSONAS SET IDENTIFICACION = ?, NOMBRES = ?, APELLIDO1 = ?, "
               + "APELLIDO2 = ?, TIPOSANGRE = ?, FACTORRH = ?, "
               + "FOTO = ?, ID_TRANSITO = ?, NRO_LICENCIA = ?, "
               + "CATEGORIA = ?, EMAIL = ?, ID_SEXO = ?, "
               + "ID_DOCTO = ?, CELULAR = ?, ID_MUNICIPIO = ?, "
               + "SGDNOMBRE = ?, TELEFONO = ?, ID_GRUPOSANGUINEORUNT = ?, "
               + "DIRECCION = ?, FCH_EXPDOCUMENTO = ?, CODBIDIMENSIONAL = ?, "
               + "FIRMA = ?, TOKENHUELLA = ?, IDRUNT = ?, "
               + "FECHA_NAC = ?, ID_PAIS = ?,"
               + "ID_DEPARTAMENTO = ?"
               + "WHERE (ID_PERSONAS = ? ) ";
               
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setString(1, valueObject.getIDENTIFICACION()); 
              stmt.setString(2, valueObject.getNOMBRES()); 
              stmt.setString(3, valueObject.getAPELLIDO1()); 
              stmt.setString(4, valueObject.getAPELLIDO2()); 
              stmt.setString(5, valueObject.getTIPOSANGRE()); 
              stmt.setString(6, valueObject.getFACTORRH()); 
              stmt.setBytes(7, valueObject.getFOTO()); 
              stmt.setInt(8, valueObject.getID_TRANSITO()); 
              stmt.setInt(9, valueObject.getNRO_LICENCIA()); 
              stmt.setInt(10, valueObject.getCATEGORIA()); 
              stmt.setString(11, valueObject.getEMAIL()); 
              stmt.setInt(12, valueObject.getID_SEXO()); 
              stmt.setString(13, valueObject.getID_DOCTO()); 
              stmt.setString(14, valueObject.getCELULAR()); 
              stmt.setString(15, valueObject.getID_MUNICIPIO()); 
              stmt.setString(16, valueObject.getSGDNOMBRE()); 
              stmt.setString(17, valueObject.getTELEFONO()); 
              stmt.setInt(18, valueObject.getID_GRUPOSANGUINEORUNT()); 
              stmt.setString(19, valueObject.getDIRECCION());
              if(Funciones.esFecha(valueObject.getFCH_EXPDOCUMENTO()))
                  stmt.setDate(20, Funciones.convFechaSSQL(valueObject.getFCH_EXPDOCUMENTO()));
              else
                  stmt.setNull(20, Types.DATE);
              stmt.setBytes(21, valueObject.getCODBIDIMENSIONAL()); 
              stmt.setBytes(22, valueObject.getFIRMA()); 
              stmt.setBytes(23, valueObject.getTOKENHUELLA()); 
              stmt.setInt(24, valueObject.getIDRUNT()); 
              if(Funciones.esFecha(valueObject.getFECHA_NAC()))
                stmt.setDate(25, Funciones.convFechaSSQL(valueObject.getFECHA_NAC()));
              else
                  stmt.setNull(25, Types.DATE);
              stmt.setString(26, valueObject.getID_PAIS());
              stmt.setString(27, valueObject.getID_DEPARTAMENTO());
              stmt.setInt(28, valueObject.getID_PERSONAS()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          }catch(Exception e){throw new Exception(e.getMessage());} finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, Persona valueObject) 
          throws NotFoundException, SQLException, Exception {

          String sql = "DELETE FROM PERSONAS WHERE (ID_PERSONAS = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getID_PERSONAS()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          }catch(Exception e){throw new Exception(e.getMessage());}  finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException, Exception {

          String sql = "DELETE FROM PERSONAS";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          }catch(Exception e){throw new Exception(e.getMessage());}  finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException, Exception {

          String sql = "SELECT count(*) FROM PERSONAS";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          }catch(Exception e){throw new Exception(e.getMessage());}  finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, Persona valueObject) throws SQLException, Exception {
        try{
          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM PERSONAS WHERE 1=1 ");

          if (valueObject.getID_PERSONAS() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_PERSONAS = ").append(valueObject.getID_PERSONAS()).append(" ");
          }

          if (valueObject.getIDENTIFICACION() != null) {
              if (first) { first = false; }
              sql.append("AND IDENTIFICACION = '").append(valueObject.getIDENTIFICACION()).append("' ");
          }

          if (valueObject.getNOMBRES() != null) {
              if (first) { first = false; }
              sql.append("AND NOMBRES = '").append(valueObject.getNOMBRES()).append("' ");
          }

          if (valueObject.getAPELLIDO1() != null) {
              if (first) { first = false; }
              sql.append("AND APELLIDO1 = '").append(valueObject.getAPELLIDO1()).append("' ");
          }

          if (valueObject.getAPELLIDO2() != null) {
              if (first) { first = false; }
              sql.append("AND APELLIDO2 = '").append(valueObject.getAPELLIDO2()).append("' ");
          }

          if (valueObject.getTIPOSANGRE() != null) {
              if (first) { first = false; }
              sql.append("AND TIPOSANGRE = '").append(valueObject.getTIPOSANGRE()).append("' ");
          }

          if (valueObject.getFACTORRH() != null) {
              if (first) { first = false; }
              sql.append("AND FACTORRH = '").append(valueObject.getFACTORRH()).append("' ");
          }

          /*if (valueObject.getFOTO() != null) {
              if (first) { first = false; }
              sql.append("AND FOTO = '").append(valueObject.getFOTO()).append("' ");
          }*/

          if (valueObject.getID_TRANSITO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_TRANSITO = ").append(valueObject.getID_TRANSITO()).append(" ");
          }
    
          if (valueObject.getNRO_LICENCIA() != 0) {
              if (first) { first = false; }
              sql.append("AND NRO_LICENCIA = ").append(valueObject.getNRO_LICENCIA()).append(" ");
          }
    
          if (valueObject.getCATEGORIA() != 0) {
              if (first) { first = false; }
              sql.append("AND CATEGORIA = ").append(valueObject.getCATEGORIA()).append(" ");
          }

          if (valueObject.getEMAIL() != null) {
              if (first) { first = false; }
              sql.append("AND EMAIL = '").append(valueObject.getEMAIL()).append("' ");
          }

          if (valueObject.getID_SEXO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_SEXO = ").append(valueObject.getID_SEXO()).append(" ");
          }
          if (valueObject.getID_DOCTO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_DOCTO = '").append(valueObject.getID_DOCTO()).append("' ");
          }

          if (valueObject.getCELULAR() != null) {
              if (first) { first = false; }
              sql.append("AND CELULAR = '").append(valueObject.getCELULAR()).append("' ");
          }

          if (valueObject.getID_MUNICIPIO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_MUNICIPIO = '").append(valueObject.getID_MUNICIPIO()).append("' ");
          }

          if (valueObject.getSGDNOMBRE() != null) {
              if (first) { first = false; }
              sql.append("AND SGDNOMBRE = '").append(valueObject.getSGDNOMBRE()).append("' ");
          }

          if (valueObject.getTELEFONO() != null) {
              if (first) { first = false; }
              sql.append("AND TELEFONO = '").append(valueObject.getTELEFONO()).append("' ");
          }

          if (valueObject.getID_GRUPOSANGUINEORUNT() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_GRUPOSANGUINEORUNT = ").append(valueObject.getID_GRUPOSANGUINEORUNT()).append(" ");
          }

          if (valueObject.getDIRECCION() != null) {
              if (first) { first = false; }
              sql.append("AND DIRECCION = '").append(valueObject.getDIRECCION()).append("' ");
          }

          if (valueObject.getFCH_EXPDOCUMENTO() != null) {
              if (first) { first = false; }
              sql.append("AND FCH_EXPDOCUMENTO = '").append(valueObject.getFCH_EXPDOCUMENTO()).append("' ");
          }

          /*if (valueObject.getCODBIDIMENSIONAL() != null) {
              if (first) { first = false; }
              sql.append("AND CODBIDIMENSIONAL = '").append(valueObject.getCODBIDIMENSIONAL()).append("' ");
          }

          if (valueObject.getFIRMA() != null) {
              if (first) { first = false; }
              sql.append("AND FIRMA = '").append(valueObject.getFIRMA()).append("' ");
          }

          if (valueObject.getTOKENHUELLA() != null) {
              if (first) { first = false; }
              sql.append("AND TOKENHUELLA = '").append(valueObject.getTOKENHUELLA()).append("' ");
          }*/

          if (valueObject.getIDRUNT() != 0) {
              if (first) { first = false; }
              sql.append("AND IDRUNT = ").append(valueObject.getIDRUNT()).append(" ");
          }

          if (valueObject.getFECHA_NAC() != null) {
              if (first) { first = false; }
              sql.append("AND FECHA_NAC = '").append(valueObject.getFECHA_NAC()).append("' ");
          }


          sql.append("ORDER BY ID_PERSONAS ASC ");

          System.out.println(sql);

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
        }catch(Exception e){throw new Exception(e.getMessage());} 
    }

    public List searchMatching2(Connection conn, Persona valueObject) throws SQLException, Exception {
        try{
          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM PERSONAS WHERE 1=1 ");

          if (valueObject.getID_PERSONAS() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_PERSONAS = ").append(valueObject.getID_PERSONAS()).append(" ");
          }

          if (valueObject.getIDENTIFICACION() != null) {
              if (first) { first = false; }
              sql.append("AND IDENTIFICACION = '").append(valueObject.getIDENTIFICACION()).append("' ");
          }

          if (valueObject.getNOMBRES() != null) {
              if (first) { first = false; }
              sql.append("AND NOMBRES LIKE '").append(valueObject.getNOMBRES()).append("%' ");
          }

          if (valueObject.getAPELLIDO1() != null) {
              if (first) { first = false; }
              sql.append("AND APELLIDO1 LIKE '").append(valueObject.getAPELLIDO1()).append("%' ");
          }

          if (valueObject.getAPELLIDO2() != null) {
              if (first) { first = false; }
              sql.append("AND APELLIDO2 LIKE '").append(valueObject.getAPELLIDO2()).append("%' ");
          }

          if (valueObject.getTIPOSANGRE() != null) {
              if (first) { first = false; }
              sql.append("AND TIPOSANGRE = '").append(valueObject.getTIPOSANGRE()).append("' ");
          }

          if (valueObject.getFACTORRH() != null) {
              if (first) { first = false; }
              sql.append("AND FACTORRH = '").append(valueObject.getFACTORRH()).append("' ");
          }

          /*if (valueObject.getFOTO() != null) {
              if (first) { first = false; }
              sql.append("AND FOTO = '").append(valueObject.getFOTO()).append("' ");
          }*/

          if (valueObject.getID_TRANSITO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_TRANSITO = ").append(valueObject.getID_TRANSITO()).append(" ");
          }
    
          if (valueObject.getNRO_LICENCIA() != 0) {
              if (first) { first = false; }
              sql.append("AND NRO_LICENCIA = ").append(valueObject.getNRO_LICENCIA()).append(" ");
          }
    
          if (valueObject.getCATEGORIA() != 0) {
              if (first) { first = false; }
              sql.append("AND CATEGORIA = ").append(valueObject.getCATEGORIA()).append(" ");
          }

          if (valueObject.getEMAIL() != null) {
              if (first) { first = false; }
              sql.append("AND EMAIL = '").append(valueObject.getEMAIL()).append("' ");
          }

          if (valueObject.getID_SEXO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_SEXO = ").append(valueObject.getID_SEXO()).append(" ");
          }
          if (valueObject.getID_DOCTO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_DOCTO = '").append(valueObject.getID_DOCTO()).append("' ");
          }

          if (valueObject.getCELULAR() != null) {
              if (first) { first = false; }
              sql.append("AND CELULAR = '").append(valueObject.getCELULAR()).append("' ");
          }

          if (valueObject.getID_MUNICIPIO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_MUNICIPIO = '").append(valueObject.getID_MUNICIPIO()).append("' ");
          }

          if (valueObject.getSGDNOMBRE() != null) {
              if (first) { first = false; }
              sql.append("AND SGDNOMBRE = '").append(valueObject.getSGDNOMBRE()).append("' ");
          }

          if (valueObject.getTELEFONO() != null) {
              if (first) { first = false; }
              sql.append("AND TELEFONO = '").append(valueObject.getTELEFONO()).append("' ");
          }

          if (valueObject.getID_GRUPOSANGUINEORUNT() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_GRUPOSANGUINEORUNT = ").append(valueObject.getID_GRUPOSANGUINEORUNT()).append(" ");
          }

          if (valueObject.getDIRECCION() != null) {
              if (first) { first = false; }
              sql.append("AND DIRECCION = '").append(valueObject.getDIRECCION()).append("' ");
          }

          if (valueObject.getFCH_EXPDOCUMENTO() != null) {
              if (first) { first = false; }
              sql.append("AND FCH_EXPDOCUMENTO = '").append(valueObject.getFCH_EXPDOCUMENTO()).append("' ");
          }

          /*if (valueObject.getCODBIDIMENSIONAL() != null) {
              if (first) { first = false; }
              sql.append("AND CODBIDIMENSIONAL = '").append(valueObject.getCODBIDIMENSIONAL()).append("' ");
          }

          if (valueObject.getFIRMA() != null) {
              if (first) { first = false; }
              sql.append("AND FIRMA = '").append(valueObject.getFIRMA()).append("' ");
          }

          if (valueObject.getTOKENHUELLA() != null) {
              if (first) { first = false; }
              sql.append("AND TOKENHUELLA = '").append(valueObject.getTOKENHUELLA()).append("' ");
          }*/

          if (valueObject.getIDRUNT() != 0) {
              if (first) { first = false; }
              sql.append("AND IDRUNT = ").append(valueObject.getIDRUNT()).append(" ");
          }

          if (valueObject.getFECHA_NAC() != null) {
              if (first) { first = false; }
              sql.append("AND FECHA_NAC = '").append(valueObject.getFECHA_NAC()).append("' ");
          }


          sql.append("ORDER BY ID_PERSONAS ASC ");

          System.out.println(sql);
          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
        }catch(Exception e){throw new Exception(e.getMessage());} 
    }

    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, Persona valueObject) 
          throws NotFoundException, SQLException,
                                                                                                    Exception {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setID_PERSONAS(result.getInt("ID_PERSONAS")); 
                   valueObject.setIDENTIFICACION(result.getString("IDENTIFICACION")); 
                   valueObject.setNOMBRES(result.getString("NOMBRES")); 
                   valueObject.setAPELLIDO1(result.getString("APELLIDO1")); 
                   valueObject.setAPELLIDO2(result.getString("APELLIDO2")); 
                   valueObject.setTIPOSANGRE(result.getString("TIPOSANGRE")); 
                   valueObject.setFACTORRH(result.getString("FACTORRH")); 
                   //valueObject.setFOTO(result.getBytes("FOTO")); 
                   valueObject.setID_TRANSITO(result.getInt("ID_TRANSITO")); 
                   valueObject.setNRO_LICENCIA(result.getInt("NRO_LICENCIA")); 
                   valueObject.setCATEGORIA(result.getInt("CATEGORIA")); 
                   valueObject.setEMAIL(result.getString("EMAIL")); 
                   valueObject.setID_SEXO(result.getInt("ID_SEXO")); 
                   valueObject.setID_DOCTO(result.getString("ID_DOCTO")); 
                   valueObject.setCELULAR(result.getString("CELULAR")); 
                   valueObject.setID_MUNICIPIO(result.getString("ID_MUNICIPIO")); 
                   valueObject.setSGDNOMBRE(result.getString("SGDNOMBRE")); 
                   valueObject.setTELEFONO(result.getString("TELEFONO")); 
                   valueObject.setID_GRUPOSANGUINEORUNT(result.getInt("ID_GRUPOSANGUINEORUNT")); 
                   valueObject.setDIRECCION(result.getString("DIRECCION")); 
                   valueObject.setFCH_EXPDOCUMENTO(result.getString("FCH_EXPDOCUMENTO")); 
                   //valueObject.setCODBIDIMENSIONAL(result.getBytes("CODBIDIMENSIONAL")); 
                   //valueObject.setFIRMA(result.getBytes("FIRMA")); 
                   //valueObject.setTOKENHUELLA(result.getBytes("TOKENHUELLA")); 
                   valueObject.setIDRUNT(result.getInt("IDRUNT")); 
                   valueObject.setFECHA_NAC(result.getString("FECHA_NAC")); 
                   valueObject.setID_PAIS(result.getString("ID_PAIS")); 
                   valueObject.setID_DEPARTAMENTO(result.getString("ID_DEPARTAMENTO")); 

              } else {
                    //System.out.println("Persona Object Not Found!");
                    throw new NotFoundException("Persona Object Not Found!");
              }
          }catch(Exception e){throw new Exception(e.getMessage());}  finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException, Exception {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   Persona temp = createValueObject();

                   temp.setID_PERSONAS(result.getInt("ID_PERSONAS")); 
                   temp.setIDENTIFICACION(result.getString("IDENTIFICACION")); 
                   temp.setNOMBRES(result.getString("NOMBRES")); 
                   temp.setAPELLIDO1(result.getString("APELLIDO1")); 
                   temp.setAPELLIDO2(result.getString("APELLIDO2")); 
                   temp.setTIPOSANGRE(result.getString("TIPOSANGRE")); 
                   temp.setFACTORRH(result.getString("FACTORRH")); 
                   //temp.setFOTO(result.getBytes("FOTO")); 
                   temp.setID_TRANSITO(result.getInt("ID_TRANSITO")); 
                   temp.setNRO_LICENCIA(result.getInt("NRO_LICENCIA")); 
                   temp.setCATEGORIA(result.getInt("CATEGORIA")); 
                   temp.setEMAIL(result.getString("EMAIL")); 
                   temp.setID_SEXO(result.getInt("ID_SEXO")); 
                   temp.setID_DOCTO(result.getString("ID_DOCTO")); 
                   temp.setCELULAR(result.getString("CELULAR")); 
                   temp.setID_MUNICIPIO(result.getString("ID_MUNICIPIO")); 
                   temp.setSGDNOMBRE(result.getString("SGDNOMBRE")); 
                   temp.setTELEFONO(result.getString("TELEFONO")); 
                   temp.setID_GRUPOSANGUINEORUNT(result.getInt("ID_GRUPOSANGUINEORUNT")); 
                   temp.setDIRECCION(result.getString("DIRECCION")); 
                   temp.setFCH_EXPDOCUMENTO(result.getString("FCH_EXPDOCUMENTO")); 
                   //temp.setCODBIDIMENSIONAL(result.getBytes("CODBIDIMENSIONAL")); 
                   //temp.setFIRMA(result.getBytes("FIRMA")); 
                   //temp.setTOKENHUELLA(result.getBytes("TOKENHUELLA")); 
                   temp.setIDRUNT(result.getInt("IDRUNT")); 
                   temp.setFECHA_NAC(result.getString("FECHA_NAC")); 
                   temp.setID_PAIS(result.getString("ID_PAIS")); 
                   temp.setID_DEPARTAMENTO(result.getString("ID_DEPARTAMENTO")); 

                   searchResults.add(temp);
              }

              }catch(Exception e){throw new Exception(e.getMessage());} 
          finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }

    public int getMaxId(Connection conn) throws SQLException, Exception {
        
            String sql = " SELECT GEN_ID(GEN_PERSONAS,1) FROM TRANSITO";
            PreparedStatement stmt = null;
            ResultSet result = null;
            int allRows = 0;

            try {
                stmt = conn.prepareStatement(sql);
                result = stmt.executeQuery();

                if (result.next())
                    allRows = result.getInt(1)+1;
            }catch(Exception e){throw new Exception(e.getMessage());}  finally {
                if (result != null)
                    result.close();
                if (stmt != null)
                    stmt.close();
            }
            return allRows;
      }
    
  public List validarExistenciaPersona(Connection conn, Persona valueObject) throws SQLException, Exception {
      try{
        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM PERSONAS WHERE 1=1 ");

        if (valueObject.getIDENTIFICACION() != null) {
            if (first) { first = false; }
            sql.append("AND IDENTIFICACION = '").append(valueObject.getIDENTIFICACION()).append("' ");
        }

        if (valueObject.getID_DOCTO() != null) {
            if (first) { first = false; }
            sql.append("AND ID_DOCTO = '").append(valueObject.getID_DOCTO()).append("' ");
        }

        sql.append("ORDER BY ID_PERSONAS ASC ");

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
             searchResults = new ArrayList();
        else
             searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
      }catch(Exception e){throw new Exception(e.getMessage());} 
  }
  
  public List validarExistenciaPersonaLlavePrimaria(Connection conn, Persona valueObject) throws SQLException,
                                                                                                   Exception {
      try{
        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM PERSONAS WHERE 1=1 ");

        if (valueObject.getID_PERSONAS() != 0) {
          if (first) { first = false; }
            sql.append("AND ID_PERSONAS = ").append(valueObject.getID_PERSONAS()).append(" ");
        }
        
        sql.append("ORDER BY ID_PERSONAS ASC ");

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
             searchResults = new ArrayList();
        else
             searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
      }catch(Exception e){throw new Exception(e.getMessage());} 
  }
  
  public List getPersonasIdentificacion(Connection conn, Persona valueObject) throws SQLException, Exception {
      try{
        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM PERSONAS WHERE 1=1 ");

        if (valueObject.getID_PERSONAS() != 0) {
            if (first) { first = false; }
            sql.append("AND ID_PERSONAS = ").append(valueObject.getID_PERSONAS()).append(" ");
        }

        if (valueObject.getIDENTIFICACION() != null) {
            if (first) { first = false; }
            sql.append("AND IDENTIFICACION = '").append(valueObject.getIDENTIFICACION()).append("' ");
        }

        if (valueObject.getNOMBRES() != null) {
            if (first) { first = false; }
            sql.append("AND NOMBRES = '").append(valueObject.getNOMBRES()).append("' ");
        }

        if (valueObject.getAPELLIDO1() != null) {
            if (first) { first = false; }
            sql.append("AND APELLIDO1 = '").append(valueObject.getAPELLIDO1()).append("' ");
        }

        if (valueObject.getAPELLIDO2() != null) {
            if (first) { first = false; }
            sql.append("AND APELLIDO2 = '").append(valueObject.getAPELLIDO2()).append("' ");
        }

        if (valueObject.getTIPOSANGRE() != null) {
            if (first) { first = false; }
            sql.append("AND TIPOSANGRE = '").append(valueObject.getTIPOSANGRE()).append("' ");
        }

        if (valueObject.getFACTORRH() != null) {
            if (first) { first = false; }
            sql.append("AND FACTORRH = '").append(valueObject.getFACTORRH()).append("' ");
        }

        /*if (valueObject.getFOTO() != null) {
            if (first) { first = false; }
            sql.append("AND FOTO = '").append(valueObject.getFOTO()).append("' ");
        }*/

        if (valueObject.getID_TRANSITO() != 0) {
            if (first) { first = false; }
            sql.append("AND ID_TRANSITO = ").append(valueObject.getID_TRANSITO()).append(" ");
        }
  
        if (valueObject.getNRO_LICENCIA() != 0) {
            if (first) { first = false; }
            sql.append("AND NRO_LICENCIA = ").append(valueObject.getNRO_LICENCIA()).append(" ");
        }
  
        if (valueObject.getCATEGORIA() != 0) {
            if (first) { first = false; }
            sql.append("AND CATEGORIA = ").append(valueObject.getCATEGORIA()).append(" ");
        }

        if (valueObject.getEMAIL() != null) {
            if (first) { first = false; }
            sql.append("AND EMAIL = '").append(valueObject.getEMAIL()).append("' ");
        }

        if (valueObject.getID_SEXO() != 0) {
            if (first) { first = false; }
            sql.append("AND ID_SEXO = ").append(valueObject.getID_SEXO()).append(" ");
        }
        if (valueObject.getID_DOCTO() != null) {
            if (first) { first = false; }
            sql.append("AND ID_DOCTO = '").append(valueObject.getID_DOCTO()).append("' ");
        }

        if (valueObject.getCELULAR() != null) {
            if (first) { first = false; }
            sql.append("AND CELULAR = '").append(valueObject.getCELULAR()).append("' ");
        }

        if (valueObject.getID_MUNICIPIO() != null) {
            if (first) { first = false; }
            sql.append("AND ID_MUNICIPIO = '").append(valueObject.getID_MUNICIPIO()).append("' ");
        }

        if (valueObject.getSGDNOMBRE() != null) {
            if (first) { first = false; }
            sql.append("AND SGDNOMBRE = '").append(valueObject.getSGDNOMBRE()).append("' ");
        }

        if (valueObject.getTELEFONO() != null) {
            if (first) { first = false; }
            sql.append("AND TELEFONO = '").append(valueObject.getTELEFONO()).append("' ");
        }

        if (valueObject.getID_GRUPOSANGUINEORUNT() != 0) {
            if (first) { first = false; }
            sql.append("AND ID_GRUPOSANGUINEORUNT = ").append(valueObject.getID_GRUPOSANGUINEORUNT()).append(" ");
        }

        if (valueObject.getDIRECCION() != null) {
            if (first) { first = false; }
            sql.append("AND DIRECCION = '").append(valueObject.getDIRECCION()).append("' ");
        }

        if (valueObject.getFCH_EXPDOCUMENTO() != null) {
            if (first) { first = false; }
            sql.append("AND FCH_EXPDOCUMENTO = '").append(valueObject.getFCH_EXPDOCUMENTO()).append("' ");
        }

        /*if (valueObject.getCODBIDIMENSIONAL() != null) {
            if (first) { first = false; }
            sql.append("AND CODBIDIMENSIONAL = '").append(valueObject.getCODBIDIMENSIONAL()).append("' ");
        }

        if (valueObject.getFIRMA() != null) {
            if (first) { first = false; }
            sql.append("AND FIRMA = '").append(valueObject.getFIRMA()).append("' ");
        }

        if (valueObject.getTOKENHUELLA() != null) {
            if (first) { first = false; }
            sql.append("AND TOKENHUELLA = '").append(valueObject.getTOKENHUELLA()).append("' ");
        }*/

        if (valueObject.getIDRUNT() != 0) {
            if (first) { first = false; }
            sql.append("AND IDRUNT = ").append(valueObject.getIDRUNT()).append(" ");
        }

        if (valueObject.getFECHA_NAC() != null) {
            if (first) { first = false; }
            sql.append("AND FECHA_NAC = '").append(valueObject.getFECHA_NAC()).append("' ");
        }


        sql.append("ORDER BY ID_PERSONAS ASC ");

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
             searchResults = new ArrayList();
        else
             searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
    }catch(Exception e){throw new Exception(e.getMessage());} 
  }
}


