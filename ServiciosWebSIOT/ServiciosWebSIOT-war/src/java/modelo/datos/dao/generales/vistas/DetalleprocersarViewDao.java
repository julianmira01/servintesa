package modelo.datos.dao.generales.vistas;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.generales.vistas.DetalleprocersarView;


/**
  * DetalleprocersarView Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve DetalleprocersarView object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class DetalleprocersarViewDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public DetalleprocersarView createValueObject() {
          return new DetalleprocersarView();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public DetalleprocersarView getObject(Connection conn, int IDTRAM_INTERNO) throws NotFoundException, SQLException {

          DetalleprocersarView valueObject = createValueObject();
          valueObject.setIDTRAM_INTERNO(IDTRAM_INTERNO);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, DetalleprocersarView valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM DETALLEPROCESAR_VIEW WHERE (IDTRAM_INTERNO = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getIDTRAM_INTERNO()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM DETALLEPROCESAR_VIEW ORDER BY PRIORIDAD ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



  
    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM DETALLEPROCESAR_VIEW";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, DetalleprocersarView valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM DETALLEPROCESAR_VIEW WHERE 1=1 ");

          if (valueObject.getIDTRAM_INTERNO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDTRAM_INTERNO = ").append(valueObject.getIDTRAM_INTERNO()).append(" ");
          }

          if (valueObject.getCODTRAMITE() != null) {
              if (first) { first = false; }
              sql.append("AND CODTRAMITE = '").append(valueObject.getCODTRAMITE()).append("' ");
          }

          if (valueObject.getCOD_RUNT() != 0) {
              if (first) { first = false; }
              sql.append("AND COD_RUNT = ").append(valueObject.getCOD_RUNT()).append(" ");
          }

          if (valueObject.getDESCTRAMITE() != null) {
              if (first) { first = false; }
              sql.append("AND DESCTRAMITE = '").append(valueObject.getDESCTRAMITE()).append("' ");
          }
/*
          if (valueObject.getDESCHOMOLOGACION() != null) {
              if (first) { first = false; }
              sql.append("AND DESCHOMOLOGACION = '").append(valueObject.getDESCHOMOLOGACION()).append("' ");
          }
          */
      if (valueObject.getLF_ID() != 0) {
          if (first) { first = false; }
          sql.append("AND LF_ID = ").append(valueObject.getLF_ID()).append(" ");
      }
        if (valueObject.getGENERALICTRANSITO() != null) {
            if (first) { first = false; }
            sql.append("AND GENERALIC_TRANSITO = '").append(valueObject.getGENERALICTRANSITO()).append("' ");
        }
        if (valueObject.getPRIORIDAD() != 0) {
            if (first) { first = false; }
            sql.append("AND PRIORIDAD = ").append(valueObject.getPRIORIDAD()).append(" ");
        }
        
      
          sql.append("ORDER BY PRIORIDAD ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));
            System.out.println(sql.toString());
          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, DetalleprocersarView valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setIDTRAM_INTERNO(result.getInt("IDTRAM_INTERNO")); 
                   valueObject.setCODTRAMITE(result.getString("CODTRAMITE")); 
                   valueObject.setCOD_RUNT(result.getInt("COD_RUNT")); 
                   valueObject.setDESCTRAMITE(result.getString("DESCTRAMITE")); 
                   valueObject.setLF_ID(result.getInt("LFD_LF_ID"));
                   valueObject.setGENERALICTRANSITO(result.getString("GENERALIC_TRANSITO"));
                   valueObject.setPRIORIDAD(result.getInt("PRIORIDAD"));

              } else {
                    //System.out.println("DetalleprocersarView Object Not Found!");
                    throw new NotFoundException("DetalleprocersarView Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   DetalleprocersarView temp = createValueObject();

                   temp.setIDTRAM_INTERNO(result.getInt("IDTRAM_INTERNO")); 
                   temp.setCODTRAMITE(result.getString("CODTRAMITE")); 
                   temp.setCOD_RUNT(result.getInt("COD_RUNT")); 
                   temp.setDESCTRAMITE(result.getString("DESCTRAMITE")); 
                   temp.setLF_ID(result.getInt("LF_ID"));
                   temp.setGENERALICTRANSITO(result.getString("GENERALIC_TRANSITO"));
                   temp.setPRIORIDAD(result.getInt("PRIORIDAD"));

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }


}
