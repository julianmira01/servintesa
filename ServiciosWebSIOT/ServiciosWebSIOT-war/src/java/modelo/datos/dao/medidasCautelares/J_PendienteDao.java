package modelo.datos.dao.medidasCautelares;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.medidasCautelares.J_Pendiente;

import utilidades.Funciones;


/**
  * J_Pendiente Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve J_Pendiente object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class J_PendienteDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public J_Pendiente createValueObject() {
          return new J_Pendiente();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public J_Pendiente getObject(Connection conn, int JP_ID) throws NotFoundException, SQLException {

          J_Pendiente valueObject = createValueObject();
          valueObject.setJP_ID(JP_ID);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, J_Pendiente valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM J_PENDIENTE WHERE (JP_ID = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getJP_ID()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM J_PENDIENTE ORDER BY JP_ID ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, J_Pendiente valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO J_PENDIENTE ( JP_ID, JP_V_ID, JP_JTP_ID, "
               + "JP_JE_ID, JP_ID_CIUDAD, JP_SUMARIO, "
               + "JP_ID_DEMANDANTE, JP_DEMANDANTE, JP_ESTADO, "
               + "JP_ACTIVO, JP_FECHA, JP_NOTA, "
               + "JP_NUM_ENTE, JP_NUMRAD_ENTE, JP_FIN_JE_ID, "
               + "JP_FIN_NUM_ENTE, JP_FIN_ID_CIUDAD, JP_FIN_SUMARIO, "
               + "JP_DIR_ENTE, JP_FIN_DIR_ENTE, JP_FIN_FECHA, "
               + "JP_USR_INSCRIBE, JP_USR_LEVANTA, JP_IDDOCTODEMANDADO, "
               + "JP_NUMDOCTODEMANDADO, JP_IDDOCTODEMANDANTE, JP_NUMDOCTODEMANDANTE, "
               + "JP_TIPOPROCESO, JP_FIN_TIPOPROCESO, JP_FIN_JTP_ID, "
               + "JP_FIN_NOTA, JP_FIN_NUMRAD_ENTE, JP_DEMANDADO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);

               //stmt.setInt(1, valueObject.getJP_ID()); 
               stmt.setInt(1, valueObject.getJP_ID());
               if (!Funciones.EnteroesNulo(valueObject.getJP_V_ID()))
                   stmt.setInt(2, valueObject.getJP_V_ID()); 
               else
                   stmt.setNull(2, Types.INTEGER);
               
               if (!Funciones.EnteroesNulo(valueObject.getJP_JTP_ID()))
                   stmt.setInt(3, valueObject.getJP_JTP_ID()); 
               else
                   stmt.setNull(3, Types.INTEGER);
              
               if (!Funciones.EnteroesNulo(valueObject.getJP_JE_ID()))
                   stmt.setInt(4, valueObject.getJP_JE_ID()); 
               else
                   stmt.setNull(4, Types.INTEGER);
               
               if(!Funciones.EnteroesNulo(valueObject.getJP_ID_CIUDAD()))
                   stmt.setInt(5, valueObject.getJP_ID_CIUDAD()); 
               else
                 stmt.setNull(5, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getJP_SUMARIO(), 40))
                   stmt.setString(6, valueObject.getJP_SUMARIO()); 
               else
                   stmt.setNull(6, Types.INTEGER);
              
              if (Funciones.contarCadena(valueObject.getJP_ID_DEMANDANTE(), 15))
                  stmt.setString(7, valueObject.getJP_ID_DEMANDANTE()); 
               else
                 stmt.setNull(7,Types.VARCHAR); 
              
               if (Funciones.contarCadena(valueObject.getJP_DEMANDANTE(), 50))
                  stmt.setString(8, valueObject.getJP_DEMANDANTE()); 
               else
                 stmt.setNull(8,Types.VARCHAR); 
               if (valueObject.getJP_ESTADO() != null)
                   stmt.setString(9, valueObject.getJP_ESTADO()); 
               else
                   stmt.setNull(9, Types.VARCHAR);
               if (!Funciones.EnteroesNulo(valueObject.getJP_ACTIVO()))
                   stmt.setInt(10, valueObject.getJP_ACTIVO());
               else
                   stmt.setNull(10, Types.INTEGER);
               if (Funciones.esFecha(valueObject.getJP_FECHA()))
                  stmt.setDate(11, Funciones.convFechaSSQL(valueObject.getJP_FECHA()));
               else
                   stmt.setNull(11, Types.DATE);
              
               if (Funciones.contarCadena(valueObject.getJP_NOTA(), 4000))
                   stmt.setString(12, valueObject.getJP_NOTA()); 
                   //stmt.setNull(12, Types.VARCHAR);
               else
                   stmt.setNull(12, Types.VARCHAR);
              
               if (Funciones.esEntero(valueObject.getJP_NUM_ENTE()))
                   stmt.setString(13, valueObject.getJP_NUM_ENTE()); 
               else
                   stmt.setNull(13,Types.VARCHAR);
              
               if (Funciones.esEntero(valueObject.getJP_NUM_ENTE()))
                   stmt.setString(14, valueObject.getJP_NUMRAD_ENTE()); 
               else
                   stmt.setNull(14, Types.VARCHAR);
               
               if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_JE_ID()))
                   stmt.setInt(15, valueObject.getJP_FIN_JE_ID()); 
               else
                   stmt.setNull(15, Types.INTEGER);
               if (Funciones.contarCadena(valueObject.getJP_FIN_NUM_ENTE(), 60))
                   stmt.setString(16, valueObject.getJP_FIN_NUM_ENTE()); 
               else
                   stmt.setNull(16, Types.VARCHAR);
              
               if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_ID_CIUDAD()))
                   stmt.setInt(17, valueObject.getJP_FIN_ID_CIUDAD()); 
               else
                   stmt.setNull(17, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getJP_FIN_SUMARIO(), 60))
                   stmt.setString(18, valueObject.getJP_FIN_SUMARIO()); 
               else
                   stmt.setNull(18, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getJP_DIR_ENTE(), 60))
                   stmt.setString(19, valueObject.getJP_DIR_ENTE()); 
               else
                   stmt.setNull(19, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getJP_FIN_DIR_ENTE(), 100))
                   stmt.setString(20, valueObject.getJP_FIN_DIR_ENTE()); 
               else
                   stmt.setNull(20, Types.VARCHAR);
              
               if (Funciones.esFecha(valueObject.getJP_FIN_FECHA()))
                   stmt.setDate(21, Funciones.convFechaSSQL(valueObject.getJP_FIN_FECHA())); 
               else
                   stmt.setNull(21, Types.DATE);
              
               if (!Funciones.EnteroesNulo(valueObject.getJP_USR_INSCRIBE()))
                   stmt.setInt(22, valueObject.getJP_USR_INSCRIBE()); 
               else
                   stmt.setNull(22, Types.INTEGER);
              
               if (!Funciones.EnteroesNulo(valueObject.getJP_USR_LEVANTA()))
                   stmt.setInt(23, valueObject.getJP_USR_LEVANTA());
               else
                   stmt.setNull(23, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getJP_IDDOCTODEMANDADO(), 5))
                   stmt.setString(24, valueObject.getJP_IDDOCTODEMANDADO()); 
               else
                   stmt.setNull(24, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getJP_NUMDOCTODEMANDADO(), 30))
                   stmt.setString(25, valueObject.getJP_NUMDOCTODEMANDADO()); 
               else
                   stmt.setNull(25, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getJP_IDDOCTODEMANDANTE(), 5))
                   stmt.setString(26, valueObject.getJP_IDDOCTODEMANDANTE()); 
               else
                   stmt.setNull(26, Types.VARCHAR);
               if (Funciones.contarCadena(valueObject.getJP_NUMDOCTODEMANDANTE(), 30))
                   stmt.setString(27, valueObject.getJP_NUMDOCTODEMANDANTE()); 
               else
                   stmt.setNull(27, Types.VARCHAR);
               
               if (!Funciones.EnteroesNulo(valueObject.getJP_TIPOPROCESO()))
                   stmt.setInt(28, valueObject.getJP_TIPOPROCESO()); 
               else 
                   stmt.setNull(28, Types.INTEGER);
              
               if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_TIPOPROCESO()))
                   stmt.setInt(29, valueObject.getJP_FIN_TIPOPROCESO()); 
               else
                   stmt.setNull(29, Types.INTEGER);
              
               if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_JTP_ID()))
                   stmt.setInt(30, valueObject.getJP_FIN_JTP_ID()); 
               else
                   stmt.setNull(30, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getJP_FIN_NOTA(), 4000))
                   stmt.setString(31, valueObject.getJP_FIN_NOTA()); 
                   //stmt.setNull(31, Types.VARCHAR);
               else
                   stmt.setNull(31, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getJP_FIN_NUMRAD_ENTE(), 60))
                   stmt.setString(32, valueObject.getJP_FIN_NUMRAD_ENTE()); 
               else
                   stmt.setNull(32, Types.VARCHAR);
               if (Funciones.contarCadena(valueObject.getJP_DEMANDADO(), 50))
                   stmt.setString(33, valueObject.getJP_DEMANDADO()); 
               else
                   stmt.setNull(33, Types.VARCHAR);

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, J_Pendiente valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE J_PENDIENTE SET JP_V_ID = ?, JP_JTP_ID = ?, JP_JE_ID = ?, "
               + "JP_ID_CIUDAD = ?, JP_SUMARIO = ?, JP_ID_DEMANDANTE = ?, "
               + "JP_DEMANDANTE = ?, JP_ESTADO = ?, JP_ACTIVO = ?, "
               + "JP_FECHA = ?, JP_NOTA = ?, JP_NUM_ENTE = ?, "
               + "JP_NUMRAD_ENTE = ?, JP_FIN_JE_ID = ?, JP_FIN_NUM_ENTE = ?, "
               + "JP_FIN_ID_CIUDAD = ?, JP_FIN_SUMARIO = ?, JP_DIR_ENTE = ?, "
               + "JP_FIN_DIR_ENTE = ?, JP_FIN_FECHA = ?, JP_USR_INSCRIBE = ?, "
               + "JP_USR_LEVANTA = ?, JP_IDDOCTODEMANDADO = ?, JP_NUMDOCTODEMANDADO = ?, "
               + "JP_IDDOCTODEMANDANTE = ?, JP_NUMDOCTODEMANDANTE = ?, JP_TIPOPROCESO = ?, "
               + "JP_FIN_TIPOPROCESO = ?, JP_FIN_JTP_ID = ?, JP_FIN_NOTA = ?, "
               + "JP_FIN_NUMRAD_ENTE = ?, JP_DEMANDADO = ? WHERE (JP_ID = ? ) ";
          PreparedStatement stmt = null;

          try {
              
              stmt = conn.prepareStatement(sql);
              /*
              if(valueObject.getJP_V_ID() != 0 )
                  stmt.setInt(1, valueObject.getJP_V_ID()); 
              else
                  stmt.setNull(1, Types.INTEGER);
              if(valueObject.getJP_JTP_ID() != 0)
                  stmt.setInt(2, valueObject.getJP_JTP_ID());
              else
                  stmt.setNull(2, Types.INTEGER);
              if(valueObject.getJP_JE_ID() != 0 )
                  stmt.setInt(3, valueObject.getJP_JE_ID()); 
              else
                  stmt.setNull(3, Types.INTEGER);
              if (valueObject.getJP_ID_CIUDAD() != 0)
                  stmt.setInt(4, valueObject.getJP_ID_CIUDAD()); 
              else
                  stmt.setNull(4, Types.INTEGER);
              if (Funciones.contarCadena(valueObject.getJP_SUMARIO(),40))
                  stmt.setString(5, valueObject.getJP_SUMARIO()); 
              else
                  stmt.setNull(5, Types.VARCHAR);
              if (Funciones.contarCadena(valueObject.getJP_ID_DEMANDANTE(),15 ))
                  stmt.setString(6, valueObject.getJP_ID_DEMANDANTE()); 
              else
                  stmt.setNull(6, Types.VARCHAR);
              if (Funciones.contarCadena(valueObject.getJP_DEMANDANTE(), 50))
                  stmt.setString(7, valueObject.getJP_DEMANDANTE()); 
              else
                  stmt.setNull(7, Types.VARCHAR);
              if (Funciones.contarCadena(valueObject.getJP_ESTADO(), 3))
                  stmt.setString(8, valueObject.getJP_ESTADO()); 
              else
                  stmt.setNull(8, Types.VARCHAR);
              if (Funciones.EnteroesNulo(valueObject.getJP_ACTIVO()))
                  stmt.setInt(9, valueObject.getJP_ACTIVO()); 
              else
                  stmt.setNull(9, Types.INTEGER);
              if (Funciones.esFecha(valueObject.getJP_FECHA()))
                  stmt.setDate(10, Funciones.convFechaSSQL(valueObject.getJP_FECHA()));
              else
                  stmt.setNull(10, Types.DATE);
              
              stmt.setString(11, valueObject.getJP_NOTA()); 
              stmt.setString(12, valueObject.getJP_NUM_ENTE()); 
              stmt.setString(13, valueObject.getJP_NUMRAD_ENTE()); 
              stmt.setInt(14, valueObject.getJP_FIN_JE_ID()); 
              stmt.setString(15, valueObject.getJP_FIN_NUM_ENTE()); 
              stmt.setInt(16, valueObject.getJP_FIN_ID_CIUDAD()); 
              stmt.setString(17, valueObject.getJP_FIN_SUMARIO()); 
              stmt.setString(18, valueObject.getJP_DIR_ENTE()); 
              stmt.setString(19, valueObject.getJP_FIN_DIR_ENTE()); 
              stmt.setString(20, valueObject.getJP_FIN_FECHA()); 
              stmt.setInt(21, valueObject.getJP_USR_INSCRIBE()); 
              stmt.setInt(22, valueObject.getJP_USR_LEVANTA()); 
              stmt.setString(23, valueObject.getJP_IDDOCTODEMANDADO()); 
              stmt.setString(24, valueObject.getJP_NUMDOCTODEMANDADO()); 
              stmt.setString(25, valueObject.getJP_IDDOCTODEMANDANTE()); 
              stmt.setString(26, valueObject.getJP_NUMDOCTODEMANDANTE()); 
              stmt.setInt(27, valueObject.getJP_TIPOPROCESO()); 
              stmt.setInt(28, valueObject.getJP_FIN_TIPOPROCESO()); 
              stmt.setInt(29, valueObject.getJP_FIN_JTP_ID()); 
              stmt.setString(30, valueObject.getJP_FIN_NOTA()); 
              stmt.setString(31, valueObject.getJP_FIN_NUMRAD_ENTE()); 
              */
              if (!Funciones.EnteroesNulo(valueObject.getJP_V_ID()))
                  stmt.setInt(1, valueObject.getJP_V_ID()); 
              else
                  stmt.setNull(1, Types.INTEGER);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_JTP_ID()))
                  stmt.setInt(2, valueObject.getJP_JTP_ID()); 
              else
                  stmt.setNull(2, Types.INTEGER);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_JE_ID()))
                  stmt.setInt(3, valueObject.getJP_JE_ID()); 
              else
                  stmt.setNull(3, Types.INTEGER);
              
              if(!Funciones.EnteroesNulo(valueObject.getJP_ID_CIUDAD()))
                  stmt.setInt(4, valueObject.getJP_ID_CIUDAD()); 
              else
                stmt.setNull(4, Types.INTEGER);
              
              if (Funciones.contarCadena(valueObject.getJP_SUMARIO(), 40))
                  stmt.setString(5, valueObject.getJP_SUMARIO()); 
              else
                  stmt.setNull(5, Types.INTEGER);
              
              if (Funciones.contarCadena(valueObject.getJP_ID_DEMANDANTE(), 15))
                 stmt.setString(6, valueObject.getJP_ID_DEMANDANTE()); 
              else
                stmt.setNull(6,Types.VARCHAR); 
              
              if (Funciones.contarCadena(valueObject.getJP_DEMANDANTE(), 50))
                 stmt.setString(7, valueObject.getJP_DEMANDANTE()); 
              else
                stmt.setNull(7,Types.VARCHAR); 
              if (valueObject.getJP_ESTADO() != null)
                  stmt.setString(8, valueObject.getJP_ESTADO()); 
              else
                  stmt.setNull(8, Types.VARCHAR);
              if (!Funciones.EnteroesNulo(valueObject.getJP_ACTIVO()))
                  stmt.setInt(9, valueObject.getJP_ACTIVO());
              else
                  stmt.setNull(9, Types.INTEGER);
              if (Funciones.esFecha(valueObject.getJP_FECHA()))
                 stmt.setDate(10, Funciones.convFechaSSQL(valueObject.getJP_FECHA()));
              else
                  stmt.setNull(10, Types.DATE);
              
              if (Funciones.contarCadena(valueObject.getJP_NOTA(), 4000))
                  stmt.setString(11, valueObject.getJP_NOTA()); 
                  //stmt.setNull(11, Types.VARCHAR);
              else
                  stmt.setNull(11, Types.VARCHAR);
              
              if (Funciones.esEntero(valueObject.getJP_NUM_ENTE()))
                  stmt.setString(12, valueObject.getJP_NUM_ENTE()); 
              else
                  stmt.setNull(12,Types.VARCHAR);
              
              if (Funciones.esEntero(valueObject.getJP_NUMRAD_ENTE()))
                  stmt.setString(13, valueObject.getJP_NUMRAD_ENTE()); 
              else
                  stmt.setNull(13, Types.VARCHAR);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_JE_ID()))
                  stmt.setInt(14, valueObject.getJP_FIN_JE_ID()); 
              else
                  stmt.setNull(14, Types.INTEGER);
              if (Funciones.contarCadena(valueObject.getJP_FIN_NUM_ENTE(), 60))
                  stmt.setString(15, valueObject.getJP_FIN_NUM_ENTE()); 
              else
                  stmt.setNull(15, Types.VARCHAR);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_ID_CIUDAD()))
                  stmt.setInt(16, valueObject.getJP_FIN_ID_CIUDAD()); 
              else
                  stmt.setNull(16, Types.INTEGER);
              
              if (Funciones.contarCadena(valueObject.getJP_FIN_SUMARIO(), 60))
                  stmt.setString(17, valueObject.getJP_FIN_SUMARIO()); 
              else
                  stmt.setNull(17, Types.VARCHAR);
              
              if (Funciones.contarCadena(valueObject.getJP_DIR_ENTE(), 60))
                  stmt.setString(18, valueObject.getJP_DIR_ENTE()); 
              else
                  stmt.setNull(18, Types.VARCHAR);
              
              if (Funciones.contarCadena(valueObject.getJP_FIN_DIR_ENTE(), 100))
                  stmt.setString(19, valueObject.getJP_FIN_DIR_ENTE()); 
              else
                  stmt.setNull(19, Types.VARCHAR);
              
              if (Funciones.esFecha(valueObject.getJP_FIN_FECHA()))
                  stmt.setDate(20, Funciones.convFechaSSQL(valueObject.getJP_FIN_FECHA())); 
              else
                  stmt.setNull(20, Types.DATE);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_USR_INSCRIBE()))
                  stmt.setInt(21, valueObject.getJP_USR_INSCRIBE()); 
              else
                  stmt.setNull(21, Types.INTEGER);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_USR_LEVANTA()))
                  stmt.setInt(22, valueObject.getJP_USR_LEVANTA());
              else
                  stmt.setNull(22, Types.INTEGER);
              
              if (Funciones.contarCadena(valueObject.getJP_IDDOCTODEMANDADO(), 5))
                  stmt.setString(23, valueObject.getJP_IDDOCTODEMANDADO()); 
              else
                  stmt.setNull(23, Types.VARCHAR);
              
              if (Funciones.contarCadena(valueObject.getJP_NUMDOCTODEMANDADO(), 30))
                  stmt.setString(24, valueObject.getJP_NUMDOCTODEMANDADO()); 
              else
                  stmt.setNull(24, Types.VARCHAR);
              
              if (Funciones.contarCadena(valueObject.getJP_IDDOCTODEMANDANTE(), 5))
                  stmt.setString(25, valueObject.getJP_IDDOCTODEMANDANTE()); 
              else
                  stmt.setNull(25, Types.VARCHAR);
              if (Funciones.contarCadena(valueObject.getJP_NUMDOCTODEMANDANTE(), 30))
                  stmt.setString(26, valueObject.getJP_NUMDOCTODEMANDANTE()); 
              else
                  stmt.setNull(26, Types.VARCHAR);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_TIPOPROCESO()))
                  stmt.setInt(27, valueObject.getJP_TIPOPROCESO()); 
              else 
                  stmt.setNull(27, Types.INTEGER);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_TIPOPROCESO()))
                  stmt.setInt(28, valueObject.getJP_FIN_TIPOPROCESO()); 
              else
                  stmt.setNull(28, Types.INTEGER);
              
              if (!Funciones.EnteroesNulo(valueObject.getJP_FIN_JTP_ID()))
                  stmt.setInt(29, valueObject.getJP_FIN_JTP_ID()); 
              else
                  stmt.setNull(29, Types.INTEGER);
              
              if (Funciones.contarCadena(valueObject.getJP_FIN_NOTA(), 4000))
                  stmt.setString(30, valueObject.getJP_FIN_NOTA()); 
                  //stmt.setNull(30, Types.VARCHAR);
              else
                  stmt.setNull(30, Types.VARCHAR);
              
              if (Funciones.contarCadena(valueObject.getJP_FIN_NUMRAD_ENTE(), 60))
                  stmt.setString(31, valueObject.getJP_FIN_NUMRAD_ENTE()); 
              else
                  stmt.setNull(31, Types.VARCHAR);
              if (Funciones.contarCadena(valueObject.getJP_DEMANDADO(), 50))
                  stmt.setString(32, valueObject.getJP_DEMANDADO()); 
              else
                  stmt.setNull(32, Types.VARCHAR);
              if (!Funciones.EnteroesNulo(valueObject.getJP_ID()))
                  stmt.setInt(33, valueObject.getJP_ID()); 
              else
                  stmt.setNull(33, Types.INTEGER);

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, J_Pendiente valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM J_PENDIENTE WHERE (JP_ID = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getJP_ID()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM J_PENDIENTE";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
     
    public int ultimoId(Connection conn) throws SQLException {

          String sql = "SELECT MAX(j_pendiente.jp_id) FROM j_pendiente";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int lastId = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  lastId = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return lastId;
    }
                                       
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM J_PENDIENTE";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, J_Pendiente valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
         // StringBuffer sql = new StringBuffer("SELECT * FROM J_PENDIENTE WHERE 1=1 ");
         StringBuffer sql = new StringBuffer("SELECT \n" + 
         "  J_PENDIENTE.JP_ID,\n" + 
         "  J_PENDIENTE.JP_V_ID,\n" + 
         "  J_PENDIENTE.JP_JTP_ID,\n" + 
         "  J_PENDIENTE.JP_JE_ID,\n" + 
         "  J_PENDIENTE.JP_ID_CIUDAD,\n" + 
         "  J_PENDIENTE.JP_SUMARIO,\n" + 
         "  J_PENDIENTE.JP_ID_DEMANDANTE,\n" + 
         "  J_PENDIENTE.JP_DEMANDANTE,\n" + 
         "  J_PENDIENTE.JP_ESTADO,\n" + 
         "  J_PENDIENTE.JP_ACTIVO,\n" + 
         "  J_PENDIENTE.JP_FECHA,\n" + 
         "  J_PENDIENTE.JP_NOTA,\n" + 
         "  J_PENDIENTE.JP_NUM_ENTE,\n" + 
         "  J_PENDIENTE.JP_NUMRAD_ENTE,\n" + 
         "  J_PENDIENTE.JP_FIN_JE_ID,\n" + 
         "  J_PENDIENTE.JP_FIN_NUM_ENTE,\n" + 
         "  J_PENDIENTE.JP_FIN_ID_CIUDAD,\n" + 
         "  J_PENDIENTE.JP_FIN_SUMARIO,\n" + 
         "  J_PENDIENTE.JP_DIR_ENTE,\n" + 
         "  J_PENDIENTE.JP_FIN_DIR_ENTE,\n" + 
         "  J_PENDIENTE.JP_FIN_FECHA,\n" + 
         "  J_PENDIENTE.JP_USR_INSCRIBE,\n" + 
         "  J_PENDIENTE.JP_USR_LEVANTA,\n" + 
         "  J_PENDIENTE.JP_IDDOCTODEMANDADO,\n" + 
         "  J_PENDIENTE.JP_NUMDOCTODEMANDADO,\n" + 
         "  J_PENDIENTE.JP_IDDOCTODEMANDANTE,\n" + 
         "  J_PENDIENTE.JP_NUMDOCTODEMANDANTE,\n" + 
         "  J_PENDIENTE.JP_TIPOPROCESO,\n" + 
         "  J_PENDIENTE.JP_FIN_TIPOPROCESO,\n" + 
         "  J_PENDIENTE.JP_FIN_JTP_ID,\n" + 
         "  J_PENDIENTE.JP_FIN_NOTA,\n" + 
         "  J_PENDIENTE.JP_FIN_NUMRAD_ENTE,\n" + 
         "  J_PENDIENTE.JP_DEMANDADO\n" + 
         "FROM\n" + 
         "  J_PENDIENTE WHERE 1=1 ");
         
          if (valueObject.getJP_ID() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_ID = ").append(valueObject.getJP_ID()).append(" ");
          }

          if (valueObject.getJP_V_ID() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_V_ID = ").append(valueObject.getJP_V_ID()).append(" ");
          }

          if (valueObject.getJP_JTP_ID() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_JTP_ID = ").append(valueObject.getJP_JTP_ID()).append(" ");
          }

          if (valueObject.getJP_JE_ID() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_JE_ID = ").append(valueObject.getJP_JE_ID()).append(" ");
          }

          if (valueObject.getJP_ID_CIUDAD() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_ID_CIUDAD = ").append(valueObject.getJP_ID_CIUDAD()).append(" ");
          }

          if (valueObject.getJP_SUMARIO() != null) {
              if (first) { first = false; }
              sql.append("AND JP_SUMARIO LIKE '").append(valueObject.getJP_SUMARIO()).append("%' ");
          }

          if (valueObject.getJP_ID_DEMANDANTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_ID_DEMANDANTE LIKE '").append(valueObject.getJP_ID_DEMANDANTE()).append("%' ");
          }

          if (valueObject.getJP_DEMANDANTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_DEMANDANTE LIKE '").append(valueObject.getJP_DEMANDANTE()).append("%' ");
          }

          if (valueObject.getJP_ESTADO() != null) {
              if (first) { first = false; }
              sql.append("AND JP_ESTADO LIKE '").append(valueObject.getJP_ESTADO()).append("%' ");
          }

          if (valueObject.getJP_ACTIVO() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_ACTIVO = ").append(valueObject.getJP_ACTIVO()).append(" ");
          }

          if (valueObject.getJP_FECHA() != null) {
              if (first) { first = false; }
              sql.append("AND JP_FECHA LIKE '").append(valueObject.getJP_FECHA()).append("%' ");
          }

          if (valueObject.getJP_NOTA() != null) {
              if (first) { first = false; }
              sql.append("AND JP_NOTA LIKE '").append(valueObject.getJP_NOTA()).append("%' ");
          }

          if (valueObject.getJP_NUM_ENTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_NUM_ENTE LIKE '").append(valueObject.getJP_NUM_ENTE()).append("%' ");
          }

          if (valueObject.getJP_NUMRAD_ENTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_NUMRAD_ENTE LIKE '").append(valueObject.getJP_NUMRAD_ENTE()).append("%' ");
          }

          if (valueObject.getJP_FIN_JE_ID() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_JE_ID = ").append(valueObject.getJP_FIN_JE_ID()).append(" ");
          }

          if (valueObject.getJP_FIN_NUM_ENTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_NUM_ENTE LIKE '").append(valueObject.getJP_FIN_NUM_ENTE()).append("%' ");
          }

          if (valueObject.getJP_FIN_ID_CIUDAD() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_ID_CIUDAD = ").append(valueObject.getJP_FIN_ID_CIUDAD()).append(" ");
          }

          if (valueObject.getJP_FIN_SUMARIO() != null) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_SUMARIO LIKE '").append(valueObject.getJP_FIN_SUMARIO()).append("%' ");
          }

          if (valueObject.getJP_DIR_ENTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_DIR_ENTE LIKE '").append(valueObject.getJP_DIR_ENTE()).append("%' ");
          }

          if (valueObject.getJP_FIN_DIR_ENTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_DIR_ENTE LIKE '").append(valueObject.getJP_FIN_DIR_ENTE()).append("%' ");
          }

          if (valueObject.getJP_FIN_FECHA() != null) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_FECHA LIKE '").append(valueObject.getJP_FIN_FECHA()).append("%' ");
          }

          if (valueObject.getJP_USR_INSCRIBE() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_USR_INSCRIBE = ").append(valueObject.getJP_USR_INSCRIBE()).append(" ");
          }

          if (valueObject.getJP_USR_LEVANTA() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_USR_LEVANTA = ").append(valueObject.getJP_USR_LEVANTA()).append(" ");
          }

          if (valueObject.getJP_IDDOCTODEMANDADO() != null) {
              if (first) { first = false; }
              sql.append("AND JP_IDDOCTODEMANDADO LIKE '").append(valueObject.getJP_IDDOCTODEMANDADO()).append("%' ");
          }

          if (valueObject.getJP_NUMDOCTODEMANDADO() != null) {
              if (first) { first = false; }
              sql.append("AND JP_NUMDOCTODEMANDADO LIKE '").append(valueObject.getJP_NUMDOCTODEMANDADO()).append("%' ");
          }

          if (valueObject.getJP_IDDOCTODEMANDANTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_IDDOCTODEMANDANTE LIKE '").append(valueObject.getJP_IDDOCTODEMANDANTE()).append("%' ");
          }

          if (valueObject.getJP_NUMDOCTODEMANDANTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_NUMDOCTODEMANDANTE LIKE '").append(valueObject.getJP_NUMDOCTODEMANDANTE()).append("%' ");
          }

          if (valueObject.getJP_TIPOPROCESO() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_TIPOPROCESO = ").append(valueObject.getJP_TIPOPROCESO()).append(" ");
          }

          if (valueObject.getJP_FIN_TIPOPROCESO() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_TIPOPROCESO = ").append(valueObject.getJP_FIN_TIPOPROCESO()).append(" ");
          }

          if (valueObject.getJP_FIN_JTP_ID() != 0) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_JTP_ID = ").append(valueObject.getJP_FIN_JTP_ID()).append(" ");
          }

          if (valueObject.getJP_FIN_NOTA() != null) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_NOTA LIKE '").append(valueObject.getJP_FIN_NOTA()).append("%' ");
          }

          if (valueObject.getJP_FIN_NUMRAD_ENTE() != null) {
              if (first) { first = false; }
              sql.append("AND JP_FIN_NUMRAD_ENTE LIKE '").append(valueObject.getJP_FIN_NUMRAD_ENTE()).append("%' ");
          }
          
          if (valueObject.getJP_DEMANDADO() != null) {
              if (first) { first = false; }
              sql.append("AND JP_DEMANDADO LIKE '").append(valueObject.getJP_DEMANDADO()).append("%' ");
          }

          sql.append("ORDER BY JP_ID ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, J_Pendiente valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setJP_ID(result.getInt("JP_ID")); 
                   valueObject.setJP_V_ID(result.getInt("JP_V_ID")); 
                   valueObject.setJP_JTP_ID(result.getInt("JP_JTP_ID")); 
                   valueObject.setJP_JE_ID(result.getInt("JP_JE_ID")); 
                   valueObject.setJP_ID_CIUDAD(result.getInt("JP_ID_CIUDAD")); 
                   valueObject.setJP_SUMARIO(result.getString("JP_SUMARIO")); 
                   valueObject.setJP_ID_DEMANDANTE(result.getString("JP_ID_DEMANDANTE")); 
                   valueObject.setJP_DEMANDANTE(result.getString("JP_DEMANDANTE")); 
                   valueObject.setJP_ESTADO(result.getString("JP_ESTADO")); 
                   valueObject.setJP_ACTIVO(result.getInt("JP_ACTIVO")); 
                   valueObject.setJP_FECHA(result.getString("JP_FECHA")); 
                   valueObject.setJP_NOTA(result.getString("JP_NOTA")); 
                   valueObject.setJP_NUM_ENTE(result.getString("JP_NUM_ENTE")); 
                   valueObject.setJP_NUMRAD_ENTE(result.getString("JP_NUMRAD_ENTE")); 
                   valueObject.setJP_FIN_JE_ID(result.getInt("JP_FIN_JE_ID")); 
                   valueObject.setJP_FIN_NUM_ENTE(result.getString("JP_FIN_NUM_ENTE")); 
                   valueObject.setJP_FIN_ID_CIUDAD(result.getInt("JP_FIN_ID_CIUDAD")); 
                   valueObject.setJP_FIN_SUMARIO(result.getString("JP_FIN_SUMARIO")); 
                   valueObject.setJP_DIR_ENTE(result.getString("JP_DIR_ENTE")); 
                   valueObject.setJP_FIN_DIR_ENTE(result.getString("JP_FIN_DIR_ENTE")); 
                   valueObject.setJP_FIN_FECHA(result.getString("JP_FIN_FECHA")); 
                   valueObject.setJP_USR_INSCRIBE(result.getInt("JP_USR_INSCRIBE")); 
                   valueObject.setJP_USR_LEVANTA(result.getInt("JP_USR_LEVANTA")); 
                   valueObject.setJP_IDDOCTODEMANDADO(result.getString("JP_IDDOCTODEMANDADO")); 
                   valueObject.setJP_NUMDOCTODEMANDADO(result.getString("JP_NUMDOCTODEMANDADO")); 
                   valueObject.setJP_IDDOCTODEMANDANTE(result.getString("JP_IDDOCTODEMANDANTE")); 
                   valueObject.setJP_NUMDOCTODEMANDANTE(result.getString("JP_NUMDOCTODEMANDANTE")); 
                   valueObject.setJP_TIPOPROCESO(result.getInt("JP_TIPOPROCESO")); 
                   valueObject.setJP_FIN_TIPOPROCESO(result.getInt("JP_FIN_TIPOPROCESO")); 
                   valueObject.setJP_FIN_JTP_ID(result.getInt("JP_FIN_JTP_ID")); 
                   valueObject.setJP_FIN_NOTA(result.getString("JP_FIN_NOTA")); 
                   valueObject.setJP_FIN_NUMRAD_ENTE(result.getString("JP_FIN_NUMRAD_ENTE")); 
                   valueObject.setJP_DEMANDADO(result.getString("JP_DEMANDADO")); 

              } else {
                    //System.out.println("J_Pendiente Object Not Found!");
                    throw new NotFoundException("J_Pendiente Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   J_Pendiente temp = createValueObject();

                   temp.setJP_ID(result.getInt("JP_ID")); 
                   temp.setJP_V_ID(result.getInt("JP_V_ID")); 
                   temp.setJP_JTP_ID(result.getInt("JP_JTP_ID")); 
                   temp.setJP_JE_ID(result.getInt("JP_JE_ID")); 
                   temp.setJP_ID_CIUDAD(result.getInt("JP_ID_CIUDAD")); 
                   temp.setJP_SUMARIO(result.getString("JP_SUMARIO")); 
                   temp.setJP_ID_DEMANDANTE(result.getString("JP_ID_DEMANDANTE")); 
                   temp.setJP_DEMANDANTE(result.getString("JP_DEMANDANTE")); 
                   temp.setJP_ESTADO(result.getString("JP_ESTADO")); 
                   temp.setJP_ACTIVO(result.getInt("JP_ACTIVO")); 
                   temp.setJP_FECHA(result.getString("JP_FECHA")); 
                   temp.setJP_NOTA(result.getString("JP_NOTA")); 
                   temp.setJP_NUM_ENTE(result.getString("JP_NUM_ENTE")); 
                   temp.setJP_NUMRAD_ENTE(result.getString("JP_NUMRAD_ENTE")); 
                   temp.setJP_FIN_JE_ID(result.getInt("JP_FIN_JE_ID")); 
                   temp.setJP_FIN_NUM_ENTE(result.getString("JP_FIN_NUM_ENTE")); 
                   temp.setJP_FIN_ID_CIUDAD(result.getInt("JP_FIN_ID_CIUDAD")); 
                   temp.setJP_FIN_SUMARIO(result.getString("JP_FIN_SUMARIO")); 
                   temp.setJP_DIR_ENTE(result.getString("JP_DIR_ENTE")); 
                   temp.setJP_FIN_DIR_ENTE(result.getString("JP_FIN_DIR_ENTE")); 
                   temp.setJP_FIN_FECHA(result.getString("JP_FIN_FECHA")); 
                   temp.setJP_USR_INSCRIBE(result.getInt("JP_USR_INSCRIBE")); 
                   temp.setJP_USR_LEVANTA(result.getInt("JP_USR_LEVANTA")); 
                   temp.setJP_IDDOCTODEMANDADO(result.getString("JP_IDDOCTODEMANDADO")); 
                   temp.setJP_NUMDOCTODEMANDADO(result.getString("JP_NUMDOCTODEMANDADO")); 
                   temp.setJP_IDDOCTODEMANDANTE(result.getString("JP_IDDOCTODEMANDANTE")); 
                   temp.setJP_NUMDOCTODEMANDANTE(result.getString("JP_NUMDOCTODEMANDANTE")); 
                   temp.setJP_TIPOPROCESO(result.getInt("JP_TIPOPROCESO")); 
                   temp.setJP_FIN_TIPOPROCESO(result.getInt("JP_FIN_TIPOPROCESO")); 
                   temp.setJP_FIN_JTP_ID(result.getInt("JP_FIN_JTP_ID")); 
                   temp.setJP_FIN_NOTA(result.getString("JP_FIN_NOTA")); 
                   temp.setJP_FIN_NUMRAD_ENTE(result.getString("JP_FIN_NUMRAD_ENTE")); 
                   temp.setJP_DEMANDADO(result.getString("JP_DEMANDADO")); 

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }


}
