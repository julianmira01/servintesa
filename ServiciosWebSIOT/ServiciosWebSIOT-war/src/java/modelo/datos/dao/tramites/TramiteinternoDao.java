package modelo.datos.dao.tramites;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.tramites.Tramiteinterno;

import utilidades.Funciones;


/**
  * Tramiteinterno Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve Tramiteinterno object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class TramiteinternoDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public Tramiteinterno createValueObject() {
          return new Tramiteinterno();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public Tramiteinterno getObject(Connection conn, int IDTRAM_INTERNO) throws NotFoundException, SQLException {

          Tramiteinterno valueObject = createValueObject();
          valueObject.setIDTRAM_INTERNO(IDTRAM_INTERNO);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, Tramiteinterno valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM TRAMITEINTERNO WHERE (IDTRAM_INTERNO = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getIDTRAM_INTERNO()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM TRAMITEINTERNO ORDER BY DESCTRAMITE ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, Tramiteinterno valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO TRAMITEINTERNO ( IDTRAM_INTERNO, CODTRAMITE, DESCTRAMITE, "
               + "CONFVEHICULO_LIC, ESTADOTRAMITE, ID_TIPO_TRAMITE, "
               + "PAZYSALVO, TIPOVALIDACION, CANTIDADDIAS, "
               + "TIPODIAS, IDINFRACCION, TIPOVEHICULO, "
               + "IDTRAMITEVEHICULO, GENERALIC_TRANSITO, REQUIEREPROPIETARIO, "
               + "REPORTAMINISTERIO, REPORTARCERTTRADICION, PRIORIDAD, "
               + "DESCRIPREDUCIDA, TIENEBASEREQ, ID_COD_RUNT, "
               + "ID_TARAPLICADA_C, ID_TARAPLICADA_M, T_INICIAL) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);
               
               if (!Funciones.EnteroesNulo(valueObject.getIDTRAM_INTERNO()))
                   stmt.setInt(1, valueObject.getIDTRAM_INTERNO()); 
               else
                   stmt.setNull(1, Types.INTEGER);
               
               if (Funciones.contarCadena(valueObject.getCODTRAMITE(), 10))
                   stmt.setString(2, valueObject.getCODTRAMITE()); 
               else
                   stmt.setNull(2, Types.VARCHAR);
               
               if (Funciones.contarCadena(valueObject.getDESCTRAMITE(), 150))
                   stmt.setString(3, valueObject.getDESCTRAMITE()); 
               else
                   stmt.setNull(3, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getCONFVEHICULO_LIC(), 70))
                   stmt.setString(4, valueObject.getCONFVEHICULO_LIC()); 
               else
                   stmt.setNull(4, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getESTADOTRAMITE(), 2))
                   stmt.setString(5, valueObject.getESTADOTRAMITE()); 
               else
                   stmt.setNull(5, Types.VARCHAR);
              
               if (!Funciones.EnteroesNulo(valueObject.getID_TIPO_TRAMITE()))
                   stmt.setInt(6, valueObject.getID_TIPO_TRAMITE()); 
               else
                   stmt.setNull(6, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getPAZYSALVO(), 1))
                   stmt.setString(7, valueObject.getPAZYSALVO()); 
               else
                   stmt.setNull(7, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getTIPOVALIDACION(), 1))
                   stmt.setString(8, valueObject.getTIPOVALIDACION()); 
               else
                   stmt.setNull(8, Types.VARCHAR);
               
               if (!Funciones.EnteroesNulo(valueObject.getCANTIDADDIAS()))
                   stmt.setInt(9, valueObject.getCANTIDADDIAS()); 
               else
                   stmt.setNull(9, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getTIPODIAS(), 1))
                   stmt.setString(10, valueObject.getTIPODIAS()); 
               else
                   stmt.setNull(10, Types.VARCHAR);
               
               if (!Funciones.EnteroesNulo(valueObject.getIDINFRACCION()))
                   stmt.setInt(11, valueObject.getIDINFRACCION()); 
               else
                   stmt.setNull(11, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getTIPOVEHICULO(), 1))
                   stmt.setString(12, valueObject.getTIPOVEHICULO()); 
               else
                   stmt.setNull(12, Types.VARCHAR);
              
               if (!Funciones.EnteroesNulo(valueObject.getIDTRAMITEVEHICULO()))
                   stmt.setInt(13, valueObject.getIDTRAMITEVEHICULO()); 
               else
                   stmt.setNull(13, Types.INTEGER);
              
               if (Funciones.contarCadena(valueObject.getGENERALIC_TRANSITO(), 2))
                   stmt.setString(14, valueObject.getGENERALIC_TRANSITO()); 
               else
                   stmt.setNull(14, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getREQUIEREPROPIETARIO(), 2))
                   stmt.setString(15, valueObject.getREQUIEREPROPIETARIO()); 
               else
                   stmt.setNull(15, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getREPORTAMINISTERIO(), 2))
                   stmt.setString(16, valueObject.getREPORTAMINISTERIO()); 
               else
                   stmt.setNull(16, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getREPORTARCERTTRADICION(), 1))
                   stmt.setString(17, valueObject.getREPORTARCERTTRADICION()); 
               else
                   stmt.setNull(17, Types.VARCHAR);
              
               if (!Funciones.EnteroesNulo(valueObject.getPRIORIDAD()))
                   stmt.setInt(18, valueObject.getPRIORIDAD()); 
               else
                   stmt.setNull(18, Types.INTEGER);
              
               if(Funciones.contarCadena(valueObject.getDESCRIPREDUCIDA(), 20))
                   stmt.setString(19, valueObject.getDESCRIPREDUCIDA()); 
               else
                   stmt.setNull(19, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getTIENEBASEREQ(), 1))
                   stmt.setString(20, valueObject.getTIENEBASEREQ()); 
               else
                   stmt.setNull(20, Types.VARCHAR);
               
               if (!Funciones.EnteroesNulo(valueObject.getID_COD_RUNT()))
                   stmt.setInt(21, valueObject.getID_COD_RUNT()); 
               else
                   stmt.setNull(21, Types.INTEGER);
               
               if (Funciones.contarCadena(valueObject.getID_TARAPLICADA_C(), 5))
                   stmt.setString(22, valueObject.getID_TARAPLICADA_C()); 
               else
                   stmt.setNull(22, Types.VARCHAR);
              
               if (Funciones.contarCadena(valueObject.getID_TARAPLICADA_M(), 5))
                   stmt.setString(23, valueObject.getID_TARAPLICADA_M()); 
               else
                   stmt.setNull(23, Types.VARCHAR);
               
               if (Funciones.contarCadena(valueObject.getT_INICIAL(), 1))
                   stmt.setString(24, valueObject.getT_INICIAL()); 
               else
                   stmt.setNull(24, Types.VARCHAR);
              
               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, Tramiteinterno valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE TRAMITEINTERNO SET CODTRAMITE = ?, DESCTRAMITE = ?, CONFVEHICULO_LIC = ?, "
               + "ESTADOTRAMITE = ?, ID_TIPO_TRAMITE = ?, PAZYSALVO = ?, "
               + "TIPOVALIDACION = ?, CANTIDADDIAS = ?, TIPODIAS = ?, "
               + "IDINFRACCION = ?, TIPOVEHICULO = ?, IDTRAMITEVEHICULO = ?, "
               + "GENERALIC_TRANSITO = ?, REQUIEREPROPIETARIO = ?, REPORTAMINISTERIO = ?, "
               + "REPORTARCERTTRADICION = ?, PRIORIDAD = ?, DESCRIPREDUCIDA = ?, "
               + "TIENEBASEREQ = ?, ID_COD_RUNT = ?, ID_TARAPLICADA_C = ?, "
               + "ID_TARAPLICADA_M = ?, T_INICIAL = ? WHERE (IDTRAM_INTERNO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
            if (Funciones.contarCadena(valueObject.getCODTRAMITE(), 10))
                stmt.setString(1, valueObject.getCODTRAMITE()); 
            else
                stmt.setNull(1, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getDESCTRAMITE(), 150))
                stmt.setString(2, valueObject.getDESCTRAMITE()); 
            else
                stmt.setNull(2, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getCONFVEHICULO_LIC(), 70))
                stmt.setString(3, valueObject.getCONFVEHICULO_LIC()); 
            else
                stmt.setNull(3, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getESTADOTRAMITE(), 2))
                stmt.setString(4, valueObject.getESTADOTRAMITE()); 
            else
                stmt.setNull(4, Types.VARCHAR);
            
            if (!Funciones.EnteroesNulo(valueObject.getID_TIPO_TRAMITE()))
                stmt.setInt(5, valueObject.getID_TIPO_TRAMITE()); 
            else
                stmt.setNull(5, Types.INTEGER);
            
            if (Funciones.contarCadena(valueObject.getPAZYSALVO(), 1))
                stmt.setString(6, valueObject.getPAZYSALVO()); 
            else
                stmt.setNull(6, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getTIPOVALIDACION(), 1))
                stmt.setString(7, valueObject.getTIPOVALIDACION()); 
            else
                stmt.setNull(7, Types.VARCHAR);
            
            if (!Funciones.EnteroesNulo(valueObject.getCANTIDADDIAS()))
                stmt.setInt(8, valueObject.getCANTIDADDIAS()); 
            else
                stmt.setNull(8, Types.INTEGER);
            
            if (Funciones.contarCadena(valueObject.getTIPODIAS(), 1))
                stmt.setString(9, valueObject.getTIPODIAS()); 
            else
                stmt.setNull(9, Types.VARCHAR);
            
            if (!Funciones.EnteroesNulo(valueObject.getIDINFRACCION()))
                stmt.setInt(10, valueObject.getIDINFRACCION()); 
            else
                stmt.setNull(10, Types.INTEGER);
            
            if (Funciones.contarCadena(valueObject.getTIPOVEHICULO(), 1))
                stmt.setString(11, valueObject.getTIPOVEHICULO()); 
            else
                stmt.setNull(11, Types.VARCHAR);
            
            if (!Funciones.EnteroesNulo(valueObject.getIDTRAMITEVEHICULO()))
                stmt.setInt(12, valueObject.getIDTRAMITEVEHICULO()); 
            else
                stmt.setNull(12, Types.INTEGER);
            
            if (Funciones.contarCadena(valueObject.getGENERALIC_TRANSITO(), 2))
                stmt.setString(13, valueObject.getGENERALIC_TRANSITO()); 
            else
                stmt.setNull(13, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getREQUIEREPROPIETARIO(), 2))
                stmt.setString(14, valueObject.getREQUIEREPROPIETARIO()); 
            else
                stmt.setNull(14, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getREPORTAMINISTERIO(), 2))
                stmt.setString(15, valueObject.getREPORTAMINISTERIO()); 
            else
                stmt.setNull(15, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getREPORTARCERTTRADICION(), 1))
                stmt.setString(16, valueObject.getREPORTARCERTTRADICION()); 
            else
                stmt.setNull(16, Types.VARCHAR);
            
            if (!Funciones.EnteroesNulo(valueObject.getPRIORIDAD()))
                stmt.setInt(17, valueObject.getPRIORIDAD()); 
            else
                stmt.setNull(17, Types.INTEGER);
            
            if(Funciones.contarCadena(valueObject.getDESCRIPREDUCIDA(), 20))
                stmt.setString(18, valueObject.getDESCRIPREDUCIDA()); 
            else
                stmt.setNull(18, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getTIENEBASEREQ(), 1))
                stmt.setString(19, valueObject.getTIENEBASEREQ()); 
            else
                stmt.setNull(19, Types.VARCHAR);
            
            if (!Funciones.EnteroesNulo(valueObject.getID_COD_RUNT()))
                stmt.setInt(20, valueObject.getID_COD_RUNT()); 
            else
                stmt.setNull(20, Types.INTEGER);
            
            if (Funciones.contarCadena(valueObject.getID_TARAPLICADA_C(), 5))
                stmt.setString(21, valueObject.getID_TARAPLICADA_C()); 
            else
                stmt.setNull(21, Types.VARCHAR);
            
            if (Funciones.contarCadena(valueObject.getID_TARAPLICADA_M(), 5))
                stmt.setString(22, valueObject.getID_TARAPLICADA_M()); 
            else
                stmt.setNull(22, Types.VARCHAR);
              
            if (Funciones.contarCadena(valueObject.getT_INICIAL(), 1))
                stmt.setString(23, valueObject.getT_INICIAL()); 
            else
                stmt.setNull(23, Types.VARCHAR);

           if (!Funciones.EnteroesNulo(valueObject.getIDTRAM_INTERNO()))
               stmt.setInt(24, valueObject.getIDTRAM_INTERNO()); 
           else
               stmt.setNull(24, Types.INTEGER);

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, Tramiteinterno valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM TRAMITEINTERNO WHERE (IDTRAM_INTERNO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getIDTRAM_INTERNO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM TRAMITEINTERNO";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM TRAMITEINTERNO";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
   public List searchMatching(Connection conn, Tramiteinterno valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM TRAMITEINTERNO WHERE 1=1 ");

          if (valueObject.getIDTRAM_INTERNO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDTRAM_INTERNO = ").append(valueObject.getIDTRAM_INTERNO()).append(" ");
          }

          if (valueObject.getCODTRAMITE() != null) {
              if (first) { first = false; }
              sql.append("AND CODTRAMITE = '").append(valueObject.getCODTRAMITE()).append("' ");
          }

          if (valueObject.getDESCTRAMITE() != null) {
              if (first) { first = false; }
              sql.append("AND DESCTRAMITE = '").append(valueObject.getDESCTRAMITE()).append("' ");
          }

          if (valueObject.getCONFVEHICULO_LIC() != null) {
              if (first) { first = false; }
              sql.append("AND CONFVEHICULO_LIC = '").append(valueObject.getCONFVEHICULO_LIC()).append("' ");
          }

          if (valueObject.getESTADOTRAMITE() != null) {
              if (first) { first = false; }
              sql.append("AND ESTADOTRAMITE = '").append(valueObject.getESTADOTRAMITE()).append("' ");
          }

          if (valueObject.getID_TIPO_TRAMITE() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_TIPO_TRAMITE = ").append(valueObject.getID_TIPO_TRAMITE()).append(" ");
          }

          if (valueObject.getPAZYSALVO() != null) {
              if (first) { first = false; }
              sql.append("AND PAZYSALVO = '").append(valueObject.getPAZYSALVO()).append("' ");
          }

          if (valueObject.getTIPOVALIDACION() != null) {
              if (first) { first = false; }
              sql.append("AND TIPOVALIDACION = '").append(valueObject.getTIPOVALIDACION()).append("' ");
          }

          if (valueObject.getCANTIDADDIAS() != 0) {
              if (first) { first = false; }
              sql.append("AND CANTIDADDIAS = ").append(valueObject.getCANTIDADDIAS()).append(" ");
          }

          if (valueObject.getTIPODIAS() != null) {
              if (first) { first = false; }
              sql.append("AND TIPODIAS = '").append(valueObject.getTIPODIAS()).append("' ");
          }

          if (valueObject.getIDINFRACCION() != 0) {
              if (first) { first = false; }
              sql.append("AND IDINFRACCION = ").append(valueObject.getIDINFRACCION()).append(" ");
          }

          if (valueObject.getTIPOVEHICULO() != null) {
              if (first) { first = false; }
              sql.append("AND TIPOVEHICULO = '").append(valueObject.getTIPOVEHICULO()).append("' ");
          }

          if (valueObject.getIDTRAMITEVEHICULO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDTRAMITEVEHICULO = ").append(valueObject.getIDTRAMITEVEHICULO()).append(" ");
          }

          if (valueObject.getGENERALIC_TRANSITO() != null) {
              if (first) { first = false; }
              sql.append("AND GENERALIC_TRANSITO = '").append(valueObject.getGENERALIC_TRANSITO()).append("' ");
          }

          if (valueObject.getREQUIEREPROPIETARIO() != null) {
              if (first) { first = false; }
              sql.append("AND REQUIEREPROPIETARIO = '").append(valueObject.getREQUIEREPROPIETARIO()).append("' ");
          }

          if (valueObject.getREPORTAMINISTERIO() != null) {
              if (first) { first = false; }
              sql.append("AND REPORTAMINISTERIO = '").append(valueObject.getREPORTAMINISTERIO()).append("' ");
          }

          if (valueObject.getREPORTARCERTTRADICION() != null) {
              if (first) { first = false; }
              sql.append("AND REPORTARCERTTRADICION = '").append(valueObject.getREPORTARCERTTRADICION()).append("' ");
          }

          if (valueObject.getPRIORIDAD() != 0) {
              if (first) { first = false; }
              sql.append("AND PRIORIDAD = ").append(valueObject.getPRIORIDAD()).append(" ");
          }

          if (valueObject.getDESCRIPREDUCIDA() != null) {
              if (first) { first = false; }
              sql.append("AND DESCRIPREDUCIDA = '").append(valueObject.getDESCRIPREDUCIDA()).append("' ");
          }

          if (valueObject.getTIENEBASEREQ() != null) {
              if (first) { first = false; }
              sql.append("AND TIENEBASEREQ = '").append(valueObject.getTIENEBASEREQ()).append("' ");
          }

          if (valueObject.getID_COD_RUNT() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_COD_RUNT = ").append(valueObject.getID_COD_RUNT()).append(" ");
          }

          if (valueObject.getID_TARAPLICADA_C() != null) {
              if (first) { first = false; }
              sql.append("AND ID_TARAPLICADA_C = '").append(valueObject.getID_TARAPLICADA_C()).append("' ");
          }

          if (valueObject.getID_TARAPLICADA_M() != null) {
              if (first) { first = false; }
              sql.append("AND ID_TARAPLICADA_M = '").append(valueObject.getID_TARAPLICADA_M()).append("' ");
          }
          
          if (valueObject.getT_INICIAL() != null) {
              if (first) { first = false; }
              sql.append("AND T_INICIAL = '").append(valueObject.getT_INICIAL()).append("' ");
          }


          sql.append("ORDER BY IDTRAM_INTERNO ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    public List searchMatchingSinRemolques(Connection conn, Tramiteinterno valueObject) throws SQLException {

               List searchResults;

               boolean first = true;
               StringBuffer sql = new StringBuffer("SELECT * FROM TRAMITEINTERNO WHERE 1=1 ");

               if (valueObject.getIDTRAM_INTERNO() != 0) {
                   if (first) { first = false; }
                   sql.append("AND IDTRAM_INTERNO = ").append(valueObject.getIDTRAM_INTERNO()).append(" ");
               }

               if (valueObject.getCODTRAMITE() != null) {
                   if (first) { first = false; }
                   sql.append("AND CODTRAMITE = '").append(valueObject.getCODTRAMITE()).append("' ");
               }

               if (valueObject.getDESCTRAMITE() != null) {
                   if (first) { first = false; }
                   sql.append("AND DESCTRAMITE = '").append(valueObject.getDESCTRAMITE()).append("' ");
               }

               if (valueObject.getCONFVEHICULO_LIC() != null) {
                   if (first) { first = false; }
                   sql.append("AND CONFVEHICULO_LIC = '").append(valueObject.getCONFVEHICULO_LIC()).append("' ");
               }

               if (valueObject.getESTADOTRAMITE() != null) {
                   if (first) { first = false; }
                   sql.append("AND ESTADOTRAMITE = '").append(valueObject.getESTADOTRAMITE()).append("' ");
               }

               /* if (valueObject.getID_TIPO_TRAMITE() != 0) {
                   if (first) { first = false; } */
                   sql.append("AND ID_TIPO_TRAMITE NOT IN (3) ");
               /* } */

               if (valueObject.getPAZYSALVO() != null) {
                   if (first) { first = false; }
                   sql.append("AND PAZYSALVO = '").append(valueObject.getPAZYSALVO()).append("' ");
               }

               if (valueObject.getTIPOVALIDACION() != null) {
                   if (first) { first = false; }
                   sql.append("AND TIPOVALIDACION = '").append(valueObject.getTIPOVALIDACION()).append("' ");
               }

               if (valueObject.getCANTIDADDIAS() != 0) {
                   if (first) { first = false; }
                   sql.append("AND CANTIDADDIAS = ").append(valueObject.getCANTIDADDIAS()).append(" ");
               }

               if (valueObject.getTIPODIAS() != null) {
                   if (first) { first = false; }
                   sql.append("AND TIPODIAS = '").append(valueObject.getTIPODIAS()).append("' ");
               }

               if (valueObject.getIDINFRACCION() != 0) {
                   if (first) { first = false; }
                   sql.append("AND IDINFRACCION = ").append(valueObject.getIDINFRACCION()).append(" ");
               }

               if (valueObject.getTIPOVEHICULO() != null) {
                   if (first) { first = false; }
                   sql.append("AND TIPOVEHICULO = '").append(valueObject.getTIPOVEHICULO()).append("' ");
               }

               if (valueObject.getIDTRAMITEVEHICULO() != 0) {
                   if (first) { first = false; }
                   sql.append("AND IDTRAMITEVEHICULO = ").append(valueObject.getIDTRAMITEVEHICULO()).append(" ");
               }

               if (valueObject.getGENERALIC_TRANSITO() != null) {
                   if (first) { first = false; }
                   sql.append("AND GENERALIC_TRANSITO = '").append(valueObject.getGENERALIC_TRANSITO()).append("' ");
               }

               if (valueObject.getREQUIEREPROPIETARIO() != null) {
                   if (first) { first = false; }
                   sql.append("AND REQUIEREPROPIETARIO = '").append(valueObject.getREQUIEREPROPIETARIO()).append("' ");
               }

               if (valueObject.getREPORTAMINISTERIO() != null) {
                   if (first) { first = false; }
                   sql.append("AND REPORTAMINISTERIO = '").append(valueObject.getREPORTAMINISTERIO()).append("' ");
               }

               if (valueObject.getREPORTARCERTTRADICION() != null) {
                   if (first) { first = false; }
                   sql.append("AND REPORTARCERTTRADICION = '").append(valueObject.getREPORTARCERTTRADICION()).append("' ");
               }

               if (valueObject.getPRIORIDAD() != 0) {
                   if (first) { first = false; }
                   sql.append("AND PRIORIDAD = ").append(valueObject.getPRIORIDAD()).append(" ");
               }

               if (valueObject.getDESCRIPREDUCIDA() != null) {
                   if (first) { first = false; }
                   sql.append("AND DESCRIPREDUCIDA = '").append(valueObject.getDESCRIPREDUCIDA()).append("' ");
               }

               if (valueObject.getTIENEBASEREQ() != null) {
                   if (first) { first = false; }
                   sql.append("AND TIENEBASEREQ = '").append(valueObject.getTIENEBASEREQ()).append("' ");
               }

               if (valueObject.getID_COD_RUNT() != 0) {
                   if (first) { first = false; }
                   sql.append("AND ID_COD_RUNT = ").append(valueObject.getID_COD_RUNT()).append(" ");
               }

               if (valueObject.getID_TARAPLICADA_C() != null) {
                   if (first) { first = false; }
                   sql.append("AND ID_TARAPLICADA_C = '").append(valueObject.getID_TARAPLICADA_C()).append("' ");
               }

               if (valueObject.getID_TARAPLICADA_M() != null) {
                   if (first) { first = false; }
                   sql.append("AND ID_TARAPLICADA_M = '").append(valueObject.getID_TARAPLICADA_M()).append("' ");
               }
               
               if (valueObject.getT_INICIAL() != null) {
                   if (first) { first = false; }
                   sql.append("AND T_INICIAL = '").append(valueObject.getT_INICIAL()).append("' ");
               }


               sql.append("ORDER BY IDTRAM_INTERNO ASC ");

               // Prevent accidential full table results.
               // Use loadAll if all rows must be returned.
               if (first)
                    searchResults = new ArrayList();
               else
                    searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

               return searchResults;
         }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, Tramiteinterno valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setIDTRAM_INTERNO(result.getInt("IDTRAM_INTERNO")); 
                   valueObject.setCODTRAMITE(result.getString("CODTRAMITE")); 
                   valueObject.setDESCTRAMITE(result.getString("DESCTRAMITE")); 
                   valueObject.setCONFVEHICULO_LIC(result.getString("CONFVEHICULO_LIC")); 
                   valueObject.setESTADOTRAMITE(result.getString("ESTADOTRAMITE")); 
                   valueObject.setID_TIPO_TRAMITE(result.getInt("ID_TIPO_TRAMITE")); 
                   valueObject.setPAZYSALVO(result.getString("PAZYSALVO")); 
                   valueObject.setTIPOVALIDACION(result.getString("TIPOVALIDACION")); 
                   valueObject.setCANTIDADDIAS(result.getInt("CANTIDADDIAS")); 
                   valueObject.setTIPODIAS(result.getString("TIPODIAS")); 
                   valueObject.setIDINFRACCION(result.getInt("IDINFRACCION")); 
                   valueObject.setTIPOVEHICULO(result.getString("TIPOVEHICULO")); 
                   valueObject.setIDTRAMITEVEHICULO(result.getInt("IDTRAMITEVEHICULO")); 
                   valueObject.setGENERALIC_TRANSITO(result.getString("GENERALIC_TRANSITO")); 
                   valueObject.setREQUIEREPROPIETARIO(result.getString("REQUIEREPROPIETARIO")); 
                   valueObject.setREPORTAMINISTERIO(result.getString("REPORTAMINISTERIO")); 
                   valueObject.setREPORTARCERTTRADICION(result.getString("REPORTARCERTTRADICION")); 
                   valueObject.setPRIORIDAD(result.getInt("PRIORIDAD")); 
                   valueObject.setDESCRIPREDUCIDA(result.getString("DESCRIPREDUCIDA")); 
                   valueObject.setTIENEBASEREQ(result.getString("TIENEBASEREQ")); 
                   valueObject.setID_COD_RUNT(result.getInt("ID_COD_RUNT")); 
                   valueObject.setID_TARAPLICADA_C(result.getString("ID_TARAPLICADA_C")); 
                   valueObject.setID_TARAPLICADA_M(result.getString("ID_TARAPLICADA_M")); 
                   valueObject.setT_INICIAL(result.getString("T_INICIAL"));

              } else {
                    //System.out.println("Tramiteinterno Object Not Found!");
                    throw new NotFoundException("Tramiteinterno Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   Tramiteinterno temp = createValueObject();

                   temp.setIDTRAM_INTERNO(result.getInt("IDTRAM_INTERNO")); 
                   temp.setCODTRAMITE(result.getString("CODTRAMITE")); 
                   temp.setDESCTRAMITE(result.getString("DESCTRAMITE")); 
                   temp.setCONFVEHICULO_LIC(result.getString("CONFVEHICULO_LIC")); 
                   temp.setESTADOTRAMITE(result.getString("ESTADOTRAMITE")); 
                   temp.setID_TIPO_TRAMITE(result.getInt("ID_TIPO_TRAMITE")); 
                   temp.setPAZYSALVO(result.getString("PAZYSALVO")); 
                   temp.setTIPOVALIDACION(result.getString("TIPOVALIDACION")); 
                   temp.setCANTIDADDIAS(result.getInt("CANTIDADDIAS")); 
                   temp.setTIPODIAS(result.getString("TIPODIAS")); 
                   temp.setIDINFRACCION(result.getInt("IDINFRACCION")); 
                   temp.setTIPOVEHICULO(result.getString("TIPOVEHICULO")); 
                   temp.setIDTRAMITEVEHICULO(result.getInt("IDTRAMITEVEHICULO")); 
                   temp.setGENERALIC_TRANSITO(result.getString("GENERALIC_TRANSITO")); 
                   temp.setREQUIEREPROPIETARIO(result.getString("REQUIEREPROPIETARIO")); 
                   temp.setREPORTAMINISTERIO(result.getString("REPORTAMINISTERIO")); 
                   temp.setREPORTARCERTTRADICION(result.getString("REPORTARCERTTRADICION")); 
                   temp.setPRIORIDAD(result.getInt("PRIORIDAD")); 
                   temp.setDESCRIPREDUCIDA(result.getString("DESCRIPREDUCIDA")); 
                   temp.setTIENEBASEREQ(result.getString("TIENEBASEREQ")); 
                   temp.setID_COD_RUNT(result.getInt("ID_COD_RUNT")); 
                   temp.setID_TARAPLICADA_C(result.getString("ID_TARAPLICADA_C")); 
                   temp.setID_TARAPLICADA_M(result.getString("ID_TARAPLICADA_M")); 
                   temp.setT_INICIAL(result.getString("T_INICIAL"));
                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }


}
