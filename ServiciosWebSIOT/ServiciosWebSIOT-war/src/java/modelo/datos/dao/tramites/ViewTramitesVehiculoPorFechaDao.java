package modelo.datos.dao.tramites;

import java.sql.*;
import java.util.*;
import java.math.*;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.tramites.ViewTramitesVehiculoPorFecha;

import utilidades.Funciones;


/**
  * ViewTramitesVehiculoPorFecha Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve ViewTramitesVehiculoPorFecha object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewTramitesVehiculoPorFechaDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public ViewTramitesVehiculoPorFecha createValueObject() {
          return new ViewTramitesVehiculoPorFecha();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public ViewTramitesVehiculoPorFecha getObject(Connection conn, int id_tramiteinterno) throws NotFoundException, SQLException {

          ViewTramitesVehiculoPorFecha valueObject = createValueObject();
          valueObject.setId_tramiteinterno(id_tramiteinterno);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, ViewTramitesVehiculoPorFecha valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM VIEW_TRAMITESVEHICULOPORFECHA WHERE (id_tramiteinterno = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getId_tramiteinterno()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM VIEW_TRAMITESVEHICULOPORFECHA ORDER BY id_tramiteinterno ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, ViewTramitesVehiculoPorFecha valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO VIEW_TRAMITESVEHICULOPORFECHA ( id_tramiteinterno, capacidadton, placa, "
               + "anulada, fecha, id_lictransito, "
               + "id_tramiteveh, nroconsignacion, nit, "
               + "id_cvehiculo, id_vehiculo, id_servicio, "
               + "id_color, id_combustible, numconsignacionvehiculo, "
               + "descripcion, id_modalidadservicio, id_tcarroceria, "
               + "gen_idtransito, capacidad, reportaministerio, "
               + "numrecibo_liquidacion, fecha_exp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);

               stmt.setInt(1, valueObject.getId_tramiteinterno()); 
               stmt.setString(2, valueObject.getCapacidadton()); 
               stmt.setString(3, valueObject.getPlaca()); 
               stmt.setString(4, valueObject.getAnulada()); 
               
            if (Funciones.esFecha(valueObject.getFecha()))
                stmt.setDate(5, Funciones.convFechaSSQL(valueObject.getFecha()));
            else
                stmt.setNull(5, Types.DATE);
              
               stmt.setString(6, valueObject.getId_lictransito()); 
               stmt.setInt(7, valueObject.getId_tramiteveh()); 
               stmt.setInt(8, valueObject.getNroconsignacion()); 
               stmt.setString(9, valueObject.getNit()); 
               stmt.setInt(10, valueObject.getId_cvehiculo()); 
               stmt.setInt(11, valueObject.getId_vehiculo()); 
               stmt.setInt(12, valueObject.getId_servicio()); 
               stmt.setInt(13, valueObject.getId_color()); 
               stmt.setInt(14, valueObject.getId_combustible()); 
               stmt.setInt(15, valueObject.getNumconsignacionvehiculo()); 
               stmt.setString(16, valueObject.getDescripcion()); 
               stmt.setInt(17, valueObject.getId_modalidadservicio()); 
               stmt.setInt(18, valueObject.getId_tcarroceria()); 
               stmt.setInt(19, valueObject.getGen_idtransito()); 
               stmt.setString(20, valueObject.getCapacidad()); 
               stmt.setString(21, valueObject.getReportaministerio()); 
               stmt.setDouble(22, valueObject.getNumrecibo_liquidacion()); 
               
            if (Funciones.esFecha(valueObject.getFecha_exp()))
                stmt.setDate(23, Funciones.convFechaSSQL(valueObject.getFecha_exp()));
            else
                stmt.setNull(23, Types.DATE);

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, ViewTramitesVehiculoPorFecha valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE VIEW_TRAMITESVEHICULOPORFECHA SET capacidadton = ?, placa = ?, anulada = ?, "
               + "fecha = ?, id_lictransito = ?, id_tramiteveh = ?, "
               + "nroconsignacion = ?, nit = ?, id_cvehiculo = ?, "
               + "id_vehiculo = ?, id_servicio = ?, id_color = ?, "
               + "id_combustible = ?, numconsignacionvehiculo = ?, descripcion = ?, "
               + "id_modalidadservicio = ?, id_tcarroceria = ?, gen_idtransito = ?, "
               + "capacidad = ?, reportaministerio = ?, numrecibo_liquidacion = ?, "
               + "fecha_exp = ? WHERE (id_tramiteinterno = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setString(1, valueObject.getCapacidadton()); 
              stmt.setString(2, valueObject.getPlaca()); 
              stmt.setString(3, valueObject.getAnulada()); 
              
            if (Funciones.esFecha(valueObject.getFecha()))
                stmt.setDate(4, Funciones.convFechaSSQL(valueObject.getFecha()));
            else
                stmt.setNull(4, Types.DATE);
              
              stmt.setString(5, valueObject.getId_lictransito()); 
              stmt.setInt(6, valueObject.getId_tramiteveh()); 
              stmt.setInt(7, valueObject.getNroconsignacion()); 
              stmt.setString(8, valueObject.getNit()); 
              stmt.setInt(9, valueObject.getId_cvehiculo()); 
              stmt.setInt(10, valueObject.getId_vehiculo()); 
              stmt.setInt(11, valueObject.getId_servicio()); 
              stmt.setInt(12, valueObject.getId_color()); 
              stmt.setInt(13, valueObject.getId_combustible()); 
              stmt.setInt(14, valueObject.getNumconsignacionvehiculo()); 
              stmt.setString(15, valueObject.getDescripcion()); 
              stmt.setInt(16, valueObject.getId_modalidadservicio()); 
              stmt.setInt(17, valueObject.getId_tcarroceria()); 
              stmt.setInt(18, valueObject.getGen_idtransito()); 
              stmt.setString(19, valueObject.getCapacidad()); 
              stmt.setString(20, valueObject.getReportaministerio()); 
              stmt.setDouble(21, valueObject.getNumrecibo_liquidacion()); 
              
            if (Funciones.esFecha(valueObject.getFecha_exp()))
                stmt.setDate(22, Funciones.convFechaSSQL(valueObject.getFecha_exp()));
            else
                stmt.setNull(22, Types.DATE);

              stmt.setInt(23, valueObject.getId_tramiteinterno()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, ViewTramitesVehiculoPorFecha valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM VIEW_TRAMITESVEHICULOPORFECHA WHERE (id_tramiteinterno = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getId_tramiteinterno()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM VIEW_TRAMITESVEHICULOPORFECHA";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM VIEW_TRAMITESVEHICULOPORFECHA";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, ViewTramitesVehiculoPorFecha valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM VIEW_TRAMITESVEHICULOPORFECHA WHERE 1=1 ");

          if (valueObject.getId_tramiteinterno() != 0) {
              if (first) { first = false; }
              sql.append("AND id_tramiteinterno = ").append(valueObject.getId_tramiteinterno()).append(" ");
          }

          if (valueObject.getCapacidadton() != null) {
              if (first) { first = false; }
              sql.append("AND capacidadton LIKE '").append(valueObject.getCapacidadton()).append("%' ");
          }

          if (valueObject.getPlaca() != null) {
              if (first) { first = false; }
              sql.append("AND placa LIKE '").append(valueObject.getPlaca()).append("%' ");
          }

          if (valueObject.getAnulada() != null) {
              if (first) { first = false; }
              sql.append("AND anulada LIKE '").append(valueObject.getAnulada()).append("%' ");
          }

          if (valueObject.getFecha() != null) {
              if (first) { first = false; }
              sql.append("AND fecha LIKE '").append(valueObject.getFecha()).append("%' ");
          }

          if (valueObject.getId_lictransito() != null) {
              if (first) { first = false; }
              sql.append("AND id_lictransito LIKE '").append(valueObject.getId_lictransito()).append("%' ");
          }

          if (valueObject.getId_tramiteveh() != 0) {
              if (first) { first = false; }
              sql.append("AND id_tramiteveh = ").append(valueObject.getId_tramiteveh()).append(" ");
          }

          if (valueObject.getNroconsignacion() != 0) {
              if (first) { first = false; }
              sql.append("AND nroconsignacion = ").append(valueObject.getNroconsignacion()).append(" ");
          }

          if (valueObject.getNit() != null) {
              if (first) { first = false; }
              sql.append("AND nit LIKE '").append(valueObject.getNit()).append("%' ");
          }

          if (valueObject.getId_cvehiculo() != 0) {
              if (first) { first = false; }
              sql.append("AND id_cvehiculo = ").append(valueObject.getId_cvehiculo()).append(" ");
          }

          if (valueObject.getId_vehiculo() != 0) {
              if (first) { first = false; }
              sql.append("AND id_vehiculo = ").append(valueObject.getId_vehiculo()).append(" ");
          }

          if (valueObject.getId_servicio() != 0) {
              if (first) { first = false; }
              sql.append("AND id_servicio = ").append(valueObject.getId_servicio()).append(" ");
          }

          if (valueObject.getId_color() != 0) {
              if (first) { first = false; }
              sql.append("AND id_color = ").append(valueObject.getId_color()).append(" ");
          }

          if (valueObject.getId_combustible() != 0) {
              if (first) { first = false; }
              sql.append("AND id_combustible = ").append(valueObject.getId_combustible()).append(" ");
          }

          if (valueObject.getNumconsignacionvehiculo() != 0) {
              if (first) { first = false; }
              sql.append("AND numconsignacionvehiculo = ").append(valueObject.getNumconsignacionvehiculo()).append(" ");
          }

          if (valueObject.getDescripcion() != null) {
              if (first) { first = false; }
              sql.append("AND descripcion LIKE '").append(valueObject.getDescripcion()).append("%' ");
          }

          if (valueObject.getId_modalidadservicio() != 0) {
              if (first) { first = false; }
              sql.append("AND id_modalidadservicio = ").append(valueObject.getId_modalidadservicio()).append(" ");
          }

          if (valueObject.getId_tcarroceria() != 0) {
              if (first) { first = false; }
              sql.append("AND id_tcarroceria = ").append(valueObject.getId_tcarroceria()).append(" ");
          }

          if (valueObject.getGen_idtransito() != 0) {
              if (first) { first = false; }
              sql.append("AND gen_idtransito = ").append(valueObject.getGen_idtransito()).append(" ");
          }

          if (valueObject.getCapacidad() != null) {
              if (first) { first = false; }
              sql.append("AND capacidad LIKE '").append(valueObject.getCapacidad()).append("%' ");
          }

          if (valueObject.getReportaministerio() != null) {
              if (first) { first = false; }
              sql.append("AND reportaministerio LIKE '").append(valueObject.getReportaministerio()).append("%' ");
          }

          if (valueObject.getNumrecibo_liquidacion() != 0) {
              if (first) { first = false; }
              sql.append("AND numrecibo_liquidacion = ").append(valueObject.getNumrecibo_liquidacion()).append(" ");
          }

          if (valueObject.getFecha_exp() != null) {
              if (first) { first = false; }
              sql.append("AND fecha_exp LIKE '").append(valueObject.getFecha_exp()).append("%' ");
          }


          sql.append("ORDER BY id_tramiteinterno ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, ViewTramitesVehiculoPorFecha valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setId_tramiteinterno(result.getInt("id_tramiteinterno")); 
                   valueObject.setCapacidadton(result.getString("capacidadton")); 
                   valueObject.setPlaca(result.getString("placa")); 
                   valueObject.setAnulada(result.getString("anulada")); 
                   valueObject.setFecha(result.getString("fecha")); 
                   valueObject.setId_lictransito(result.getString("id_lictransito")); 
                   valueObject.setId_tramiteveh(result.getInt("id_tramiteveh")); 
                   valueObject.setNroconsignacion(result.getInt("nroconsignacion")); 
                   valueObject.setNit(result.getString("nit")); 
                   valueObject.setId_cvehiculo(result.getInt("id_cvehiculo")); 
                   valueObject.setId_vehiculo(result.getInt("id_vehiculo")); 
                   valueObject.setId_servicio(result.getInt("id_servicio")); 
                   valueObject.setId_color(result.getInt("id_color")); 
                   valueObject.setId_combustible(result.getInt("id_combustible")); 
                   valueObject.setNumconsignacionvehiculo(result.getInt("numconsignacionvehiculo")); 
                   valueObject.setDescripcion(result.getString("descripcion")); 
                   valueObject.setId_modalidadservicio(result.getInt("id_modalidadservicio")); 
                   valueObject.setId_tcarroceria(result.getInt("id_tcarroceria")); 
                   valueObject.setGen_idtransito(result.getInt("gen_idtransito")); 
                   valueObject.setCapacidad(result.getString("capacidad")); 
                   valueObject.setReportaministerio(result.getString("reportaministerio")); 
                   valueObject.setNumrecibo_liquidacion(result.getDouble("numrecibo_liquidacion")); 
                   valueObject.setFecha_exp(result.getString("fecha_exp")); 

              } else {
                    //System.out.println("ViewTramitesVehiculoPorFecha Object Not Found!");
                    throw new NotFoundException("ViewTramitesVehiculoPorFecha Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   ViewTramitesVehiculoPorFecha temp = createValueObject();

                   temp.setId_tramiteinterno(result.getInt("id_tramiteinterno")); 
                   temp.setCapacidadton(result.getString("capacidadton")); 
                   temp.setPlaca(result.getString("placa")); 
                   temp.setAnulada(result.getString("anulada")); 
                   temp.setFecha(result.getString("fecha")); 
                   temp.setId_lictransito(result.getString("id_lictransito")); 
                   temp.setId_tramiteveh(result.getInt("id_tramiteveh")); 
                   temp.setNroconsignacion(result.getInt("nroconsignacion")); 
                   temp.setNit(result.getString("nit")); 
                   temp.setId_cvehiculo(result.getInt("id_cvehiculo")); 
                   temp.setId_vehiculo(result.getInt("id_vehiculo")); 
                   temp.setId_servicio(result.getInt("id_servicio")); 
                   temp.setId_color(result.getInt("id_color")); 
                   temp.setId_combustible(result.getInt("id_combustible")); 
                   temp.setNumconsignacionvehiculo(result.getInt("numconsignacionvehiculo")); 
                   temp.setDescripcion(result.getString("descripcion")); 
                   temp.setId_modalidadservicio(result.getInt("id_modalidadservicio")); 
                   temp.setId_tcarroceria(result.getInt("id_tcarroceria")); 
                   temp.setGen_idtransito(result.getInt("gen_idtransito")); 
                   temp.setCapacidad(result.getString("capacidad")); 
                   temp.setReportaministerio(result.getString("reportaministerio")); 
                   temp.setNumrecibo_liquidacion(result.getDouble("numrecibo_liquidacion")); 
                   temp.setFecha_exp(result.getString("fecha_exp")); 

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }
    
  public List getTramitesPorFechaPlaca(Connection conn, ViewTramitesVehiculoPorFecha valueObject, String fecha1, String fecha2) throws SQLException {

        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM VIEW_TRAMITESVEHICULOPORFECHA WHERE 1=1 ");

        if (valueObject.getPlaca() != null) {
            if (first) { first = false; }
            sql.append("AND (placa = '").append(valueObject.getPlaca()).append("') ");
        }

        if ((fecha1.length() > 0) && (fecha2.length() > 0)) {
            if (first) { first = false; }
            sql.append("AND (fecha_exp between '").append(fecha1).append("' AND '").append(fecha2).append("' ) ");
        }
        
        if (valueObject.getId_tramiteveh() > 0) {
            if (first) { first = false; }
            sql.append("AND ID_TRAMITEVEH IN (2,3) ");
        }

        sql.append("ORDER BY id_tramiteinterno ASC ");
        
        System.out.println(sql.toString());

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
             searchResults = new ArrayList();
        else
             searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));
        return searchResults;
  }


}