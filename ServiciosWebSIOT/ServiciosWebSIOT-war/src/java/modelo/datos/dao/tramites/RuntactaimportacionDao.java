package modelo.datos.dao.tramites;

import java.sql.*;
import java.util.*;
import java.math.*;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.tramites.Runtactaimportacion;

import utilidades.Funciones;


/**
  * Runtactaimportacion Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve Runtactaimportacion object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RuntactaimportacionDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public Runtactaimportacion createValueObject() {
          return new Runtactaimportacion();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public Runtactaimportacion getObject(Connection conn, int ID_RUNTACTAMANIFIMPORT) throws NotFoundException, SQLException {

          Runtactaimportacion valueObject = createValueObject();
          valueObject.setID_RUNTACTAMANIFIMPORT(ID_RUNTACTAMANIFIMPORT);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, Runtactaimportacion valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM RUNTACTAIMPORTACION WHERE (ID_RUNTACTAMANIFIMPORT = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getID_RUNTACTAMANIFIMPORT()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM RUNTACTAIMPORTACION ORDER BY ID_RUNTACTAMANIFIMPORT ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, Runtactaimportacion valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO RUNTACTAIMPORTACION ( ID_RUNTACTAMANIFIMPORT, NUMACTAMANIFIMPORTACION, FECHAMANIFIESTO, "
               + "FECHALEVANTE, NUMEROBULTOS, NUMEROCUOTAS, "
               + "NUMSUBPARTARANCE, NUMEROLEVANTE, PAISORIGEN, "
               + "ESTADO, NUMDECLARAVIGENTE, MODALIDADDECLARAIMP, "
               + "TIPODECLARACION, TIPOIMPORTACION, ID_VEHICULO, "
               + "ID_IMPORTADOR, ID_DOCTO, DOCIMP, "
               + "ID_TIPO_REGISTRO, ID_TIPO_AUTOMOTOR, CARGADO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);

              /* valueObject.setID_RUNTACTAMANIFIMPORT(getIdFB(conn));
               if (!Funciones.EnteroesNulo(valueObject.getID_RUNTACTAMANIFIMPORT()) )
                   stmt.setInt(1, valueObject.getID_RUNTACTAMANIFIMPORT()); 
               else*/
                   stmt.setNull(1, Types.INTEGER);
               if (Funciones.contarCadena(valueObject.getNUMACTAMANIFIMPORTACION(), 20))
                   stmt.setString(2, valueObject.getNUMACTAMANIFIMPORTACION()); 
               else
                   stmt.setNull(2,Types.VARCHAR);
               if (Funciones.esFecha(valueObject.getFECHAMANIFIESTO()))
                   stmt.setDate(3, Funciones.convFechaSSQL(valueObject.getFECHAMANIFIESTO()));
               else
                   stmt.setNull(3, Types.VARCHAR);
               if (Funciones.esFecha(valueObject.getFECHALEVANTE()))
                   stmt.setDate(4, Funciones.convFechaSSQL(valueObject.getFECHALEVANTE()));
               else
                   stmt.setNull(4, Types.VARCHAR);
               if (!Funciones.EnteroesNulo(valueObject.getNUMEROBULTOS()))
                   stmt.setInt(5, valueObject.getNUMEROBULTOS()); 
               else
                   stmt.setNull(5, Types.INTEGER);
               if (!Funciones.EnteroesNulo(valueObject.getNUMEROCUOTAS()))
                   stmt.setInt(6, valueObject.getNUMEROCUOTAS()); 
               else
                   stmt.setNull(6, Types.INTEGER);
               if (Funciones.contarCadena(valueObject.getNUMSUBPARTARANCE(), 20))
                   stmt.setString(7, valueObject.getNUMSUBPARTARANCE()); 
               else
                   stmt.setNull(7, Types.VARCHAR);
               if (Funciones.contarCadena(valueObject.getNUMEROLEVANTE(), 20))
                   stmt.setString(8, valueObject.getNUMEROLEVANTE());
               else
                   stmt.setNull(8, Types.VARCHAR);
               if (!Funciones.EnteroesNulo(valueObject.getPAISORIGEN()))
                   stmt.setInt(9, valueObject.getPAISORIGEN()); 
               else
                   stmt.setNull(9, Types.INTEGER);
               if (Funciones.contarCadena( valueObject.getESTADO(),20))
                   stmt.setString(10, valueObject.getESTADO()); 
               else
                   stmt.setNull(10, Types.VARCHAR);
               if (Funciones.contarCadena(valueObject.getNUMDECLARAVIGENTE(), 20))
                   stmt.setString(11, valueObject.getNUMDECLARAVIGENTE()); 
               else
                   stmt.setNull(11, Types.VARCHAR);
               if (!Funciones.EnteroesNulo(valueObject.getMODALIDADDECLARAIMP()))
                   stmt.setInt(12, valueObject.getMODALIDADDECLARAIMP()); 
               else
                   stmt.setNull(12, Types.INTEGER);
               if (!Funciones.EnteroesNulo(valueObject.getTIPODECLARACION()))
                   stmt.setInt(13, valueObject.getTIPODECLARACION()); 
               else
                   stmt.setNull(13, Types.INTEGER);
               if (!Funciones.EnteroesNulo(valueObject.getTIPOIMPORTACION()))
                   stmt.setInt(14, valueObject.getTIPOIMPORTACION()); 
               else
                   stmt.setNull(14, Types.INTEGER);
               if (!Funciones.EnteroesNulo(valueObject.getID_VEHICULO()))
                   stmt.setInt(15, valueObject.getID_VEHICULO()); 
               else
                   stmt.setNull(15, Types.INTEGER);
               if (!Funciones.EnteroesNulo(valueObject.getID_IMPORTADOR()))
                   stmt.setInt(16, valueObject.getID_IMPORTADOR()); 
               else
                   stmt.setNull(16, Types.INTEGER);
               if (Funciones.contarCadena(valueObject.getID_DOCTO(),2))
                   stmt.setString(17, valueObject.getID_DOCTO()); 
               else
                   stmt.setNull(17, Types.VARCHAR);
               if (Funciones.contarCadena(valueObject.getDOCIMP(),20))
                   stmt.setString(18, valueObject.getDOCIMP()); 
               else
                   stmt.setNull(18, Types.INTEGER);
               if (!Funciones.EnteroesNulo(valueObject.getID_TIPO_REGISTRO()))
                   stmt.setInt(19, valueObject.getID_TIPO_REGISTRO()); 
               else
                   stmt.setNull(19, Types.INTEGER);
               if (!Funciones.EnteroesNulo(valueObject.getID_TIPO_AUTOMOTOR()))
                   stmt.setInt(20, valueObject.getID_TIPO_AUTOMOTOR()); 
               else
                   stmt.setNull(20, Types.INTEGER);
               if (Funciones.contarCadena(valueObject.getCARGADO(), 1))
                   stmt.setString(21, valueObject.getCARGADO()); 
               else
                   stmt.setNull(21, Types.VARCHAR);

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, Runtactaimportacion valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE RUNTACTAIMPORTACION SET NUMACTAMANIFIMPORTACION = ?, FECHAMANIFIESTO = ?, FECHALEVANTE = ?, "
               + "NUMEROBULTOS = ?, NUMEROCUOTAS = ?, NUMSUBPARTARANCE = ?, "
               + "NUMEROLEVANTE = ?, PAISORIGEN = ?, ESTADO = ?, "
               + "NUMDECLARAVIGENTE = ?, MODALIDADDECLARAIMP = ?, TIPODECLARACION = ?, "
               + "TIPOIMPORTACION = ?, ID_VEHICULO = ?, ID_IMPORTADOR = ?, "
               + "ID_DOCTO = ?, DOCIMP = ?, ID_TIPO_REGISTRO = ?, "
               + "ID_TIPO_AUTOMOTOR = ?, CARGADO = ? WHERE (ID_RUNTACTAMANIFIMPORT = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              
            
            if (Funciones.contarCadena(valueObject.getNUMACTAMANIFIMPORTACION(), 20))
                stmt.setString(1, valueObject.getNUMACTAMANIFIMPORTACION()); 
            else
                stmt.setNull(1,Types.VARCHAR);
            if (Funciones.esFecha(valueObject.getFECHAMANIFIESTO()))
                stmt.setDate(2, Funciones.convFechaSSQL(valueObject.getFECHAMANIFIESTO()));
            else
                stmt.setNull(2, Types.VARCHAR);
            if (Funciones.esFecha(valueObject.getFECHALEVANTE()))
                stmt.setDate(3, Funciones.convFechaSSQL(valueObject.getFECHALEVANTE()));
            else
                stmt.setNull(3, Types.VARCHAR);
            if (!Funciones.EnteroesNulo(valueObject.getNUMEROBULTOS()))
                stmt.setInt(4, valueObject.getNUMEROBULTOS()); 
            else
                stmt.setNull(4, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getNUMEROCUOTAS()))
                stmt.setInt(5, valueObject.getNUMEROCUOTAS()); 
            else
                stmt.setNull(5, Types.INTEGER);
            if (Funciones.contarCadena(valueObject.getNUMSUBPARTARANCE(), 20))
                stmt.setString(6, valueObject.getNUMSUBPARTARANCE()); 
            else
                stmt.setNull(6, Types.VARCHAR);
            if (Funciones.contarCadena(valueObject.getNUMEROLEVANTE(), 20))
                stmt.setString(7, valueObject.getNUMEROLEVANTE());
            else
                stmt.setNull(7, Types.VARCHAR);
            if (!Funciones.EnteroesNulo(valueObject.getPAISORIGEN()))
                stmt.setInt(8, valueObject.getPAISORIGEN()); 
            else
                stmt.setNull(8, Types.INTEGER);
            if (Funciones.contarCadena( valueObject.getESTADO(),20))
                stmt.setString(9, valueObject.getESTADO()); 
            else
                stmt.setNull(9, Types.VARCHAR);
            if (Funciones.contarCadena(valueObject.getNUMDECLARAVIGENTE(), 20))
                stmt.setString(10, valueObject.getNUMDECLARAVIGENTE()); 
            else
                stmt.setNull(10, Types.VARCHAR);
            if (!Funciones.EnteroesNulo(valueObject.getMODALIDADDECLARAIMP()))
                stmt.setInt(11, valueObject.getMODALIDADDECLARAIMP()); 
            else
                stmt.setNull(11, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getTIPODECLARACION()))
                stmt.setInt(12, valueObject.getTIPODECLARACION()); 
            else
                stmt.setNull(12, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getTIPOIMPORTACION()))
                stmt.setInt(13, valueObject.getTIPOIMPORTACION()); 
            else
                stmt.setNull(13, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getID_VEHICULO()))
                stmt.setInt(14, valueObject.getID_VEHICULO()); 
            else
                stmt.setNull(14, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getID_IMPORTADOR()))
                stmt.setInt(15, valueObject.getID_IMPORTADOR()); 
            else
                stmt.setNull(15, Types.INTEGER);
            if (Funciones.contarCadena(valueObject.getID_DOCTO(),2))
                stmt.setString(16, valueObject.getID_DOCTO()); 
            else
                stmt.setNull(16, Types.VARCHAR);
            if (Funciones.contarCadena(valueObject.getDOCIMP(),20))
                stmt.setString(17, valueObject.getDOCIMP()); 
            else
                stmt.setNull(17, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getID_TIPO_REGISTRO()))
                stmt.setInt(18, valueObject.getID_TIPO_REGISTRO()); 
            else
                stmt.setNull(18, Types.INTEGER);
            if (!Funciones.EnteroesNulo(valueObject.getID_TIPO_AUTOMOTOR()))
                stmt.setInt(19, valueObject.getID_TIPO_AUTOMOTOR()); 
            else
                stmt.setNull(19, Types.INTEGER);
            if (Funciones.contarCadena(valueObject.getCARGADO(), 1))
                stmt.setString(20, valueObject.getCARGADO()); 
            else
                stmt.setNull(20, Types.VARCHAR);

            if (!Funciones.EnteroesNulo(valueObject.getID_RUNTACTAMANIFIMPORT()) )
                stmt.setInt(21, valueObject.getID_RUNTACTAMANIFIMPORT()); 
            else
                stmt.setNull(21, Types.INTEGER);

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, Runtactaimportacion valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM RUNTACTAIMPORTACION WHERE (ID_RUNTACTAMANIFIMPORT = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getID_RUNTACTAMANIFIMPORT()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM RUNTACTAIMPORTACION";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM RUNTACTAIMPORTACION";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, Runtactaimportacion valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM RUNTACTAIMPORTACION WHERE 1=1 ");

          if (valueObject.getID_RUNTACTAMANIFIMPORT() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_RUNTACTAMANIFIMPORT = ").append(valueObject.getID_RUNTACTAMANIFIMPORT()).append(" ");
          }

          if (valueObject.getNUMACTAMANIFIMPORTACION() != null) {
              if (first) { first = false; }
              sql.append("AND NUMACTAMANIFIMPORTACION LIKE '").append(valueObject.getNUMACTAMANIFIMPORTACION()).append("%' ");
          }

          if (valueObject.getFECHAMANIFIESTO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAMANIFIESTO = '").append(Funciones.convFechaSSQL(valueObject.getFECHAMANIFIESTO())).append("' ");
          }

          if (valueObject.getFECHALEVANTE() != null) {
              if (first) { first = false; }
              sql.append("AND FECHALEVANTE = '").append(Funciones.convFechaSSQL(valueObject.getFECHALEVANTE())).append("' ");
          }

          if (valueObject.getNUMEROBULTOS() != 0) {
              if (first) { first = false; }
              sql.append("AND NUMEROBULTOS = ").append(valueObject.getNUMEROBULTOS()).append(" ");
          }

          if (valueObject.getNUMEROCUOTAS() != 0) {
              if (first) { first = false; }
              sql.append("AND NUMEROCUOTAS = ").append(valueObject.getNUMEROCUOTAS()).append(" ");
          }

          if (valueObject.getNUMSUBPARTARANCE() != null) {
              if (first) { first = false; }
              sql.append("AND NUMSUBPARTARANCE LIKE '").append(valueObject.getNUMSUBPARTARANCE()).append("%' ");
          }

          if (valueObject.getNUMEROLEVANTE() != null) {
              if (first) { first = false; }
              sql.append("AND NUMEROLEVANTE LIKE '").append(valueObject.getNUMEROLEVANTE()).append("%' ");
          }

          if (valueObject.getPAISORIGEN() != 0) {
              if (first) { first = false; }
              sql.append("AND PAISORIGEN = ").append(valueObject.getPAISORIGEN()).append(" ");
          }

          if (valueObject.getESTADO() != null) {
              if (first) { first = false; }
              sql.append("AND ESTADO LIKE '").append(valueObject.getESTADO()).append("%' ");
          }

          if (valueObject.getNUMDECLARAVIGENTE() != null) {
              if (first) { first = false; }
              sql.append("AND NUMDECLARAVIGENTE LIKE '").append(valueObject.getNUMDECLARAVIGENTE()).append("%' ");
          }

          if (valueObject.getMODALIDADDECLARAIMP() != 0) {
              if (first) { first = false; }
              sql.append("AND MODALIDADDECLARAIMP = ").append(valueObject.getMODALIDADDECLARAIMP()).append(" ");
          }

          if (valueObject.getTIPODECLARACION() != 0) {
              if (first) { first = false; }
              sql.append("AND TIPODECLARACION = ").append(valueObject.getTIPODECLARACION()).append(" ");
          }

          if (valueObject.getTIPOIMPORTACION() != 0) {
              if (first) { first = false; }
              sql.append("AND TIPOIMPORTACION = ").append(valueObject.getTIPOIMPORTACION()).append(" ");
          }

          if (valueObject.getID_VEHICULO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_VEHICULO = ").append(valueObject.getID_VEHICULO()).append(" ");
          }

          if (valueObject.getID_IMPORTADOR() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_IMPORTADOR = ").append(valueObject.getID_IMPORTADOR()).append(" ");
          }

          if (valueObject.getID_DOCTO() != null) {
              if (first) { first = false; }
              sql.append("AND ID_DOCTO = '").append(valueObject.getID_DOCTO()).append("' ");
          }

          if (valueObject.getDOCIMP() != null) {
              if (first) { first = false; }
              sql.append("AND DOCIMP LIKE '").append(valueObject.getDOCIMP()).append("%' ");
          }

          if (valueObject.getID_TIPO_REGISTRO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_TIPO_REGISTRO = ").append(valueObject.getID_TIPO_REGISTRO()).append(" ");
          }

          if (valueObject.getID_TIPO_AUTOMOTOR() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_TIPO_AUTOMOTOR = ").append(valueObject.getID_TIPO_AUTOMOTOR()).append(" ");
          }

          if (valueObject.getCARGADO() != null) {
              if (first) { first = false; }
              sql.append("AND CARGADO LIKE '").append(valueObject.getCARGADO()).append("%' ");
          }


          sql.append("ORDER BY ID_RUNTACTAMANIFIMPORT ASC ");
          //System.out.println(sql);
          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, Runtactaimportacion valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setID_RUNTACTAMANIFIMPORT(result.getInt("ID_RUNTACTAMANIFIMPORT")); 
                   valueObject.setNUMACTAMANIFIMPORTACION(result.getString("NUMACTAMANIFIMPORTACION")); 
                   valueObject.setFECHAMANIFIESTO(Funciones.convFechaSSQL(result.getString("FECHAMANIFIESTO")).toString()); 
                   valueObject.setFECHALEVANTE(Funciones.convFechaSSQL(result.getString("FECHALEVANTE")).toString()); 
                   valueObject.setNUMEROBULTOS(result.getInt("NUMEROBULTOS")); 
                   valueObject.setNUMEROCUOTAS(result.getInt("NUMEROCUOTAS")); 
                   valueObject.setNUMSUBPARTARANCE(result.getString("NUMSUBPARTARANCE")); 
                   valueObject.setNUMEROLEVANTE(result.getString("NUMEROLEVANTE")); 
                   valueObject.setPAISORIGEN(result.getInt("PAISORIGEN")); 
                   valueObject.setESTADO(result.getString("ESTADO")); 
                   valueObject.setNUMDECLARAVIGENTE(result.getString("NUMDECLARAVIGENTE")); 
                   valueObject.setMODALIDADDECLARAIMP(result.getInt("MODALIDADDECLARAIMP")); 
                   valueObject.setTIPODECLARACION(result.getInt("TIPODECLARACION")); 
                   valueObject.setTIPOIMPORTACION(result.getInt("TIPOIMPORTACION")); 
                   valueObject.setID_VEHICULO(result.getInt("ID_VEHICULO")); 
                   valueObject.setID_IMPORTADOR(result.getInt("ID_IMPORTADOR")); 
                   valueObject.setID_DOCTO(result.getString("ID_DOCTO")); 
                   valueObject.setDOCIMP(result.getString("DOCIMP")); 
                   valueObject.setID_TIPO_REGISTRO(result.getInt("ID_TIPO_REGISTRO")); 
                   valueObject.setID_TIPO_AUTOMOTOR(result.getInt("ID_TIPO_AUTOMOTOR")); 
                   valueObject.setCARGADO(result.getString("CARGADO")); 

              } else {
                    //System.out.println("Runtactaimportacion Object Not Found!");
                    throw new NotFoundException("Runtactaimportacion Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   Runtactaimportacion temp = createValueObject();

                   temp.setID_RUNTACTAMANIFIMPORT(result.getInt("ID_RUNTACTAMANIFIMPORT")); 
                   temp.setNUMACTAMANIFIMPORTACION(result.getString("NUMACTAMANIFIMPORTACION")); 
                   temp.setFECHAMANIFIESTO(result.getString("FECHAMANIFIESTO")); 
                   temp.setFECHALEVANTE(result.getString("FECHALEVANTE")); 
                   temp.setNUMEROBULTOS(result.getInt("NUMEROBULTOS")); 
                   temp.setNUMEROCUOTAS(result.getInt("NUMEROCUOTAS")); 
                   temp.setNUMSUBPARTARANCE(result.getString("NUMSUBPARTARANCE")); 
                   temp.setNUMEROLEVANTE(result.getString("NUMEROLEVANTE")); 
                   temp.setPAISORIGEN(result.getInt("PAISORIGEN")); 
                   temp.setESTADO(result.getString("ESTADO")); 
                   temp.setNUMDECLARAVIGENTE(result.getString("NUMDECLARAVIGENTE")); 
                   temp.setMODALIDADDECLARAIMP(result.getInt("MODALIDADDECLARAIMP")); 
                   temp.setTIPODECLARACION(result.getInt("TIPODECLARACION")); 
                   temp.setTIPOIMPORTACION(result.getInt("TIPOIMPORTACION")); 
                   temp.setID_VEHICULO(result.getInt("ID_VEHICULO")); 
                   temp.setID_IMPORTADOR(result.getInt("ID_IMPORTADOR")); 
                   temp.setID_DOCTO(result.getString("ID_DOCTO")); 
                   temp.setDOCIMP(result.getString("DOCIMP")); 
                   temp.setID_TIPO_REGISTRO(result.getInt("ID_TIPO_REGISTRO")); 
                   temp.setID_TIPO_AUTOMOTOR(result.getInt("ID_TIPO_AUTOMOTOR")); 
                   temp.setCARGADO(result.getString("CARGADO")); 

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }
    
    public int getIdFB(Connection conn)throws SQLException{
      String sql = "SELECT GEN_ID(GEN_ID_RUNTACTAIMPORT,1) FROM TRANSITO";
      PreparedStatement stmt = null;
      ResultSet result = null;
      int allRows = 0;
      try {
          stmt = conn.prepareStatement(sql);
          result = stmt.executeQuery();

          if (result.next())
              allRows = result.getInt(1)+1;
      } 
      
      finally {
          if (result != null)
              result.close();
          if (stmt != null)
              stmt.close();
      }
      return allRows;
    }

  public void estadoActa(Connection conn, int id, String estado)throws SQLException{
    String sql = "UPDATE RUNTACTAIMPORTACION SET CARGADO = ? WHERE (ID_RUNTACTAMANIFIMPORT = ?)";
    PreparedStatement stmt = null;
    try {
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, estado);
        stmt.setInt(2, id);
        int rowcount = databaseUpdate(conn, stmt);
    } 
    
    finally {
        if (stmt != null)
            stmt.close();
    }
    
  }


}

