package modelo.datos.dao.transportepublico.tramites;

import java.sql.*;
import java.util.*;
import java.math.*;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.transportepublico.tramites.ViewResoluciones;


/**
  * ViewResoluciones Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve ViewResoluciones object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class ViewResolucionesDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public ViewResoluciones createValueObject() {
          return new ViewResoluciones();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public ViewResoluciones getObject(Connection conn, int IDRESOLUCION) throws NotFoundException, SQLException {

          ViewResoluciones valueObject = createValueObject();
          valueObject.setIDRESOLUCION(IDRESOLUCION);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, ViewResoluciones valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM VIEW_RESOLUCIONES WHERE (IDRESOLUCION = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getIDRESOLUCION()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM VIEW_RESOLUCIONES ORDER BY IDRESOLUCION ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, ViewResoluciones valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO VIEW_RESOLUCIONES ( IDRESOLUCION, NUMERORESOLUCION, FECHARESOLUCION, "
               + "IDPERSONA, IDENTIFICACION, NOMBRESPERSONA, "
               + "APELLIDO1, APELLIDO2, IDCUPOTAXI, "
               + "NUMEROCUPO, IDEMPRESADESERVICIO, EMPRESADESERVICIO, "
               + "IDVEHICULO, PLACA, MODELO, "
               + "NROMOTOR, CHASIS, IDMARCA, "
               + "MARCAVEHICULO, IDTIPOVEHICULO, NOMTIPOVEHICULO, "
               + "IDDOCUMENTO, DESCDOCUMENTO, "/* ADESCRIPCION, "*/
               + "DFECHAREGISTRO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"/*, ?*/+") ";
               stmt = conn.prepareStatement(sql);

               stmt.setInt(1, valueObject.getIDRESOLUCION()); 
               stmt.setString(2, valueObject.getNUMERORESOLUCION());                
               stmt.setString(3, valueObject.getFECHARESOLUCION()); 
               stmt.setInt(4, valueObject.getIDPERSONA()); 
               stmt.setString(5, valueObject.getIDENTIFICACION()); 
               stmt.setString(6, valueObject.getNOMBRESPERSONA()); 
               stmt.setString(7, valueObject.getAPELLIDO1()); 
               stmt.setString(8, valueObject.getAPELLIDO2()); 
               stmt.setInt(9, valueObject.getIDCUPOTAXI()); 
               stmt.setInt(10, valueObject.getNUMEROCUPO()); 
               stmt.setInt(11, valueObject.getIDEMPRESADESERVICIO()); 
               stmt.setString(12, valueObject.getEMPRESADESERVICIO()); 
               stmt.setInt(13, valueObject.getIDVEHICULO()); 
               stmt.setString(14, valueObject.getPLACA()); 
               stmt.setInt(15, valueObject.getMODELO()); 
               stmt.setString(16, valueObject.getNROMOTOR()); 
               stmt.setString(17, valueObject.getCHASIS()); 
               stmt.setString(18, valueObject.getIDMARCA()); 
               stmt.setString(19, valueObject.getMARCAVEHICULO()); 
               stmt.setInt(20, valueObject.getIDTIPOVEHICULO()); 
               stmt.setString(21, valueObject.getNOMTIPOVEHICULO()); 
               stmt.setString(22, valueObject.getIDDOCUMENTO()); 
               stmt.setString(23, valueObject.getDESCDOCUMENTO()); 
               //stmt.setString(24, valueObject.getADESCRIPCION()); 
               stmt.setString(25, valueObject.getDFECHAREGISTRO()); 

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, ViewResoluciones valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE VIEW_RESOLUCIONES SET NUMERORESOLUCION = ?, FECHARESOLUCION = ?, IDPERSONA = ?, "
               + "IDENTIFICACION = ?, NOMBRESPERSONA = ?, APELLIDO1 = ?, "
               + "APELLIDO2 = ?, IDCUPOTAXI = ?, NUMEROCUPO = ?, "
               + "IDEMPRESADESERVICIO = ?, EMPRESADESERVICIO = ?, IDVEHICULO = ?, "
               + "PLACA = ?, MODELO = ?, NROMOTOR = ?, "
               + "CHASIS = ?, IDMARCA = ?, MARCAVEHICULO = ?, "
               + "IDTIPOVEHICULO = ?, NOMTIPOVEHICULO = ?, IDDOCUMENTO = ?, "
               + "DESCDOCUMENTO = ?,"/* ADESCRIPCION = ?,*/+" DFECHAREGISTRO = ? WHERE (IDRESOLUCION = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setString(1, valueObject.getNUMERORESOLUCION()); 
              stmt.setString(2, valueObject.getFECHARESOLUCION()); 
              stmt.setInt(3, valueObject.getIDPERSONA()); 
              stmt.setString(4, valueObject.getIDENTIFICACION()); 
              stmt.setString(5, valueObject.getNOMBRESPERSONA()); 
              stmt.setString(6, valueObject.getAPELLIDO1()); 
              stmt.setString(7, valueObject.getAPELLIDO2()); 
              stmt.setInt(8, valueObject.getIDCUPOTAXI()); 
              stmt.setInt(9, valueObject.getNUMEROCUPO()); 
              stmt.setInt(10, valueObject.getIDEMPRESADESERVICIO()); 
              stmt.setString(11, valueObject.getEMPRESADESERVICIO()); 
              stmt.setInt(12, valueObject.getIDVEHICULO()); 
              stmt.setString(13, valueObject.getPLACA()); 
              stmt.setInt(14, valueObject.getMODELO()); 
              stmt.setString(15, valueObject.getNROMOTOR()); 
              stmt.setString(16, valueObject.getCHASIS()); 
              stmt.setString(17, valueObject.getIDMARCA()); 
              stmt.setString(18, valueObject.getMARCAVEHICULO()); 
              stmt.setInt(19, valueObject.getIDTIPOVEHICULO()); 
              stmt.setString(20, valueObject.getNOMTIPOVEHICULO()); 
              stmt.setString(21, valueObject.getIDDOCUMENTO()); 
              stmt.setString(22, valueObject.getDESCDOCUMENTO()); 
              //stmt.setString(23, valueObject.getADESCRIPCION()); 
              stmt.setString(24, valueObject.getDFECHAREGISTRO()); 

              stmt.setInt(25, valueObject.getIDRESOLUCION()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, ViewResoluciones valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM VIEW_RESOLUCIONES WHERE (IDRESOLUCION = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getIDRESOLUCION()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM VIEW_RESOLUCIONES";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM VIEW_RESOLUCIONES";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, ViewResoluciones valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
              StringBuffer sql = new StringBuffer("SELECT * FROM VIEW_RESOLUCIONES WHERE 1=1 ");

          if (valueObject.getIDRESOLUCION() != 0) {
              if (first) { first = false; }
              sql.append("AND IDRESOLUCION = ").append(valueObject.getIDRESOLUCION()).append(" ");
          }

          if (valueObject.getNUMERORESOLUCION() != null) {
              if (first) { first = false; }
              sql.append("AND NUMERORESOLUCION = '").append(valueObject.getNUMERORESOLUCION()).append("' ");
          }

          if (valueObject.getFECHARESOLUCION() != null) {
              if (first) { first = false; }
              sql.append("AND FECHARESOLUCION = '").append(valueObject.getFECHARESOLUCION()).append("' ");
          }

          if (valueObject.getIDPERSONA() != 0) {
              if (first) { first = false; }
              sql.append("AND IDPERSONA = ").append(valueObject.getIDPERSONA()).append(" ");
          }

          if (valueObject.getIDENTIFICACION() != null) {
              if (first) { first = false; }
              sql.append("AND IDENTIFICACION = '").append(valueObject.getIDENTIFICACION()).append("' ");
          }

          if (valueObject.getNOMBRESPERSONA() != null) {
              if (first) { first = false; }
              sql.append("AND NOMBRESPERSONA = '").append(valueObject.getNOMBRESPERSONA()).append("' ");
          }

          if (valueObject.getAPELLIDO1() != null) {
              if (first) { first = false; }
              sql.append("AND APELLIDO1 = '").append(valueObject.getAPELLIDO1()).append("' ");
          }

          if (valueObject.getAPELLIDO2() != null) {
              if (first) { first = false; }
              sql.append("AND APELLIDO2 = '").append(valueObject.getAPELLIDO2()).append("' ");
          }

          if (valueObject.getIDCUPOTAXI() != 0) {
              if (first) { first = false; }
              sql.append("AND IDCUPOTAXI = ").append(valueObject.getIDCUPOTAXI()).append(" ");
          }

          if (valueObject.getNUMEROCUPO() != 0) {
              if (first) { first = false; }
              sql.append("AND NUMEROCUPO = ").append(valueObject.getNUMEROCUPO()).append(" ");
          }

          if (valueObject.getIDEMPRESADESERVICIO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDEMPRESADESERVICIO = ").append(valueObject.getIDEMPRESADESERVICIO()).append(" ");
          }

          if (valueObject.getEMPRESADESERVICIO() != null) {
              if (first) { first = false; }
              sql.append("AND EMPRESADESERVICIO = '").append(valueObject.getEMPRESADESERVICIO()).append("' ");
          }

          if (valueObject.getIDVEHICULO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDVEHICULO = ").append(valueObject.getIDVEHICULO()).append(" ");
          }

          if (valueObject.getPLACA() != null) {
              if (first) { first = false; }
              sql.append("AND PLACA = '").append(valueObject.getPLACA()).append("' ");
          }

          if (valueObject.getMODELO() != 0) {
              if (first) { first = false; }
              sql.append("AND MODELO = ").append(valueObject.getMODELO()).append(" ");
          }

          if (valueObject.getNROMOTOR() != null) {
              if (first) { first = false; }
              sql.append("AND NROMOTOR = '").append(valueObject.getNROMOTOR()).append("' ");
          }

          if (valueObject.getCHASIS() != null) {
              if (first) { first = false; }
              sql.append("AND CHASIS = '").append(valueObject.getCHASIS()).append("' ");
          }

          if (valueObject.getIDMARCA() != null) {
              if (first) { first = false; }
              sql.append("AND IDMARCA = '").append(valueObject.getIDMARCA()).append("' ");
          }

          if (valueObject.getMARCAVEHICULO() != null) {
              if (first) { first = false; }
              sql.append("AND MARCAVEHICULO = '").append(valueObject.getMARCAVEHICULO()).append("' ");
          }

          if (valueObject.getIDTIPOVEHICULO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDTIPOVEHICULO = ").append(valueObject.getIDTIPOVEHICULO()).append(" ");
          }

          if (valueObject.getNOMTIPOVEHICULO() != null) {
              if (first) { first = false; }
              sql.append("AND NOMTIPOVEHICULO = '").append(valueObject.getNOMTIPOVEHICULO()).append("' ");
          }

          if (valueObject.getIDDOCUMENTO() != null) {
              if (first) { first = false; }
              sql.append("AND IDDOCUMENTO = '").append(valueObject.getIDDOCUMENTO()).append("' ");
          }

          if (valueObject.getDESCDOCUMENTO() != null) {
              if (first) { first = false; }
              sql.append("AND DESCDOCUMENTO = '").append(valueObject.getDESCDOCUMENTO()).append("' ");
          }
/*
          if (valueObject.getADESCRIPCION() != null) {
              if (first) { first = false; }
              sql.append("AND ADESCRIPCION = '").append(valueObject.getADESCRIPCION()).append("' ");
          }
*/
   /*       if (valueObject.getDFECHAREGISTRO() != null) {
              if (first) { first = false; }
              sql.append("AND DFECHAREGISTRO = '").append(valueObject.getDFECHAREGISTRO()).append("' ");
          }*/
          
      /*  if (valueObject.getIDTIPORESOLUCION() != 0) {
            if (first) { first = false; }
            sql.append("AND IDTIPORESOLUCION = ").append(valueObject.getIDTIPORESOLUCION()).append(" ");
        }*/

          sql.append("ORDER BY IDRESOLUCION ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          //if (first)
         //      searchResults = new ArrayList();
          //else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, ViewResoluciones valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setIDRESOLUCION(result.getInt("IDRESOLUCION")); 
                   valueObject.setNUMERORESOLUCION(result.getString("NUMERORESOLUCION")); 
                   valueObject.setFECHARESOLUCION(result.getString("FECHARESOLUCION")); 
                   valueObject.setIDPERSONA(result.getInt("IDPERSONA")); 
                   valueObject.setIDENTIFICACION(result.getString("IDENTIFICACION")); 
                   valueObject.setNOMBRESPERSONA(result.getString("NOMBRESPERSONA")); 
                   valueObject.setAPELLIDO1(result.getString("APELLIDO1")); 
                   valueObject.setAPELLIDO2(result.getString("APELLIDO2")); 
                   valueObject.setIDCUPOTAXI(result.getInt("IDCUPOTAXI")); 
                   valueObject.setNUMEROCUPO(result.getInt("NUMEROCUPO")); 
                   valueObject.setIDEMPRESADESERVICIO(result.getInt("IDEMPRESADESERVICIO")); 
                   valueObject.setEMPRESADESERVICIO(result.getString("EMPRESADESERVICIO")); 
                   valueObject.setIDVEHICULO(result.getInt("IDVEHICULO")); 
                   valueObject.setPLACA(result.getString("PLACA")); 
                   valueObject.setMODELO(result.getInt("MODELO")); 
                   valueObject.setNROMOTOR(result.getString("NROMOTOR")); 
                   valueObject.setCHASIS(result.getString("CHASIS")); 
                   valueObject.setIDMARCA(result.getString("IDMARCA")); 
                   valueObject.setMARCAVEHICULO(result.getString("MARCAVEHICULO")); 
                   valueObject.setIDTIPOVEHICULO(result.getInt("IDTIPOVEHICULO")); 
                   valueObject.setNOMTIPOVEHICULO(result.getString("NOMTIPOVEHICULO")); 
                   valueObject.setIDDOCUMENTO(result.getString("IDDOCUMENTO")); 
                   valueObject.setDESCDOCUMENTO(result.getString("DESCDOCUMENTO")); 
                   //valueObject.setADESCRIPCION(result.getString("ADESCRIPCION")); 
                   //valueObject.setDFECHAREGISTRO(result.getString("DFECHAREGISTRO")); 
                   //valueObject.setIDTIPORESOLUCION(result.getInt("IDTIPORESOLUCION"));

              } else {
                    //System.out.println("ViewResoluciones Object Not Found!");
                    throw new NotFoundException("ViewResoluciones Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   ViewResoluciones temp = createValueObject();

                   temp.setIDRESOLUCION(result.getInt("IDRESOLUCION")); 
                   temp.setNUMERORESOLUCION(result.getString("NUMERORESOLUCION")); 
                   temp.setFECHARESOLUCION(result.getString("FECHARESOLUCION")); 
                   temp.setIDPERSONA(result.getInt("IDPERSONA")); 
                   temp.setIDENTIFICACION(result.getString("IDENTIFICACION")); 
                   temp.setNOMBRESPERSONA(result.getString("NOMBRESPERSONA")); 
                   temp.setAPELLIDO1(result.getString("APELLIDO1")); 
                   temp.setAPELLIDO2(result.getString("APELLIDO2")); 
                   temp.setIDCUPOTAXI(result.getInt("IDCUPOTAXI")); 
                   temp.setNUMEROCUPO(result.getInt("NUMEROCUPO")); 
                   temp.setIDEMPRESADESERVICIO(result.getInt("IDEMPRESADESERVICIO")); 
                   temp.setEMPRESADESERVICIO(result.getString("EMPRESADESERVICIO")); 
                   temp.setIDVEHICULO(result.getInt("IDVEHICULO")); 
                   temp.setPLACA(result.getString("PLACA")); 
                   temp.setMODELO(result.getInt("MODELO")); 
                   temp.setNROMOTOR(result.getString("NROMOTOR")); 
                   temp.setCHASIS(result.getString("CHASIS")); 
                   temp.setIDMARCA(result.getString("IDMARCA")); 
                   temp.setMARCAVEHICULO(result.getString("MARCAVEHICULO")); 
                   temp.setIDTIPOVEHICULO(result.getInt("IDTIPOVEHICULO")); 
                   temp.setNOMTIPOVEHICULO(result.getString("NOMTIPOVEHICULO")); 
                   temp.setIDDOCUMENTO(result.getString("IDDOCUMENTO")); 
                   temp.setDESCDOCUMENTO(result.getString("DESCDOCUMENTO")); 
                   //temp.setADESCRIPCION(result.getString("ADESCRIPCION")); 
                   //temp.setDFECHAREGISTRO(result.getString("DFECHAREGISTRO"));
                   //temp.setIDTIPORESOLUCION(result.getInt("IDTIPORESOLUCION"));

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }


}