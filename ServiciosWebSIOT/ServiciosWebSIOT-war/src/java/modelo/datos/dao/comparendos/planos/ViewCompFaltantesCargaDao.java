package modelo.datos.dao.comparendos.planos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.comparendos.planos.ViewCompFaltantesCarga;

import utilidades.Funciones;


/**
  * ViewCompFaltantesCarga Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve ViewCompFaltantesCarga object instances.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class ViewCompFaltantesCargaDao {


    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public ViewCompFaltantesCarga createValueObject() {
        return new ViewCompFaltantesCarga();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database
     * using given Primary-Key as identifier. This method is just a convenience method
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public ViewCompFaltantesCarga getObject(Connection conn, String PLACA) throws NotFoundException, SQLException {

        ViewCompFaltantesCarga valueObject = createValueObject();
        valueObject.setPLACA(PLACA);
        load(conn, valueObject);
        return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, ViewCompFaltantesCarga valueObject) throws NotFoundException, SQLException {

        if (valueObject.getPLACA() == null) {
            //System.out.println("Can not select without Primary-Key!");
            throw new NotFoundException("Can not select without Primary-Key!");
        }

        String sql = "SELECT * FROM VIEW_COMP_FALTANTES_CARGA WHERE (PLACA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getPLACA());

            singleQuery(conn, stmt, valueObject);

        } finally {
            //if (stmt != null)
            //    stmt.close();
        }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows.
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

        String sql = "SELECT * FROM VIEW_COMP_FALTANTES_CARGA ORDER BY PLACA ASC ";
        List searchResults = listQuery(conn, conn.prepareStatement(sql));

        return searchResults;
    }


    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, ViewCompFaltantesCarga valueObject) throws SQLException {

        String sql = "";
        PreparedStatement stmt = null;
        ResultSet result = null;

        try {
            sql =
"INSERT INTO VIEW_COMP_FALTANTES_CARGA ( PLACA, ID_INFRACTOR, ID_COMPARENDO, " + "NUMEROCOMPARENDO, FECHACOMPARENDO, HORACOMPARENDO, " +
  "DIRECCIONINFRACCION, OBSERVACION, REPORTAFUGA, " + "REPORTAACCIDENTE, REPORTAINMOVILIZACION, POLCA, " +
  "LOCALIDAD_COMUNADIRECCION, ID_DEPTO, CODCIUDAD, " + "CONSECUTIVOINMOVILIZACION, PLACAGRUA, NUMEROGRUA, " +
  "DIRECCIONPATIO_INMOVILIZA, DESCRIPCIONPATIO, VALORINFRACCION, " + "PLACAAGENTE, COD_ESTADO, CODTIPOINFRACTOR, " +
  "NROIDENTIFICACION) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
            stmt = conn.prepareStatement(sql);

            stmt.setString(1, valueObject.getPLACA());
            stmt.setInt(2, valueObject.getID_INFRACTOR());
            stmt.setInt(3, valueObject.getID_COMPARENDO());
            stmt.setString(4, valueObject.getNUMEROCOMPARENDO());
            stmt.setString(5, valueObject.getFECHACOMPARENDO());
            
            //stmt.setString(6, valueObject.getHORACOMPARENDO());
          if (Funciones.esTime(valueObject.getHORACOMPARENDO()))
              stmt.setTime(6, Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getHORACOMPARENDO())));
          else
              stmt.setNull(6, Types.TIME);
            
            stmt.setString(7, valueObject.getDIRECCIONINFRACCION());
            stmt.setString(8, valueObject.getOBSERVACION());
            stmt.setString(9, valueObject.getREPORTAFUGA());
            stmt.setString(10, valueObject.getREPORTAACCIDENTE());
            stmt.setString(11, valueObject.getREPORTAINMOVILIZACION());
            stmt.setString(12, valueObject.getPOLCA());
            stmt.setString(13, valueObject.getLOCALIDAD_COMUNADIRECCION());
            stmt.setString(14, valueObject.getID_DEPTO());
            stmt.setString(15, valueObject.getCODCIUDAD());
            stmt.setString(16, valueObject.getCONSECUTIVOINMOVILIZACION());
            stmt.setString(17, valueObject.getPLACAGRUA());
            stmt.setString(18, valueObject.getNUMEROGRUA());
            stmt.setString(19, valueObject.getDIRECCIONPATIO_INMOVILIZA());
            stmt.setString(20, valueObject.getDESCRIPCIONPATIO());
            stmt.setString(21, valueObject.getVALORINFRACCION());
            stmt.setString(22, valueObject.getPLACAAGENTE());
            stmt.setString(23, valueObject.getCOD_ESTADO());
            stmt.setString(24, valueObject.getCODTIPOINFRACTOR());
            stmt.setString(25, valueObject.getNROIDENTIFICACION());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount != 1) {
                //System.out.println("PrimaryKey Error when updating DB!");
                throw new SQLException("PrimaryKey Error when updating DB!");
            }

        } finally {
            if (stmt != null)
                stmt.close();
        }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, ViewCompFaltantesCarga valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE VIEW_COMP_FALTANTES_CARGA SET ID_INFRACTOR = ?, ID_COMPARENDO = ?, NUMEROCOMPARENDO = ?, " +
            "FECHACOMPARENDO = ?, HORACOMPARENDO = ?, DIRECCIONINFRACCION = ?, " +
            "OBSERVACION = ?, REPORTAFUGA = ?, REPORTAACCIDENTE = ?, " +
            "REPORTAINMOVILIZACION = ?, POLCA = ?, LOCALIDAD_COMUNADIRECCION = ?, " +
            "ID_DEPTO = ?, CODCIUDAD = ?, CONSECUTIVOINMOVILIZACION = ?, " +
            "PLACAGRUA = ?, NUMEROGRUA = ?, DIRECCIONPATIO_INMOVILIZA = ?, " +
            "DESCRIPCIONPATIO = ?, VALORINFRACCION = ?, PLACAAGENTE = ?, " +
            "COD_ESTADO = ?, CODTIPOINFRACTOR = ?, NROIDENTIFICACION = ? WHERE (PLACA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getID_INFRACTOR());
            stmt.setInt(2, valueObject.getID_COMPARENDO());
            stmt.setString(3, valueObject.getNUMEROCOMPARENDO());
            stmt.setString(4, valueObject.getFECHACOMPARENDO());
            
            //stmt.setString(5, valueObject.getHORACOMPARENDO());
          if (Funciones.esTime(valueObject.getHORACOMPARENDO()))
              stmt.setTime(5, Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getHORACOMPARENDO())));
          else
              stmt.setNull(5, Types.TIME);
            
            stmt.setString(6, valueObject.getDIRECCIONINFRACCION());
            stmt.setString(7, valueObject.getOBSERVACION());
            stmt.setString(8, valueObject.getREPORTAFUGA());
            stmt.setString(9, valueObject.getREPORTAACCIDENTE());
            stmt.setString(10, valueObject.getREPORTAINMOVILIZACION());
            stmt.setString(11, valueObject.getPOLCA());
            stmt.setString(12, valueObject.getLOCALIDAD_COMUNADIRECCION());
            stmt.setString(13, valueObject.getID_DEPTO());
            stmt.setString(14, valueObject.getCODCIUDAD());
            stmt.setString(15, valueObject.getCONSECUTIVOINMOVILIZACION());
            stmt.setString(16, valueObject.getPLACAGRUA());
            stmt.setString(17, valueObject.getNUMEROGRUA());
            stmt.setString(18, valueObject.getDIRECCIONPATIO_INMOVILIZA());
            stmt.setString(19, valueObject.getDESCRIPCIONPATIO());
            stmt.setString(20, valueObject.getVALORINFRACCION());
            stmt.setString(21, valueObject.getPLACAAGENTE());
            stmt.setString(22, valueObject.getCOD_ESTADO());
            stmt.setString(23, valueObject.getCODTIPOINFRACTOR());
            stmt.setString(24, valueObject.getNROIDENTIFICACION());

            stmt.setString(25, valueObject.getPLACA());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not
     * be restored by calling save. Restoring can only be done using create method but if
     * database is using automatic surrogate-keys, the resulting object will have different
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, ViewCompFaltantesCarga valueObject) throws NotFoundException, SQLException {

        if (valueObject.getPLACA() == null) {
            //System.out.println("Can not delete without Primary-Key!");
            throw new NotFoundException("Can not delete without Primary-Key!");
        }

        String sql = "DELETE FROM VIEW_COMP_FALTANTES_CARGA WHERE (PLACA = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getPLACA());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be deleted (PrimaryKey not found)");
                throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be
     * restored by calling save. Restoring can only be done using create method but if database
     * is using automatic surrogate-keys, the resulting object will have different primary-key
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

        String sql = "DELETE FROM VIEW_COMP_FALTANTES_CARGA";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            int rowcount = databaseUpdate(conn, stmt);
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

        String sql = "SELECT count(*) FROM VIEW_COMP_FALTANTES_CARGA";
        PreparedStatement stmt = null;
        ResultSet result = null;
        int allRows = 0;

        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next())
                allRows = result.getInt(1);
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        return allRows;
    }


    /**
     * searchMatching-Method. This method provides searching capability to
     * get matching valueObjects from database. It works by searching all
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List,
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, ViewCompFaltantesCarga valueObject) throws SQLException {

        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM VIEW_COMP_FALTANTES_CARGA WHERE 1=1 ");

        if (valueObject.getPLACA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND PLACA = '").append(valueObject.getPLACA()).append("' ");
        }

        if (valueObject.getID_INFRACTOR() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_INFRACTOR = ").append(valueObject.getID_INFRACTOR()).append(" ");
        }

        if (valueObject.getID_COMPARENDO() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_COMPARENDO = ").append(valueObject.getID_COMPARENDO()).append(" ");
        }

        if (valueObject.getNUMEROCOMPARENDO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND NUMEROCOMPARENDO = '").append(valueObject.getNUMEROCOMPARENDO()).append("' ");
        }

        if (valueObject.getFECHACOMPARENDO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND FECHACOMPARENDO = '").append(valueObject.getFECHACOMPARENDO()).append("' ");
        }

        if (valueObject.getHORACOMPARENDO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND HORACOMPARENDO = '").append(valueObject.getHORACOMPARENDO()).append("' ");
        }

        if (valueObject.getDIRECCIONINFRACCION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND DIRECCIONINFRACCION = '").append(valueObject.getDIRECCIONINFRACCION()).append("' ");
        }

        if (valueObject.getOBSERVACION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND OBSERVACION = '").append(valueObject.getOBSERVACION()).append("' ");
        }

        if (valueObject.getREPORTAFUGA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND REPORTAFUGA = '").append(valueObject.getREPORTAFUGA()).append("' ");
        }

        if (valueObject.getREPORTAACCIDENTE() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND REPORTAACCIDENTE = '").append(valueObject.getREPORTAACCIDENTE()).append("' ");
        }

        if (valueObject.getREPORTAINMOVILIZACION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND REPORTAINMOVILIZACION = '").append(valueObject.getREPORTAINMOVILIZACION()).append("' ");
        }

        if (valueObject.getPOLCA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND POLCA = '").append(valueObject.getPOLCA()).append("' ");
        }

        if (valueObject.getLOCALIDAD_COMUNADIRECCION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND LOCALIDAD_COMUNADIRECCION = '").append(valueObject.getLOCALIDAD_COMUNADIRECCION()).append("' ");
        }

        if (valueObject.getID_DEPTO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_DEPTO = '").append(valueObject.getID_DEPTO()).append("' ");
        }

        if (valueObject.getCODCIUDAD() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND CODCIUDAD = '").append(valueObject.getCODCIUDAD()).append("' ");
        }

        if (valueObject.getCONSECUTIVOINMOVILIZACION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND CONSECUTIVOINMOVILIZACION = '").append(valueObject.getCONSECUTIVOINMOVILIZACION()).append("' ");
        }

        if (valueObject.getPLACAGRUA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND PLACAGRUA = '").append(valueObject.getPLACAGRUA()).append("' ");
        }

        if (valueObject.getNUMEROGRUA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND NUMEROGRUA = '").append(valueObject.getNUMEROGRUA()).append("' ");
        }

        if (valueObject.getDIRECCIONPATIO_INMOVILIZA() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND DIRECCIONPATIO_INMOVILIZA = '").append(valueObject.getDIRECCIONPATIO_INMOVILIZA()).append("' ");
        }

        if (valueObject.getDESCRIPCIONPATIO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND DESCRIPCIONPATIO = '").append(valueObject.getDESCRIPCIONPATIO()).append("' ");
        }

        if (valueObject.getVALORINFRACCION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND VALORINFRACCION = '").append(valueObject.getVALORINFRACCION()).append("' ");
        }

        if (valueObject.getPLACAAGENTE() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND PLACAAGENTE = '").append(valueObject.getPLACAAGENTE()).append("' ");
        }

        if (valueObject.getCOD_ESTADO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND COD_ESTADO = '").append(valueObject.getCOD_ESTADO()).append("' ");
        }

        if (valueObject.getCODTIPOINFRACTOR() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND CODTIPOINFRACTOR = '").append(valueObject.getCODTIPOINFRACTOR()).append("' ");
        }

        if (valueObject.getNROIDENTIFICACION() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND NROIDENTIFICACION = '").append(valueObject.getNROIDENTIFICACION()).append("' ");
        }

        if (valueObject.getNUEVO_CODIGO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND NUEVO_CODIGO = '").append(valueObject.getNUEVO_CODIGO()).append("' ");
        }

        if (valueObject.getNUEVO_CODIGOCORREGIDO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND NUEVO_CODIGOCORREGIDO = '").append(valueObject.getNUEVO_CODIGOCORREGIDO()).append("' ");
        }
        if (valueObject.getIDREPORTECOMPARENDO() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND IDREPORTECOMPARENDO = ").append(valueObject.getIDREPORTECOMPARENDO()).append(" ");
        }
        if (valueObject.getIDESTADO() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND IDESTADO = ").append(valueObject.getIDESTADO()).append(" ");
        }


        sql.append("ORDER BY PLACA ASC ");

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
            searchResults = new ArrayList();
        else
            searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

        int result = stmt.executeUpdate();

        return result;
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt,
                               ViewCompFaltantesCarga valueObject) throws NotFoundException, SQLException {

        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            if (result.next()) {

                valueObject.setPLACA(result.getString("PLACA"));
                valueObject.setID_INFRACTOR(result.getInt("ID_INFRACTOR"));
                valueObject.setID_COMPARENDO(result.getInt("ID_COMPARENDO"));
                valueObject.setNUMEROCOMPARENDO(result.getString("NUMEROCOMPARENDO"));
                valueObject.setFECHACOMPARENDO(result.getString("FECHACOMPARENDO"));
                valueObject.setHORACOMPARENDO(result.getString("HORACOMPARENDO"));
                valueObject.setDIRECCIONINFRACCION(result.getString("DIRECCIONINFRACCION"));
                valueObject.setOBSERVACION(result.getString("OBSERVACION"));
                valueObject.setREPORTAFUGA(result.getString("REPORTAFUGA"));
                valueObject.setREPORTAACCIDENTE(result.getString("REPORTAACCIDENTE"));
                valueObject.setREPORTAINMOVILIZACION(result.getString("REPORTAINMOVILIZACION"));
                valueObject.setPOLCA(result.getString("POLCA"));
                valueObject.setLOCALIDAD_COMUNADIRECCION(result.getString("LOCALIDAD_COMUNADIRECCION"));
                valueObject.setID_DEPTO(result.getString("ID_DEPTO"));
                valueObject.setCODCIUDAD(result.getString("CODCIUDAD"));
                valueObject.setCONSECUTIVOINMOVILIZACION(result.getString("CONSECUTIVOINMOVILIZACION"));
                valueObject.setPLACAGRUA(result.getString("PLACAGRUA"));
                valueObject.setNUMEROGRUA(result.getString("NUMEROGRUA"));
                valueObject.setDIRECCIONPATIO_INMOVILIZA(result.getString("DIRECCIONPATIO_INMOVILIZA"));
                valueObject.setDESCRIPCIONPATIO(result.getString("DESCRIPCIONPATIO"));
                valueObject.setVALORINFRACCION(result.getString("VALORINFRACCION"));
                valueObject.setPLACAAGENTE(result.getString("PLACAAGENTE"));
                valueObject.setCOD_ESTADO(result.getString("COD_ESTADO"));
                valueObject.setCODTIPOINFRACTOR(result.getString("CODTIPOINFRACTOR"));
                valueObject.setNROIDENTIFICACION(result.getString("NROIDENTIFICACION"));
                valueObject.setNUEVO_CODIGO(result.getString("NUEVO_CODIGO"));
                valueObject.setNUEVO_CODIGOCORREGIDO(result.getString("NUEVO_CODIGOCORREGIDO"));
                valueObject.setIDREPORTECOMPARENDO(result.getInt("IDREPORTECOMPARENDO"));
                valueObject.setIDESTADO(result.getInt("IDESTADO"));

            } else {
                //System.out.println("ViewCompFaltantesCarga Object Not Found!");
                throw new NotFoundException("ViewCompFaltantesCarga Object Not Found!");
            }
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

        ArrayList searchResults = new ArrayList();
        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            while (result.next()) {
                ViewCompFaltantesCarga temp = createValueObject();

                temp.setPLACA(result.getString("PLACA"));
                temp.setID_INFRACTOR(result.getInt("ID_INFRACTOR"));
                temp.setID_COMPARENDO(result.getInt("ID_COMPARENDO"));
                temp.setNUMEROCOMPARENDO(result.getString("NUMEROCOMPARENDO"));
                temp.setFECHACOMPARENDO(result.getString("FECHACOMPARENDO"));
                temp.setHORACOMPARENDO(result.getString("HORACOMPARENDO"));
                temp.setDIRECCIONINFRACCION(result.getString("DIRECCIONINFRACCION"));
                temp.setOBSERVACION(result.getString("OBSERVACION"));
                temp.setREPORTAFUGA(result.getString("REPORTAFUGA"));
                temp.setREPORTAACCIDENTE(result.getString("REPORTAACCIDENTE"));
                temp.setREPORTAINMOVILIZACION(result.getString("REPORTAINMOVILIZACION"));
                temp.setPOLCA(result.getString("POLCA"));
                temp.setLOCALIDAD_COMUNADIRECCION(result.getString("LOCALIDAD_COMUNADIRECCION"));
                temp.setID_DEPTO(result.getString("ID_DEPTO"));
                temp.setCODCIUDAD(result.getString("CODCIUDAD"));
                temp.setCONSECUTIVOINMOVILIZACION(result.getString("CONSECUTIVOINMOVILIZACION"));
                temp.setPLACAGRUA(result.getString("PLACAGRUA"));
                temp.setNUMEROGRUA(result.getString("NUMEROGRUA"));
                temp.setDIRECCIONPATIO_INMOVILIZA(result.getString("DIRECCIONPATIO_INMOVILIZA"));
                temp.setDESCRIPCIONPATIO(result.getString("DESCRIPCIONPATIO"));
                temp.setVALORINFRACCION(result.getString("VALORINFRACCION"));
                temp.setPLACAAGENTE(result.getString("PLACAAGENTE"));
                temp.setCOD_ESTADO(result.getString("COD_ESTADO"));
                temp.setCODTIPOINFRACTOR(result.getString("CODTIPOINFRACTOR"));
                temp.setNROIDENTIFICACION(result.getString("NROIDENTIFICACION"));
                temp.setNUEVO_CODIGO(result.getString("NUEVO_CODIGO"));
                temp.setNUEVO_CODIGOCORREGIDO(result.getString("NUEVO_CODIGOCORREGIDO"));
                temp.setIDREPORTECOMPARENDO(result.getInt("IDREPORTECOMPARENDO"));
                temp.setIDESTADO(result.getInt("IDESTADO"));

                searchResults.add(temp);
            }

        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }

        return (List)searchResults;
    }

    public List getCompFaltantesCargaPorFechas(Connection conn, ViewCompFaltantesCarga valueObject, String fecha1,
                                               String fecha2) throws SQLException {

        List searchResults;

        StringBuffer sql = new StringBuffer("SELECT * FROM VIEW_COMP_FALTANTES_CARGA WHERE 1=1 ");

        if (valueObject.getPLACA() != null) {
            sql.append("AND PLACA = '").append(valueObject.getPLACA()).append("' ");
        }

        if (valueObject.getID_INFRACTOR() != 0) {
            sql.append("AND ID_INFRACTOR = ").append(valueObject.getID_INFRACTOR()).append(" ");
        }

        if (valueObject.getID_COMPARENDO() != 0) {
            sql.append("AND ID_COMPARENDO = ").append(valueObject.getID_COMPARENDO()).append(" ");
        }

        if (valueObject.getNUMEROCOMPARENDO() != null) {
            sql.append("AND NUMEROCOMPARENDO = '").append(valueObject.getNUMEROCOMPARENDO()).append("' ");
        }

        if (valueObject.getREPORTAFUGA() != null) {
            sql.append("AND REPORTAFUGA = '").append(valueObject.getREPORTAFUGA()).append("' ");
        }

        if (valueObject.getREPORTAACCIDENTE() != null) {
            sql.append("AND REPORTAACCIDENTE = '").append(valueObject.getREPORTAACCIDENTE()).append("' ");
        }

        if (valueObject.getREPORTAINMOVILIZACION() != null) {
            sql.append("AND REPORTAINMOVILIZACION = '").append(valueObject.getREPORTAINMOVILIZACION()).append("' ");
        }

        if (valueObject.getPOLCA() != null) {
            sql.append("AND POLCA = '").append(valueObject.getPOLCA()).append("' ");
        }

        if (valueObject.getID_DEPTO() != null) {
            sql.append("AND ID_DEPTO = '").append(valueObject.getID_DEPTO()).append("' ");
        }

        if (valueObject.getCODCIUDAD() != null) {
            sql.append("AND CODCIUDAD = '").append(valueObject.getCODCIUDAD()).append("' ");
        }

        if (valueObject.getCONSECUTIVOINMOVILIZACION() != null) {
            sql.append("AND CONSECUTIVOINMOVILIZACION = '").append(valueObject.getCONSECUTIVOINMOVILIZACION()).append("' ");
        }

        if (valueObject.getPLACAGRUA() != null) {
            sql.append("AND PLACAGRUA = '").append(valueObject.getPLACAGRUA()).append("' ");
        }

        if (valueObject.getNUMEROGRUA() != null) {
            sql.append("AND NUMEROGRUA = '").append(valueObject.getNUMEROGRUA()).append("' ");
        }

        if (valueObject.getVALORINFRACCION() != null) {
            sql.append("AND VALORINFRACCION = '").append(valueObject.getVALORINFRACCION()).append("' ");
        }

        if (valueObject.getPLACAAGENTE() != null) {
            sql.append("AND PLACAAGENTE = '").append(valueObject.getPLACAAGENTE()).append("' ");
        }

        if (valueObject.getCOD_ESTADO() != null) {
            sql.append("AND COD_ESTADO = '").append(valueObject.getCOD_ESTADO()).append("' ");
        }

        if (valueObject.getCODTIPOINFRACTOR() != null) {
            sql.append("AND CODTIPOINFRACTOR = '").append(valueObject.getCODTIPOINFRACTOR()).append("' ");
        }

        if (valueObject.getNROIDENTIFICACION() != null) {
            sql.append("AND NROIDENTIFICACION = '").append(valueObject.getNROIDENTIFICACION()).append("' ");
        }

        if (valueObject.getNUEVO_CODIGO() != null) {
            sql.append("AND NUEVO_CODIGO = '").append(valueObject.getNUEVO_CODIGO()).append("' ");
        }

        if (valueObject.getNUEVO_CODIGOCORREGIDO() != null) {
            sql.append("AND NUEVO_CODIGOCORREGIDO = '").append(valueObject.getNUEVO_CODIGOCORREGIDO()).append("' ");
        }
        if (valueObject.getIDREPORTECOMPARENDO() != 0) {
            sql.append("AND IDREPORTECOMPARENDO = ").append(valueObject.getIDREPORTECOMPARENDO()).append(" ");
        }
        if (valueObject.getIDESTADO() != 0) {
            sql.append("AND IDESTADO = ").append(valueObject.getIDESTADO()).append(" ");
        }

        sql.append("AND (FECHACOMPARENDO BETWEEN '").append(Funciones.convFechaFormatoMotor(fecha1)).append("' AND '").append(Funciones.convFechaFormatoMotor(fecha2)).append("') ");

        sql.append("ORDER BY NUMEROCOMPARENDO, FECHACOMPARENDO ASC ");

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
    }


}
