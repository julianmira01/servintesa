package modelo.datos.dao.liquidacion.caja;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.liquidacion.caja.ArqueoCaja;

import utilidades.Funciones;


/**
  * ArqueoCaja Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve ArqueoCaja object instances.
  */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


public class ArqueoCajaDao {


    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public ArqueoCaja createValueObject() {
        return new ArqueoCaja();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database
     * using given Primary-Key as identifier. This method is just a convenience method
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public ArqueoCaja getObject(Connection conn, int ID_ARQUEO) throws NotFoundException, SQLException {

        ArqueoCaja valueObject = createValueObject();
        valueObject.setID_ARQUEO(ID_ARQUEO);
        load(conn, valueObject);
        return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, ArqueoCaja valueObject) throws NotFoundException, SQLException {

        String sql = "SELECT * FROM ARQUEO_CAJA WHERE (ID_ARQUEO = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getID_ARQUEO());

            singleQuery(conn, stmt, valueObject);

        } finally {
            //if (stmt != null)
            //    stmt.close();
        }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows.
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

        String sql = "SELECT * FROM ARQUEO_CAJA ORDER BY ID_ARQUEO ASC";
        List searchResults = listQuery(conn, conn.prepareStatement(sql));

        return searchResults;
    }


    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, ArqueoCaja valueObject, String motor) throws SQLException {

        String sql = "";
        PreparedStatement stmt = null;
        ResultSet result = null;

        try {
            sql =
"INSERT INTO ARQUEO_CAJA ( ID_ARQUEO, ID_CAJERO, FEC_INICIAL, " + "FEC_FINAL, H_INICIAL, H_FINAL, " + "ARQ_ACTIVO, VLR_BASE, ARQRUNT, " +
  "ID_CIERRE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
            stmt = conn.prepareStatement(sql);

            stmt.setInt(1, valueObject.getID_ARQUEO());

            if (Funciones.contarCadena(valueObject.getID_CAJERO(), 15))
                stmt.setString(2, valueObject.getID_CAJERO());
            else
                stmt.setNull(2, Types.VARCHAR);


            if (motor.equals("FIREBIRD")) {

                if (Funciones.esFecha(valueObject.getFEC_INICIAL()))
                    stmt.setDate(3, Funciones.convFechaSSQL(valueObject.getFEC_INICIAL()));
                else
                    stmt.setNull(3, Types.DATE);

                if (Funciones.esFecha(valueObject.getFEC_FINAL()))
                    stmt.setDate(4, Funciones.convFechaSSQL(valueObject.getFEC_FINAL()));
                else
                    stmt.setNull(4, Types.DATE);
            } else if (motor.equals("ORACLE")) {
                if (valueObject.getFEC_INICIAL() != null && !valueObject.getFEC_INICIAL().equals(""))
                    stmt.setString(3, valueObject.getFEC_INICIAL());
                else
                    stmt.setNull(3, Types.DATE);

                if (valueObject.getFEC_FINAL() != null && !valueObject.getFEC_FINAL().equals(""))
                    stmt.setString(4, valueObject.getFEC_FINAL());
                else
                    stmt.setNull(4, Types.DATE);

            }

            if (motor.equals("FIREBIRD")) {
                stmt.setString(5, valueObject.getH_INICIAL());
                stmt.setString(6, valueObject.getH_FINAL());
            } else if (motor.equals("ORACLE")) {
                stmt.setTime(5, Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getH_INICIAL())));
                stmt.setTime(6, Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getH_FINAL())));

            }

            //if(Funciones.contarCadena(valueObject.getARQ_ACTIVO(), 1))

            stmt.setString(7, valueObject.getARQ_ACTIVO());
            //else
            //stmt.setNull(7, Types.VARCHAR);

            if (Funciones.contarCadena(valueObject.getVLR_BASE(), 20))
                stmt.setString(8, valueObject.getVLR_BASE());
            else
                stmt.setNull(8, Types.VARCHAR);

            //if(Funciones.contarCadena(valueObject.getARQRUNT(), 1))

            stmt.setString(9, valueObject.getARQRUNT());
            //else
            //stmt.setNull(9, Types.VARCHAR);

            if (valueObject.getID_CIERRE() == 0) {
                stmt.setNull(10, 0);
            } else {
                stmt.setInt(10, valueObject.getID_CIERRE());
            }

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount != 1) {
                //System.out.println("PrimaryKey Error when updating DB!");
                throw new SQLException("PrimaryKey Error when updating DB!");
            }

        } finally {
            if (stmt != null)
                stmt.close();
        }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, ArqueoCaja valueObject) throws NotFoundException, SQLException {

        String sql =
            "UPDATE ARQUEO_CAJA SET ID_CAJERO = ?, FEC_INICIAL = ?, FEC_FINAL = ?, " + "H_INICIAL = ?, H_FINAL = ?, ARQ_ACTIVO = ?, " +
            "VLR_BASE = ?, ARQRUNT = ?, ID_CIERRE = ? WHERE (ID_ARQUEO = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, valueObject.getID_CAJERO());
            stmt.setString(2, valueObject.getFEC_INICIAL());
            stmt.setString(3, valueObject.getFEC_FINAL());
            stmt.setString(4, valueObject.getH_INICIAL());
            stmt.setString(5, valueObject.getH_FINAL());
            stmt.setString(6, valueObject.getARQ_ACTIVO());
            stmt.setString(7, valueObject.getVLR_BASE());
            stmt.setString(8, valueObject.getARQRUNT());
            stmt.setInt(9, valueObject.getID_CIERRE());

            stmt.setInt(10, valueObject.getID_ARQUEO());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be saved! (PrimaryKey not found)");
                throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not
     * be restored by calling save. Restoring can only be done using create method but if
     * database is using automatic surrogate-keys, the resulting object will have different
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, ArqueoCaja valueObject) throws NotFoundException, SQLException {

        String sql = "DELETE FROM ARQUEO_CAJA WHERE (ID_ARQUEO = ? ) ";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, valueObject.getID_ARQUEO());

            int rowcount = databaseUpdate(conn, stmt);
            if (rowcount == 0) {
                //System.out.println("Object could not be deleted (PrimaryKey not found)");
                throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
            }
            if (rowcount > 1) {
                //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
            }
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be
     * restored by calling save. Restoring can only be done using create method but if database
     * is using automatic surrogate-keys, the resulting object will have different primary-key
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

        String sql = "DELETE FROM ARQUEO_CAJA";
        PreparedStatement stmt = null;

        try {
            stmt = conn.prepareStatement(sql);
            int rowcount = databaseUpdate(conn, stmt);
        } finally {
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

        String sql = "SELECT count(*) FROM ARQUEO_CAJA";
        PreparedStatement stmt = null;
        ResultSet result = null;
        int allRows = 0;

        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next())
                allRows = result.getInt(1);
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        return allRows;
    }


    /**
     * searchMatching-Method. This method provides searching capability to
     * get matching valueObjects from database. It works by searching all
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List,
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, ArqueoCaja valueObject) throws SQLException {

        List searchResults;

        boolean first = true;
        StringBuffer sql = new StringBuffer("SELECT * FROM ARQUEO_CAJA WHERE 1=1 ");

        if (valueObject.getID_ARQUEO() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_ARQUEO = ").append(valueObject.getID_ARQUEO()).append(" ");
        }

        if (valueObject.getID_CAJERO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_CAJERO = '").append(valueObject.getID_CAJERO()).append("' ");
        }

        if (valueObject.getFEC_INICIAL() != null && valueObject.getFEC_FINAL() != null) {
            if (first) {
                first = false;
            }
            //sql.append("AND FEC_INICIAL BETWEEN '").append(valueObject.getFEC_FINAL()).append("' ");
            sql.append("AND ((FEC_INICIAL BETWEEN '").append(valueObject.getFEC_INICIAL()).append("' AND '").append(valueObject.getFEC_FINAL()).append("') OR (FEC_FINAL BETWEEN '").append(valueObject.getFEC_INICIAL()).append("' AND '").append(valueObject.getFEC_FINAL()).append("')) ");
        }

        //if (valueObject.getFEC_INICIAL() != null) {
        //    if (first) { first = false; }
        //    sql.append("AND FEC_INICIAL LIKE '").append(valueObject.getFEC_INICIAL()).append("%' ");
        //}

        //if (valueObject.getFEC_FINAL() != null) {
        //    if (first) { first = false; }
        //    sql.append("AND FEC_FINAL LIKE '").append(valueObject.getFEC_FINAL()).append("%' ");
        //}

        //if (valueObject.getH_INICIAL() != null) {
        //    if (first) { first = false; }
        //    sql.append("AND H_INICIAL LIKE '").append(valueObject.getH_INICIAL()).append("%' ");
        //}

        //if (valueObject.getH_FINAL() != null) {
        //    if (first) { first = false; }
        //    sql.append("AND H_FINAL LIKE '").append(valueObject.getH_FINAL()).append("%' ");
        //}

        if (valueObject.getARQ_ACTIVO() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND ARQ_ACTIVO = '").append(valueObject.getARQ_ACTIVO()).append("' ");
        }

        if (valueObject.getVLR_BASE() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND VLR_BASE = '").append(valueObject.getVLR_BASE()).append("' ");
        }

        if (valueObject.getARQRUNT() != null) {
            if (first) {
                first = false;
            }
            sql.append("AND ARQRUNT = '").append(valueObject.getARQRUNT()).append("' ");
        }

        if (valueObject.getID_CIERRE() != 0) {
            if (first) {
                first = false;
            }
            sql.append("AND ID_CIERRE = ").append(valueObject.getID_CIERRE()).append(" ");
        }


        sql.append("ORDER BY ID_ARQUEO ASC ");

        System.out.println("ArqueoCaja: " + sql.toString());

        // Prevent accidential full table results.
        // Use loadAll if all rows must be returned.
        if (first)
            searchResults = new ArrayList();
        else
            searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

        return searchResults;
    }


    /**
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

        int result = stmt.executeUpdate();

        return result;
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt,
                               ArqueoCaja valueObject) throws NotFoundException, SQLException {

        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            if (result.next()) {

                valueObject.setID_ARQUEO(result.getInt("ID_ARQUEO"));
                valueObject.setID_CAJERO(result.getString("ID_CAJERO"));
                valueObject.setFEC_INICIAL(result.getString("FEC_INICIAL"));
                valueObject.setFEC_FINAL(result.getString("FEC_FINAL"));
                valueObject.setH_INICIAL(result.getString("H_INICIAL"));
                valueObject.setH_FINAL(result.getString("H_FINAL"));
                valueObject.setARQ_ACTIVO(result.getString("ARQ_ACTIVO"));
                valueObject.setVLR_BASE(result.getString("VLR_BASE"));
                valueObject.setARQRUNT(result.getString("ARQRUNT"));
                valueObject.setID_CIERRE(result.getInt("ID_CIERRE"));

            } else {
                //System.out.println("ArqueoCaja Object Not Found!");
                throw new NotFoundException("ArqueoCaja Object Not Found!");
            }
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

        ArrayList searchResults = new ArrayList();
        ResultSet result = null;

        try {
            result = stmt.executeQuery();

            while (result.next()) {
                ArqueoCaja temp = createValueObject();

                temp.setID_ARQUEO(result.getInt("ID_ARQUEO"));
                temp.setID_CAJERO(result.getString("ID_CAJERO"));
                temp.setFEC_INICIAL(result.getString("FEC_INICIAL"));
                temp.setFEC_FINAL(result.getString("FEC_FINAL"));
                temp.setH_INICIAL(result.getString("H_INICIAL"));
                temp.setH_FINAL(result.getString("H_FINAL"));
                temp.setARQ_ACTIVO(result.getString("ARQ_ACTIVO"));
                temp.setVLR_BASE(result.getString("VLR_BASE"));
                temp.setARQRUNT(result.getString("ARQRUNT"));
                temp.setID_CIERRE(result.getInt("ID_CIERRE"));

                searchResults.add(temp);
            }

        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }

        return (List)searchResults;
    }

    public int getMaxId(Connection conn) throws SQLException {

        String sql = "SELECT GEN_ID(GEN_ARQUEOCAJA,1) FROM TRANSITO";
        PreparedStatement stmt = null;
        ResultSet result = null;
        int allRows = 0;
        try {
            stmt = conn.prepareStatement(sql);
            result = stmt.executeQuery();

            if (result.next())
                allRows = result.getInt(1) + 1;
        } finally {
            if (result != null)
                result.close();
            if (stmt != null)
                stmt.close();
        }
        return allRows;
    }

    public List buscarArqueosSinCierre(Connection conn) throws SQLException {

        String sql = "SELECT * FROM ARQUEO_CAJA WHERE ID_CIERRE IS NULL AND ARQRUNT='F' ORDER BY ID_ARQUEO ASC";
        List searchResults = listQuery(conn, conn.prepareStatement(sql));

        return searchResults;
    }

    public List buscarArqueosSinCierreRunt(Connection conn) throws SQLException {

        String sql = "SELECT * FROM ARQUEO_CAJA WHERE ID_CIERRE IS NULL AND ARQRUNT='T' ORDER BY ID_ARQUEO ASC";
        List searchResults = listQuery(conn, conn.prepareStatement(sql));

        return searchResults;
    }

}
