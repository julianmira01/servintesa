package modelo.datos.dao.liquidacion.caja;

import java.sql.*;
import java.util.*;
import java.math.*;

import modelo.datos.dao.NotFoundException;
import modelo.datos.objetos.liquidacion.caja.DetArqueo;

import utilidades.Funciones;


/**
  * DetArqueo Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to
  * permanently store and retrieve DetArqueo object instances.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class DetArqueoDao {



    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public DetArqueo createValueObject() {
          return new DetArqueo();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public DetArqueo getObject(Connection conn, int IDDETARQUEO) throws NotFoundException, SQLException {

          DetArqueo valueObject = createValueObject();
          valueObject.setIDDETARQUEO(IDDETARQUEO);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, DetArqueo valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM DETARQUEO WHERE (IDDETARQUEO = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getIDDETARQUEO()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              //if (stmt != null)
              //    stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM DETARQUEO ORDER BY IDDETARQUEO ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, DetArqueo valueObject, String motor) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO DETARQUEO ( IDDETARQUEO, FAC_VLT, IDFACTURA, "
               + "FAC_NRO, REC_NRO, ESTADO, "
               + "FECHAFACTURA, HORAFACTURA, VALORPAGO, "
               + "COD_CAJERO, NOM_CAJERO, ID_ARQUEO, "
               + "VLR_BASE, IDUSR_FACTURA, IDUSR_PAGO, "
               + "ID_TIPOPAGO, DESTIPOPAGO, FECHAPAGO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);

               stmt.setInt(1, valueObject.getIDDETARQUEO()); 
               stmt.setString(2, valueObject.getFAC_VLT()); 
               stmt.setInt(3, valueObject.getIDFACTURA()); 
               stmt.setString(4, valueObject.getFAC_NRO()); 
               stmt.setString(5, valueObject.getREC_NRO()); 
               stmt.setString(6, valueObject.getESTADO());                
                              
               
            if (Funciones.esFecha(valueObject.getFECHAFACTURA()))
                stmt.setDate(7, Funciones.convFechaSSQL(valueObject.getFECHAFACTURA()));
            else
                stmt.setNull(7, Types.DATE);
              
               //stmt.setString(8, valueObject.getHORAFACTURA()); 
                              
               if (Funciones.esTime(valueObject.getHORAFACTURA()))
                  stmt.setTime(8,Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getHORAFACTURA())));
               else
                  stmt.setNull(8, Types.TIME);
              
              
                          
               stmt.setString(9, valueObject.getVALORPAGO()); 
               stmt.setString(10, valueObject.getCOD_CAJERO()); 
               stmt.setString(11, valueObject.getNOM_CAJERO()); 
               stmt.setInt(12, valueObject.getID_ARQUEO()); 
               stmt.setString(13, valueObject.getVLR_BASE()); 
               stmt.setInt(14, valueObject.getIDUSR_FACTURA()); 
               stmt.setInt(15, valueObject.getIDUSR_PAGO()); 
               stmt.setInt(16, valueObject.getID_TIPOPAGO()); 
               stmt.setString(17, valueObject.getDESTIPOPAGO()); 
               
            if (Funciones.esFecha(valueObject.getFECHAPAGO()))
                stmt.setDate(18, Funciones.convFechaSSQL(valueObject.getFECHAPAGO()));
            else
                stmt.setNull(18, Types.DATE);

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, DetArqueo valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE DETARQUEO SET FAC_VLT = ?, IDFACTURA = ?, FAC_NRO = ?, "
               + "REC_NRO = ?, ESTADO = ?, FECHAFACTURA = ?, "
               + "HORAFACTURA = ?, VALORPAGO = ?, COD_CAJERO = ?, "
               + "NOM_CAJERO = ?, ID_ARQUEO = ?, VLR_BASE = ?, "
               + "IDUSR_FACTURA = ?, IDUSR_PAGO = ?, ID_TIPOPAGO = ?, "
               + "DESTIPOPAGO = ?, FECHAPAGO = ? WHERE (IDDETARQUEO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setString(1, valueObject.getFAC_VLT()); 
              stmt.setInt(2, valueObject.getIDFACTURA()); 
              stmt.setString(3, valueObject.getFAC_NRO()); 
              stmt.setString(4, valueObject.getREC_NRO()); 
              stmt.setString(5, valueObject.getESTADO()); 
              
            if (Funciones.esFecha(valueObject.getFECHAFACTURA()))
                stmt.setDate(6, Funciones.convFechaSSQL(valueObject.getFECHAFACTURA()));
            else
                stmt.setNull(6, Types.DATE);
              
            if (Funciones.esTime(valueObject.getHORAFACTURA()))
               stmt.setTime(7,Funciones.calendarToTime(Funciones.stringToCalendar(valueObject.getHORAFACTURA())));
            else
               stmt.setNull(7, Types.TIME);
              
              stmt.setString(8, valueObject.getVALORPAGO()); 
              stmt.setString(9, valueObject.getCOD_CAJERO()); 
              stmt.setString(10, valueObject.getNOM_CAJERO()); 
              stmt.setInt(11, valueObject.getID_ARQUEO()); 
              stmt.setString(12, valueObject.getVLR_BASE()); 
              stmt.setInt(13, valueObject.getIDUSR_FACTURA()); 
              stmt.setInt(14, valueObject.getIDUSR_PAGO()); 
              stmt.setInt(15, valueObject.getID_TIPOPAGO()); 
              stmt.setString(16, valueObject.getDESTIPOPAGO()); 
              
            if (Funciones.esFecha(valueObject.getFECHAPAGO()))
                stmt.setDate(17, Funciones.convFechaSSQL(valueObject.getFECHAPAGO()));
            else
                stmt.setNull(17, Types.DATE);

              stmt.setInt(18, valueObject.getIDDETARQUEO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, DetArqueo valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM DETARQUEO WHERE (IDDETARQUEO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getIDDETARQUEO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM DETARQUEO";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM DETARQUEO";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, DetArqueo valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM DETARQUEO WHERE 1=1 ");

          if (valueObject.getIDDETARQUEO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDDETARQUEO = ").append(valueObject.getIDDETARQUEO()).append(" ");
          }

          if (valueObject.getFAC_VLT() != null) {
              if (first) { first = false; }
              sql.append("AND FAC_VLT LIKE '").append(valueObject.getFAC_VLT()).append("%' ");
          }

          if (valueObject.getIDFACTURA() != 0) {
              if (first) { first = false; }
              sql.append("AND IDFACTURA = ").append(valueObject.getIDFACTURA()).append(" ");
          }

          if (valueObject.getFAC_NRO() != null) {
              if (first) { first = false; }
              sql.append("AND FAC_NRO LIKE '").append(valueObject.getFAC_NRO()).append("%' ");
          }

          if (valueObject.getREC_NRO() != null) {
              if (first) { first = false; }
              sql.append("AND REC_NRO LIKE '").append(valueObject.getREC_NRO()).append("%' ");
          }

          if (valueObject.getESTADO() != null) {
              if (first) { first = false; }
              sql.append("AND ESTADO LIKE '").append(valueObject.getESTADO()).append("%' ");
          }

          if (valueObject.getFECHAFACTURA() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAFACTURA LIKE '").append(valueObject.getFECHAFACTURA()).append("%' ");
          }

          if (valueObject.getHORAFACTURA() != null) {
              if (first) { first = false; }
              sql.append("AND HORAFACTURA LIKE '").append(valueObject.getHORAFACTURA()).append("%' ");
          }

          if (valueObject.getVALORPAGO() != null) {
              if (first) { first = false; }
              sql.append("AND VALORPAGO LIKE '").append(valueObject.getVALORPAGO()).append("%' ");
          }

          if (valueObject.getCOD_CAJERO() != null) {
              if (first) { first = false; }
              sql.append("AND COD_CAJERO LIKE '").append(valueObject.getCOD_CAJERO()).append("%' ");
          }

          if (valueObject.getNOM_CAJERO() != null) {
              if (first) { first = false; }
              sql.append("AND NOM_CAJERO LIKE '").append(valueObject.getNOM_CAJERO()).append("%' ");
          }

          if (valueObject.getID_ARQUEO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_ARQUEO = ").append(valueObject.getID_ARQUEO()).append(" ");
          }

          if (valueObject.getVLR_BASE() != null) {
              if (first) { first = false; }
              sql.append("AND VLR_BASE LIKE '").append(valueObject.getVLR_BASE()).append("%' ");
          }

          if (valueObject.getIDUSR_FACTURA() != 0) {
              if (first) { first = false; }
              sql.append("AND IDUSR_FACTURA = ").append(valueObject.getIDUSR_FACTURA()).append(" ");
          }

          if (valueObject.getIDUSR_PAGO() != 0) {
              if (first) { first = false; }
              sql.append("AND IDUSR_PAGO = ").append(valueObject.getIDUSR_PAGO()).append(" ");
          }

          if (valueObject.getID_TIPOPAGO() != 0) {
              if (first) { first = false; }
              sql.append("AND ID_TIPOPAGO = ").append(valueObject.getID_TIPOPAGO()).append(" ");
          }

          if (valueObject.getDESTIPOPAGO() != null) {
              if (first) { first = false; }
              sql.append("AND DESTIPOPAGO LIKE '").append(valueObject.getDESTIPOPAGO()).append("%' ");
          }

          if (valueObject.getFECHAPAGO() != null) {
              if (first) { first = false; }
              sql.append("AND FECHAPAGO LIKE '").append(valueObject.getFECHAPAGO()).append("%' ");
          }


          sql.append("ORDER BY IDDETARQUEO ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, DetArqueo valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setIDDETARQUEO(result.getInt("IDDETARQUEO")); 
                   valueObject.setFAC_VLT(result.getString("FAC_VLT")); 
                   valueObject.setIDFACTURA(result.getInt("IDFACTURA")); 
                   valueObject.setFAC_NRO(result.getString("FAC_NRO")); 
                   valueObject.setREC_NRO(result.getString("REC_NRO")); 
                   valueObject.setESTADO(result.getString("ESTADO")); 
                   valueObject.setFECHAFACTURA(result.getString("FECHAFACTURA")); 
                   valueObject.setHORAFACTURA(result.getString("HORAFACTURA")); 
                   valueObject.setVALORPAGO(result.getString("VALORPAGO")); 
                   valueObject.setCOD_CAJERO(result.getString("COD_CAJERO")); 
                   valueObject.setNOM_CAJERO(result.getString("NOM_CAJERO")); 
                   valueObject.setID_ARQUEO(result.getInt("ID_ARQUEO")); 
                   valueObject.setVLR_BASE(result.getString("VLR_BASE")); 
                   valueObject.setIDUSR_FACTURA(result.getInt("IDUSR_FACTURA")); 
                   valueObject.setIDUSR_PAGO(result.getInt("IDUSR_PAGO")); 
                   valueObject.setID_TIPOPAGO(result.getInt("ID_TIPOPAGO")); 
                   valueObject.setDESTIPOPAGO(result.getString("DESTIPOPAGO")); 
                   valueObject.setFECHAPAGO(result.getString("FECHAPAGO")); 

              } else {
                    //System.out.println("DetArqueo Object Not Found!");
                    throw new NotFoundException("DetArqueo Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   DetArqueo temp = createValueObject();

                   temp.setIDDETARQUEO(result.getInt("IDDETARQUEO")); 
                   temp.setFAC_VLT(result.getString("FAC_VLT")); 
                   temp.setIDFACTURA(result.getInt("IDFACTURA")); 
                   temp.setFAC_NRO(result.getString("FAC_NRO")); 
                   temp.setREC_NRO(result.getString("REC_NRO")); 
                   temp.setESTADO(result.getString("ESTADO")); 
                   temp.setFECHAFACTURA(result.getString("FECHAFACTURA")); 
                   temp.setHORAFACTURA(result.getString("HORAFACTURA")); 
                   temp.setVALORPAGO(result.getString("VALORPAGO")); 
                   temp.setCOD_CAJERO(result.getString("COD_CAJERO")); 
                   temp.setNOM_CAJERO(result.getString("NOM_CAJERO")); 
                   temp.setID_ARQUEO(result.getInt("ID_ARQUEO")); 
                   temp.setVLR_BASE(result.getString("VLR_BASE")); 
                   temp.setIDUSR_FACTURA(result.getInt("IDUSR_FACTURA")); 
                   temp.setIDUSR_PAGO(result.getInt("IDUSR_PAGO")); 
                   temp.setID_TIPOPAGO(result.getInt("ID_TIPOPAGO")); 
                   temp.setDESTIPOPAGO(result.getString("DESTIPOPAGO")); 
                   temp.setFECHAPAGO(result.getString("FECHAPAGO")); 

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }

    public int getMaxId(Connection conn) throws SQLException {
    
          String sql = "SELECT GEN_ID(GEN_DETARQUEO,1) FROM TRANSITO";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;
          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();
    
              if (result.next())
                  allRows = result.getInt(1)+1;
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }

}

