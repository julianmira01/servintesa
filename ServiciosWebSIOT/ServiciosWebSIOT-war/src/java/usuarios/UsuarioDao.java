package usuarios;

import java.sql.*;
import java.util.*;
import java.math.*;


 /**
  * Usuario Data Access Object (DAO) migrado a firebird 2.5.
  * This class contains all database handling that is needed to 
  * permanently store and retrieve Usuario object instances. 
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class UsuarioDao {


	Conexion conexion=new Conexion();
	Connection conn;
    /**
     * createValueObject-method. This method is used when the Dao class needs
     * to create new value object instance. The reason why this method exists
     * is that sometimes the programmer may want to extend also the valueObject
     * and then this method can be overrided to return extended valueObject.
     * NOTE: If you extend the valueObject class, make sure to override the
     * clone() method in it!
     */
    public Usuario createValueObject() {
          return new Usuario();
    }


    /**
     * getObject-method. This will create and load valueObject contents from database 
     * using given Primary-Key as identifier. This method is just a convenience method 
     * for the real load-method which accepts the valueObject as a parameter. Returned
     * valueObject will be created using the createValueObject() method.
     */
    public Usuario getObject(Connection conn, int ID_USUARIO) throws NotFoundException, SQLException {

          Usuario valueObject = createValueObject();
          valueObject.setID_USUARIO(ID_USUARIO);
          load(conn, valueObject);
          return valueObject;
    }


    /**
     * load-method. This will load valueObject contents from database using
     * Primary-Key as identifier. Upper layer should use this so that valueObject
     * instance is created and only primary-key should be specified. Then call
     * this method to complete other persistent information. This method will
     * overwrite all other fields except primary-key and possible runtime variables.
     * If load can not find matching row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be loaded.
     *                     Primary-key field must be set for this to work properly.
     */
    public void load(Connection conn, Usuario valueObject) throws NotFoundException, SQLException {

          String sql = "SELECT * FROM USUARIOS WHERE (ID_USUARIO = ? ) "; 
          PreparedStatement stmt = null;

          try {
               stmt = conn.prepareStatement(sql);
               stmt.setInt(1, valueObject.getID_USUARIO()); 

               singleQuery(conn, stmt, valueObject);

          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * LoadAll-method. This will read all contents from database table and
     * build a List containing valueObjects. Please note, that this method
     * will consume huge amounts of resources if table has lot's of rows. 
     * This should only be used when target tables have only small amounts
     * of data.
     *
     * @param conn         This method requires working database connection.
     */
    public List loadAll(Connection conn) throws SQLException {

          String sql = "SELECT * FROM USUARIOS ORDER BY ID_USUARIO ASC ";
          List searchResults = listQuery(conn, conn.prepareStatement(sql));

          return searchResults;
    }



    /**
     * create-method. This will create new row in database according to supplied
     * valueObject contents. Make sure that values for all NOT NULL columns are
     * correctly specified. Also, if this table does not use automatic surrogate-keys
     * the primary-key must be specified. After INSERT command this method will 
     * read the generated primary-key back to valueObject if automatic surrogate-keys
     * were used. 
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be created.
     *                     If automatic surrogate-keys are not used the Primary-key 
     *                     field must be set for this to work properly.
     */
    public synchronized void create(Connection conn, Usuario valueObject) throws SQLException {

          String sql = "";
          PreparedStatement stmt = null;
          ResultSet result = null;

          try {
               sql = "INSERT INTO USUARIOS ( ID_USUARIO, LOGIN, CLAVE, "
               + "NOMBRE, APELLIDO, ID_PERFIL, "
               + "ESTADO, FECHAINGRESO, FECHARETIRO, "
               + "USUARIORUNT, TOKENHUELLA, DOCUMENTO, "
               + "PASSWORDRUNT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
               stmt = conn.prepareStatement(sql);

               stmt.setInt(1, valueObject.getID_USUARIO()); 
               stmt.setString(2, valueObject.getLOGIN()); 
               stmt.setString(3, valueObject.getCLAVE()); 
               stmt.setString(4, valueObject.getNOMBRE()); 
               stmt.setString(5, valueObject.getAPELLIDO()); 
               stmt.setString(6, valueObject.getID_PERFIL()); 
               stmt.setString(7, valueObject.getESTADO()); 
               stmt.setString(8, valueObject.getFECHAINGRESO()); 
               stmt.setString(9, valueObject.getFECHARETIRO()); 
               stmt.setString(10, valueObject.getUSUARIORUNT()); 
               stmt.setString(11, valueObject.getTOKENHUELLA()); 
               stmt.setString(12, valueObject.getDOCUMENTO()); 
               stmt.setString(13, valueObject.getPASSWORDRUNT()); 

               int rowcount = databaseUpdate(conn, stmt);
               if (rowcount != 1) {
                    //System.out.println("PrimaryKey Error when updating DB!");
                    throw new SQLException("PrimaryKey Error when updating DB!");
               }

          } finally {
              if (stmt != null)
                  stmt.close();
          }


    }


    /**
     * save-method. This method will save the current state of valueObject to database.
     * Save can not be used to create new instances in database, so upper layer must
     * make sure that the primary-key is correctly specified. Primary-key will indicate
     * which instance is going to be updated in database. If save can not find matching 
     * row, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be saved.
     *                     Primary-key field must be set for this to work properly.
     */
    public void save(Connection conn, Usuario valueObject) 
          throws NotFoundException, SQLException {

          String sql = "UPDATE USUARIOS SET LOGIN = ?, CLAVE = ?, NOMBRE = ?, "
               + "APELLIDO = ?, ID_PERFIL = ?, ESTADO = ?, "
               + "FECHAINGRESO = ?, FECHARETIRO = ?, USUARIORUNT = ?, "
               + "TOKENHUELLA = ?, DOCUMENTO = ?, PASSWORDRUNT = ? WHERE (ID_USUARIO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setString(1, valueObject.getLOGIN()); 
              stmt.setString(2, valueObject.getCLAVE()); 
              stmt.setString(3, valueObject.getNOMBRE()); 
              stmt.setString(4, valueObject.getAPELLIDO()); 
              stmt.setString(5, valueObject.getID_PERFIL()); 
              stmt.setString(6, valueObject.getESTADO()); 
              stmt.setString(7, valueObject.getFECHAINGRESO()); 
              stmt.setString(8, valueObject.getFECHARETIRO()); 
              stmt.setString(9, valueObject.getUSUARIORUNT()); 
              stmt.setString(10, valueObject.getTOKENHUELLA()); 
              stmt.setString(11, valueObject.getDOCUMENTO()); 
              stmt.setString(12, valueObject.getPASSWORDRUNT()); 

              stmt.setInt(13, valueObject.getID_USUARIO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be saved! (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be saved! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were affected!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were affected!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * delete-method. This method will remove the information from database as identified by
     * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
     * be restored by calling save. Restoring can only be done using create method but if 
     * database is using automatic surrogate-keys, the resulting object will have different 
     * primary-key than what it was in the deleted object. If delete can not find matching row,
     * NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance to be deleted.
     *                     Primary-key field must be set for this to work properly.
     */
    public void delete(Connection conn, Usuario valueObject) 
          throws NotFoundException, SQLException {

          String sql = "DELETE FROM USUARIOS WHERE (ID_USUARIO = ? ) ";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              stmt.setInt(1, valueObject.getID_USUARIO()); 

              int rowcount = databaseUpdate(conn, stmt);
              if (rowcount == 0) {
                   //System.out.println("Object could not be deleted (PrimaryKey not found)");
                   throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
              }
              if (rowcount > 1) {
                   //System.out.println("PrimaryKey Error when updating DB! (Many objects were deleted!)");
                   throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
              }
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * deleteAll-method. This method will remove all information from the table that matches
     * this Dao and ValueObject couple. This should be the most efficient way to clear table.
     * Once deleteAll has been called, no valueObject that has been created before can be 
     * restored by calling save. Restoring can only be done using create method but if database 
     * is using automatic surrogate-keys, the resulting object will have different primary-key 
     * than what it was in the deleted object. (Note, the implementation of this method should
     * be different with different DB backends.)
     *
     * @param conn         This method requires working database connection.
     */
    public void deleteAll(Connection conn) throws SQLException {

          String sql = "DELETE FROM USUARIOS";
          PreparedStatement stmt = null;

          try {
              stmt = conn.prepareStatement(sql);
              int rowcount = databaseUpdate(conn, stmt);
          } finally {
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * coutAll-method. This method will return the number of all rows from table that matches
     * this Dao. The implementation will simply execute "select count(primarykey) from table".
     * If table is empty, the return value is 0. This method should be used before calling
     * loadAll, to make sure table has not too many rows.
     *
     * @param conn         This method requires working database connection.
     */
    public int countAll(Connection conn) throws SQLException {

          String sql = "SELECT count(*) FROM USUARIOS";
          PreparedStatement stmt = null;
          ResultSet result = null;
          int allRows = 0;

          try {
              stmt = conn.prepareStatement(sql);
              result = stmt.executeQuery();

              if (result.next())
                  allRows = result.getInt(1);
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
          return allRows;
    }


    /** 
     * searchMatching-Method. This method provides searching capability to 
     * get matching valueObjects from database. It works by searching all 
     * objects that match permanent instance variables of given object.
     * Upper layer should use this by setting some parameters in valueObject
     * and then  call searchMatching. The result will be 0-N objects in a List, 
     * all matching those criteria you specified. Those instance-variables that
     * have NULL values are excluded in search-criteria.
     *
     * @param conn         This method requires working database connection.
     * @param valueObject  This parameter contains the class instance where search will be based.
     *                     Primary-key field should not be set.
     */
    public List searchMatching(Connection conn, Usuario valueObject) throws SQLException {

          List searchResults;

          boolean first = true;
          StringBuffer sql = new StringBuffer("SELECT * FROM USUARIOS WHERE 1=1 ");

          if (valueObject.getID_USUARIO() != 0) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.ID_USUARIO = ").append(valueObject.getID_USUARIO()).append(" ");
          }

          if (valueObject.getLOGIN() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.LOGIN LIKE '").append(valueObject.getLOGIN()).append("%' ");
          }

          if (valueObject.getCLAVE() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.CLAVE LIKE '").append(valueObject.getCLAVE()).append("%' ");
          }

          if (valueObject.getNOMBRE() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.NOMBRE LIKE '").append(valueObject.getNOMBRE()).append("%' ");
          }

          if (valueObject.getAPELLIDO() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.APELLIDO LIKE '").append(valueObject.getAPELLIDO()).append("%' ");
          }

          if (valueObject.getID_PERFIL() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.ID_PERFIL LIKE '").append(valueObject.getID_PERFIL()).append("%' ");
          }

          if (valueObject.getESTADO() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.ESTADO LIKE '").append(valueObject.getESTADO()).append("%' ");
          }

          if (valueObject.getFECHAINGRESO() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.FECHAINGRESO LIKE '").append(valueObject.getFECHAINGRESO()).append("%' ");
          }

          if (valueObject.getFECHARETIRO() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.FECHARETIRO LIKE '").append(valueObject.getFECHARETIRO()).append("%' ");
          }

          if (valueObject.getUSUARIORUNT() != null) {
              if (first) { first = false; }
             // sql.append("AND USUARIORUNT = '").append(valueObject.getUSUARIORUNT()).append(" ");
              sql.append("AND USUARIOS.USUARIORUNT = '").append(valueObject.getUSUARIORUNT()).append("'"); 
          }

          if (valueObject.getTOKENHUELLA() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.TOKENHUELLA LIKE '").append(valueObject.getTOKENHUELLA()).append("%' ");
          }

          if (valueObject.getDOCUMENTO() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.DOCUMENTO LIKE '").append(valueObject.getDOCUMENTO()).append("%' ");
          }

          if (valueObject.getPASSWORDRUNT() != null) {
              if (first) { first = false; }
              sql.append("AND USUARIOS.PASSWORDRUNT LIKE '").append(valueObject.getPASSWORDRUNT()).append("%' ");
          }


          sql.append(" AND USUARIOS.ESTADO='A' ORDER BY USUARIOS.ID_USUARIO ASC ");

          // Prevent accidential full table results.
          // Use loadAll if all rows must be returned.
          System.out.println(sql);
          if (first)
               searchResults = new ArrayList();
          else
               searchResults = listQuery(conn, conn.prepareStatement(sql.toString()));

          return searchResults;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }


    /**
     * databaseUpdate-method. This method is a helper method for internal use. It will execute
     * all database handling that will change the information in tables. SELECT queries will
     * not be executed here however. The return value indicates how many rows were affected.
     * This method will also make sure that if cache is used, it will reset when data changes.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

          int result = stmt.executeUpdate();

          return result;
    }



    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return only one row. The resultset will be converted
     * to valueObject. If no rows were found, NotFoundException will be thrown.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     * @param valueObject  Class-instance where resulting data will be stored.
     */
    protected void singleQuery(Connection conn, PreparedStatement stmt, Usuario valueObject) 
          throws NotFoundException, SQLException {

          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              if (result.next()) {

                   valueObject.setID_USUARIO(result.getInt("ID_USUARIO")); 
                   valueObject.setLOGIN(result.getString("LOGIN")); 
                   valueObject.setCLAVE(result.getString("CLAVE")); 
                   valueObject.setNOMBRE(result.getString("NOMBRE")); 
                   valueObject.setAPELLIDO(result.getString("APELLIDO")); 
                   valueObject.setID_PERFIL(result.getString("ID_PERFIL")); 
                   valueObject.setESTADO(result.getString("ESTADO")); 
                   valueObject.setFECHAINGRESO(result.getString("FECHAINGRESO")); 
                   valueObject.setFECHARETIRO(result.getString("FECHARETIRO")); 
                   valueObject.setUSUARIORUNT(result.getString("USUARIORUNT")); 
                   valueObject.setTOKENHUELLA(result.getString("TOKENHUELLA")); 
                   valueObject.setDOCUMENTO(result.getString("DOCUMENTO")); 
                   valueObject.setPASSWORDRUNT(result.getString("PASSWORDRUNT")); 

              } else {
                    //System.out.println("Usuario Object Not Found!");
                    throw new NotFoundException("Usuario Object Not Found!");
              }
          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }
    }


    /**
     * databaseQuery-method. This method is a helper method for internal use. It will execute
     * all database queries that will return multiple rows. The resultset will be converted
     * to the List of valueObjects. If no rows were found, an empty List will be returned.
     *
     * @param conn         This method requires working database connection.
     * @param stmt         This parameter contains the SQL statement to be excuted.
     */
    protected List listQuery(Connection conn, PreparedStatement stmt) throws SQLException {

          ArrayList searchResults = new ArrayList();
          ResultSet result = null;

          try {
              result = stmt.executeQuery();

              while (result.next()) {
                   Usuario temp = createValueObject();

                   temp.setID_USUARIO(result.getInt("ID_USUARIO")); 
                   temp.setLOGIN(result.getString("LOGIN")); 
                   temp.setCLAVE(result.getString("CLAVE")); 
                   temp.setNOMBRE(result.getString("NOMBRE")); 
                   temp.setAPELLIDO(result.getString("APELLIDO")); 
                   temp.setID_PERFIL(result.getString("ID_PERFIL")); 
                   temp.setESTADO(result.getString("ESTADO")); 
                   temp.setFECHAINGRESO(result.getString("FECHAINGRESO")); 
                   temp.setFECHARETIRO(result.getString("FECHARETIRO")); 
                   temp.setUSUARIORUNT(result.getString("USUARIORUNT")); 
                   temp.setTOKENHUELLA(result.getString("TOKENHUELLA")); 
                   temp.setDOCUMENTO(result.getString("DOCUMENTO")); 
                   temp.setPASSWORDRUNT(result.getString("PASSWORDRUNT")); 

                   searchResults.add(temp);
              }

          } finally {
              if (result != null)
                  result.close();
              if (stmt != null)
                  stmt.close();
          }

          return (List)searchResults;
    }

    
    public String getPassword(String ced){
    	
    		ArrayList items=null;
    		Usuario usu=new Usuario();
    		try{
    			conn=conexion.conectar();
    			 
    			 //usu.setDOCUMENTO(ced);
    			 usu.setUSUARIORUNT(ced);
    			 items=  (ArrayList)searchMatching(conn, usu);
    			usu=(Usuario)items.get(0);
    		}
    		catch (Exception e) {
    			System.out.println("ERROR CON listarItems: " + e.getMessage());
    		}finally{
    			conexion.cerrarCx();
    		}
    		return usu.getPASSWORDRUNT();
    	
    }

}



